<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://stephenbradshaw.github.io/offsecfeed/index.html</id>
    <title>osmos::feed</title>
    <updated>2023-12-25T00:36:40.881Z</updated>
    <generator>osmosfeed 1.15.1</generator>
    <link rel="alternate" href="https://stephenbradshaw.github.io/offsecfeed/index.html"/>
    <link rel="self" href="https://stephenbradshaw.github.io/offsecfeed/feed.atom"/>
    <entry>
        <title type="html"><![CDATA[RISC-Y Business: Raging against the reduced machine]]></title>
        <id>https://secret.club/2023/12/24/riscy-business.html</id>
        <link href="https://secret.club/2023/12/24/riscy-business.html"/>
        <updated>2023-12-24T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[Abstract In recent years the interest in obfuscation has increased, mainly because people want to protect their intellectual property. Unfortunately, most of what’s been written is focused on the theoretical aspects. In this article, we will discuss the practical engineering challenges of developing a low-footprint virtual machine interpreter. The VM is easily embeddable, built on open-source technology and has various hardening features that were achieved with minimal effort. Introduction In addition to protecting intellectual property, a minimal virtual machine can be useful for other reasons. You might want to have an embeddable interpreter to execute business logic (shellcode), without having to deal with RWX memory. It can also be useful as an educational tool, or just for fun. Creating a custom VM architecture (similar to VMProtect/Themida) means that we would have to deal with binary rewriting/lifting or write our own compiler. Instead, we decided to use a preexisting architecture, which would be supported by LLVM: RISC-V. This architecture is already widely used for educational purposes and has the advantage of being very simple to understand and implement. Initially, the main contender was WebAssembly. However, existing interpreters were very bloated and would also require dealing with a binary format. Additionally, it looks like WASM64 is very underdeveloped and our memory model requires 64-bit pointer support. SPARC and PowerPC were also considered, but RISC-V seems to be more popular and there are a lot more resources available for it. WebAssembly was designed for sandboxing and therefore strictly separates guest and host memory. Because we will be writing our own RISC-V interpreter, we chose to instead share memory between the guest and the host. This means that pointers in the RISC-V execution context (the guest) are valid in the host process and vice-versa. As a result, the instructions responsible for reading/writing memory can be implemented as a simple memcpy call and we do not need additional code to translate/validate memory accesses (which helps with our goal of small code size). With this property, we need to implement only two system calls to perform arbitrary operations in the host process: uintptr_t riscvm_get_peb(); uintptr_t riscvm_host_call(uintptr_t rip, uintptr_t args[13]); The riscvm_get_peb is Windows-specific and it allows us to resolve exports, which we can then pass to the riscvm_host_call function to execute arbitrary code. Additionally, an optional host_syscall stub could be implemented, but this is not strictly necessary since we can just call the functions in ntdll.dll instead. Toolchain and CRT To keep the interpreter footprint as low as possible, we decided to develop a toolchain that outputs a freestanding binary. The goal is to copy this binary into memory and point the VM’s program counter there to start execution. Because we are in freestanding mode, there is no C runtime available to us, this requires us to handle initialization ourselves. As an example, we will use the following hello.c file: int _start() { int result = 0; for(int i = 0; i &lt; 52; i++) { result += *(volatile int*)&amp;i; } return result + 11; } We compile the program with the following incantation: clang -target riscv64 -march=rv64g -mcmodel=medany -Os -c hello.c -o hello.o And then verify by disassembling the object: $ llvm-objdump --disassemble hello.o hello.o: file format elf64-littleriscv 0000000000000000 &lt;_start&gt;: 0: 13 01 01 ff addi sp, sp, -16 4: 13 05 00 00 li a0, 0 8: 23 26 01 00 sw zero, 12(sp) c: 93 05 30 03 li a1, 51 0000000000000010 &lt;.LBB0_1&gt;: 10: 03 26 c1 00 lw a2, 12(sp) 14: 33 05 a6 00 add a0, a2, a0 18: 9b 06 16 00 addiw a3, a2, 1 1c: 23 26 d1 00 sw a3, 12(sp) 20: 63 40 b6 00 blt a2, a1, 0x20 &lt;.LBB0_1+0x10&gt; 24: 1b 05 b5 00 addiw a0, a0, 11 28: 13 01 01 01 addi sp, sp, 16 2c: 67 80 00 00 ret The hello.o is a regular ELF object file. To get a freestanding binary we need to invoke the linker with a linker script: ENTRY(_start) LINK_BASE = 0x8000000; SECTIONS { . = LINK_BASE; __base = .; .text : ALIGN(16) { . = LINK_BASE; *(.text) *(.text.*) } .data : { *(.rodata) *(.rodata.*) *(.data) *(.data.*) *(.eh_frame) } .init : { __init_array_start = .; *(.init_array) __init_array_end = .; } .bss : { *(.bss) *(.bss.*) *(.sbss) *(.sbss.*) } .relocs : { . = . + SIZEOF(.bss); __relocs_start = .; } } This script is the result of an excessive amount of swearing and experimentation. The format is .name : { ... } where .name is the destination section and the stuff in the brackets is the content to paste in there. The special . operator is used to refer to the current position in the binary and we define a few special symbols for use by the runtime: Symbol Meaning __base Base of the executable. __init_array_start Start of the C++ init arrays. __init_array_end End of the C++ init arrays. __relocs_start Start of the relocations (end of the binary). These symbols are declared as extern in the C code and they will be resolved at link-time. While it may seem confusing at first that we have a destination section, it starts to make sense once you realize the linker has to output a regular ELF executable. That ELF executable is then passed to llvm-objcopy to create the freestanding binary blob. This makes debugging a whole lot easier (because we get DWARF symbols) and since we will not implement an ELF loader, it also allows us to extract the relocations for embedding into the final binary. To link the intermediate ELF executable and then create the freestanding hello.pre.bin: ld.lld.exe -o hello.elf --oformat=elf -emit-relocs -T ..\lib\linker.ld --Map=hello.map hello.o llvm-objcopy -O binary hello.elf hello.pre.bin For debugging purposes we also output hello.map, which tells us exactly where the linker put the code/data: VMA LMA Size Align Out In Symbol 0 0 0 1 LINK_BASE = 0x8000000 0 0 8000000 1 . = LINK_BASE 8000000 0 0 1 __base = . 8000000 8000000 30 16 .text 8000000 8000000 0 1 . = LINK_BASE 8000000 8000000 30 4 hello.o:(.text) 8000000 8000000 30 1 _start 8000010 8000010 0 1 .LBB0_1 8000030 8000030 0 1 .init 8000030 8000030 0 1 __init_array_start = . 8000030 8000030 0 1 __init_array_end = . 8000030 8000030 0 1 .relocs 8000030 8000030 0 1 . = . + SIZEOF ( .bss ) 8000030 8000030 0 1 __relocs_start = . 0 0 18 8 .rela.text 0 0 18 8 hello.o:(.rela.text) 0 0 3b 1 .comment 0 0 3b 1 &lt;internal&gt;:(.comment) 0 0 30 1 .riscv.attributes 0 0 30 1 &lt;internal&gt;:(.riscv.attributes) 0 0 108 8 .symtab 0 0 108 8 &lt;internal&gt;:(.symtab) 0 0 55 1 .shstrtab 0 0 55 1 &lt;internal&gt;:(.shstrtab) 0 0 5c 1 .strtab 0 0 5c 1 &lt;internal&gt;:(.strtab) The final ingredient of the toolchain is a small Python script (relocs.py) that extracts the relocations from the ELF file and appends them to the end of the hello.pre.bin. The custom relocation format only supports R_RISCV_64 and is resolved by our CRT like so: typedef struct { uint8_t type; uint32_t offset; int64_t addend; } __attribute__((packed)) Relocation; extern uint8_t __base[]; extern uint8_t __relocs_start[]; #define LINK_BASE 0x8000000 #define R_RISCV_NONE 0 #define R_RISCV_64 2 static __attribute((noinline)) void riscvm_relocs() { if (*(uint32_t*)__relocs_start != 'ALER') { asm volatile("ebreak"); } uintptr_t load_base = (uintptr_t)__base; for (Relocation* itr = (Relocation*)(__relocs_start + sizeof(uint32_t)); itr-&gt;type != R_RISCV_NONE; itr++) { if (itr-&gt;type == R_RISCV_64) { uint64_t* ptr = (uint64_t*)((uintptr_t)itr-&gt;offset - LINK_BASE + load_base); *ptr -= LINK_BASE; *ptr += load_base; } else { asm volatile("ebreak"); } } } As you can see, the __base and __relocs_start magic symbols are used here. The only reason this works is the -mcmodel=medany we used when compiling the object. You can find more details in this article and in the RISC-V ELF Specification. In short, this flag allows the compiler to assume that all code will be emitted in a 2 GiB address range, which allows more liberal PC-relative addressing. The R_RISCV_64 relocation type gets emitted when you put pointers in the .data section: void* functions[] = { &amp;function1, &amp;function2, }; This also happens when using vtables in C++, and we wanted to support these properly early on, instead of having to fight with horrifying bugs later. The next piece of the CRT involves the handling of the init arrays (which get emitted by global instances of classes that have a constructor): typedef void (*InitFunction)(); extern InitFunction __init_array_start; extern InitFunction __init_array_end; static __attribute((optnone)) void riscvm_init_arrays() { for (InitFunction* itr = &amp;__init_array_start; itr != &amp;__init_array_end; itr++) { (*itr)(); } } Frustratingly, we were not able to get this function to generate correct code without the __attribute__((optnone)). We suspect this has to do with aliasing assumptions (the start/end can technically refer to the same memory), but we didn’t investigate this further. Interpreter internals Note: the interpreter was initially based on riscvm.c by edubart. However, we have since completely rewritten it in C++ to better suit our purpose. Based on the RISC-V Calling Conventions document, we can create an enum for the 32 registers: enum RegIndex { reg_zero, // always zero (immutable) reg_ra, // return address reg_sp, // stack pointer reg_gp, // global pointer reg_tp, // thread pointer reg_t0, // temporary reg_t1, reg_t2, reg_s0, // callee-saved reg_s1, reg_a0, // arguments reg_a1, reg_a2, reg_a3, reg_a4, reg_a5, reg_a6, reg_a7, reg_s2, // callee-saved reg_s3, reg_s4, reg_s5, reg_s6, reg_s7, reg_s8, reg_s9, reg_s10, reg_s11, reg_t3, // temporary reg_t4, reg_t5, reg_t6, }; We just need to add a pc register and we have the structure to represent the RISC-V CPU state: struct riscvm { int64_t pc; uint64_t regs[32]; }; It is important to keep in mind that the zero register is always set to 0 and we have to prevent writes to it by using a macro: #define reg_write(idx, value) \ do \ { \ if (LIKELY(idx != reg_zero)) \ { \ self-&gt;regs[idx] = value; \ } \ } while (0) The instructions (ignoring the optional compression extension) are always 32-bits in length and can be cleanly expressed as a union: union Instruction { struct { uint32_t compressed_flags : 2; uint32_t opcode : 5; uint32_t : 25; }; struct { uint32_t opcode : 7; uint32_t rd : 5; uint32_t funct3 : 3; uint32_t rs1 : 5; uint32_t rs2 : 5; uint32_t funct7 : 7; } rtype; struct { uint32_t opcode : 7; uint32_t rd : 5; uint32_t funct3 : 3; uint32_t rs1 : 5; uint32_t rs2 : 5; uint32_t shamt : 1; uint32_t imm : 6; } rwtype; struct { uint32_t opcode : 7; uint32_t rd : 5; uint32_t funct3 : 3; uint32_t rs1 : 5; uint32_t imm : 12; } itype; struct { uint32_t opcode : 7; uint32_t rd : 5; uint32_t imm : 20; } utype; struct { uint32_t opcode : 7; uint32_t rd : 5; uint32_t imm12 : 8; uint32_t imm11 : 1; uint32_t imm1 : 10; uint32_t imm20 : 1; } ujtype; struct { uint32_t opcode : 7; uint32_t imm5 : 5; uint32_t funct3 : 3; uint32_t rs1 : 5; uint32_t rs2 : 5; uint32_t imm7 : 7; } stype; struct { uint32_t opcode : 7; uint32_t imm_11 : 1; uint32_t imm_1_4 : 4; uint32_t funct3 : 3; uint32_t rs1 : 5; uint32_t rs2 : 5; uint32_t imm_5_10 : 6; uint32_t imm_12 : 1; } sbtype; int16_t chunks16[2]; uint32_t bits; }; static_assert(sizeof(Instruction) == sizeof(uint32_t), ""); There are 13 top-level opcodes (Instruction.opcode) and some of those opcodes have another field that further specializes the functionality (i.e. Instruction.itype.funct3). To keep the code readable, the enumerations for the opcode are defined in opcodes.h. The interpreter is structured to have handler functions for the top-level opcode in the following form: bool handler_rv64_&lt;opcode&gt;(riscvm_ptr self, Instruction inst); As an example, we can look at the handler for the lui instruction (note that the handlers themselves are responsible for updating pc): ALWAYS_INLINE static bool handler_rv64_lui(riscvm_ptr self, Instruction inst) { int64_t imm = bit_signer(inst.utype.imm, 20) &lt;&lt; 12; reg_write(inst.utype.rd, imm); self-&gt;pc += 4; dispatch(); // return true; } The interpreter executes until one of the handlers returns false, indicating the CPU has to halt: void riscvm_run(riscvm_ptr self) { while (true) { Instruction inst; inst.bits = *(uint32_t*)self-&gt;pc; if (!riscvm_execute_handler(self, inst)) break; } } Plenty of articles have been written about the semantics of RISC-V, so you can look at the source code if you’re interested in the implementation details of individual instructions. The structure of the interpreter also allows us to easily implement obfuscation features, which we will discuss in the next section. For now, we will declare the handler functions as __attribute__((always_inline)) and set the -fno-jump-tables compiler option, which gives us a riscvm_run function that (comfortably) fits into a single page (0xCA4 bytes): Hardening features A regular RISC-V interpreter is fun, but an attacker can easily reverse engineer our payload by throwing it into Ghidra to decompile it. To force the attacker to at least look at our VM interpreter, we implemented a few security features. These features are implemented in a Python script that parses the linker MAP file and directly modifies the opcodes: encrypt.py. Opcode shuffling The most elegant (and likely most effective) obfuscation is to simply reorder the enums of the instruction opcodes and sub-functions. The shuffle.py script is used to generate shuffled_opcodes.h, which is then included into riscvm.h instead of opcodes.h to mix the opcodes: #ifdef OPCODE_SHUFFLING #warning Opcode shuffling enabled #include "shuffled_opcodes.h" #else #include "opcodes.h" #endif // OPCODE_SHUFFLING There is also a shuffled_opcodes.json file generated, which is parsed by encrypt.py to know how to shuffle the assembled instructions. Because enums are used for all the opcodes, we only need to recompile the interpreter to obfuscate it; there is no additional complexity cost in the implementation. Bytecode encryption To increase diversity between payloads for the same VM instance, we also employ a simple ‘encryption’ scheme on top of the opcode: ALWAYS_INLINE static uint32_t tetra_twist(uint32_t input) { /** * Custom hash function that is used to generate the encryption key. * This has strong avalanche properties and is used to ensure that * small changes in the input result in large changes in the output. */ constexpr uint32_t prime1 = 0x9E3779B1; // a large prime number input ^= input &gt;&gt; 15; input *= prime1; input ^= input &gt;&gt; 12; input *= prime1; input ^= input &gt;&gt; 4; input *= prime1; input ^= input &gt;&gt; 16; return input; } ALWAYS_INLINE static uint32_t transform(uintptr_t offset, uint32_t key) { uint32_t key2 = key + offset; return tetra_twist(key2); } ALWAYS_INLINE static uint32_t riscvm_fetch(riscvm_ptr self) { uint32_t data; memcpy(&amp;data, (const void*)self-&gt;pc, sizeof(data)); #ifdef CODE_ENCRYPTION return data ^ transform(self-&gt;pc - self-&gt;base, self-&gt;key); #else return data; #endif // CODE_ENCRYPTION } The offset relative to the start of the bytecode is used as the seed to a simple transform function. The result of this function is XOR’d with the instruction data before decoding. The exact transformation doesn’t really matter, because an attacker can always observe the decrypted bytecode at runtime. However, static analysis becomes more difficult and pattern-matching the payload is prevented, all for a relatively small increase in VM implementation complexity. It would be possible to encrypt the contents of the .data section of the payload as well, but we would have to completely decrypt it in memory before starting execution anyway. Technically, it would be also possible to implement a lazy encryption scheme by customizing the riscvm_read and riscvm_write functions to intercept reads/writes to the payload region, but this idea was not pursued further. Threaded handlers The most interesting feature of our VM is that we only need to make minor code modifications to turn it into a so-called threaded interpreter. Threaded code is a well-known technique used both to speed up emulators and to introduce indirect branches that complicate reverse engineering. It is called threading because the execution can be visualized as a thread of handlers that directly branch to the next handler. There is no classical dispatch function, with an infinite loop and a switch case for each opcode inside. The performance improves because there are fewer false-positives in the branch predictor when executing threaded code. You can find more information about threaded interpreters in the Dispatch Techniques section of the YETI paper. The first step is to construct a handler table, where each handler is placed at the index corresponding to each opcode. To do this we use a small snippet of constexpr C++ code: typedef bool (*riscvm_handler_t)(riscvm_ptr, Instruction); static constexpr std::array&lt;riscvm_handler_t, 32&gt; riscvm_handlers = [] { // Pre-populate the table with invalid handlers std::array&lt;riscvm_handler_t, 32&gt; result = {}; for (size_t i = 0; i &lt; result.size(); i++) { result[i] = handler_rv64_invalid; } // Insert the opcode handlers at the right index #define INSERT(op) result[op] = HANDLER(op) INSERT(rv64_load); INSERT(rv64_fence); INSERT(rv64_imm64); INSERT(rv64_auipc); INSERT(rv64_imm32); INSERT(rv64_store); INSERT(rv64_op64); INSERT(rv64_lui); INSERT(rv64_op32); INSERT(rv64_branch); INSERT(rv64_jalr); INSERT(rv64_jal); INSERT(rv64_system); #undef INSERT return result; }(); With the riscvm_handlers table populated we can define the dispatch macro: #define dispatch() \ Instruction next; \ next.bits = riscvm_fetch(self); \ if (next.compressed_flags != 0b11) \ { \ panic("compressed instructions not supported!"); \ } \ __attribute__((musttail)) return riscvm_handlers[next.opcode](self, next) The musttail attribute forces the call to the next handler to be a tail call. This is only possible because all the handlers have the same function signature and it generates an indirect branch to the next handler: The final piece of the puzzle is the new implementation of the riscvm_run function, which uses an empty riscvm_execute handler to bootstrap the chain of execution: ALWAYS_INLINE static bool riscvm_execute(riscvm_ptr self, Instruction inst) { dispatch(); } NEVER_INLINE void riscvm_run(riscvm_ptr self) { Instruction inst; riscvm_execute(self, inst); } Traditional obfuscation The built-in hardening features that we can get with a few #ifdefs and a small Python script are good enough for a proof-of-concept, but they are not going to deter a determined attacker for a very long time. An attacker can pattern-match the VM’s handlers to simplify future reverse engineering efforts. To address this, we can employ common obfuscation techniques using LLVM obfuscation passes: Instruction substitution (to make pattern matching more difficult) Opaque predicates (to hinder static analysis) Inject anti-debug checks (to make dynamic analysis more difficult) The paper Modern obfuscation techniques by Roman Oravec gives a nice overview of literature and has good data on what obfuscation passes are most effective considering their runtime overhead. Additionally, it would also be possible to further enhance the VM’s security by duplicating handlers, but this would require extra post-processing on the payload itself. The VM itself is only part of what could be obfuscated. Obfuscating the payloads themselves is also something we can do quite easily. Most likely, manually-integrated security features (stack strings with xorstr, lazy_importer and variable encryption) will be most valuable here. However, because we use LLVM to build the payloads we can also employ automated obfuscation there. It is important to keep in mind that any overhead created in the payloads themselves is multiplied by the overhead created by the handler obfuscation, so experimentation is required to find the sweet spot for your use case. Writing the payloads The VM described in this post so far technically has the ability to execute arbitrary code. That being said, it would be rather annoying for an end-user to write said code. For example, we would have to manually resolve all imports and then use the riscvm_host_call function to actually execute them. These functions are executing in the RISC-V context and their implementation looks like this: uintptr_t riscvm_host_call(uintptr_t address, uintptr_t args[13]) { register uintptr_t a0 asm("a0") = address; register uintptr_t a1 asm("a1") = (uintptr_t)args; register uintptr_t a7 asm("a7") = 20000; asm volatile("scall" : "+r"(a0) : "r"(a1), "r"(a7)); return a0; } uintptr_t riscvm_get_peb() { register uintptr_t a0 asm("a0") = 0; register uintptr_t a7 asm("a7") = 20001; asm volatile("scall" : "+r"(a0) : "r"(a7) : "memory"); return a0; } We can get a pointer to the PEB using riscvm_get_peb and then resolve a module by its’ x65599 hash: // Structure definitions omitted for clarity uintptr_t riscvm_resolve_dll(uint32_t module_hash) { static PEB* peb = 0; if (!peb) { peb = (PEB*)riscvm_get_peb(); } LIST_ENTRY* begin = &amp;peb-&gt;Ldr-&gt;InLoadOrderModuleList; for (LIST_ENTRY* itr = begin-&gt;Flink; itr != begin; itr = itr-&gt;Flink) { LDR_DATA_TABLE_ENTRY* entry = CONTAINING_RECORD(itr, LDR_DATA_TABLE_ENTRY, InLoadOrderLinks); if (entry-&gt;BaseNameHashValue == module_hash) { return (uintptr_t)entry-&gt;DllBase; } } return 0; } Once we’ve obtained the base of the module we’re interested in, we can resolve the import by walking the export table: uintptr_t riscvm_resolve_import(uintptr_t image, uint32_t export_hash) { IMAGE_DOS_HEADER* dos_header = (IMAGE_DOS_HEADER*)image; IMAGE_NT_HEADERS* nt_headers = (IMAGE_NT_HEADERS*)(image + dos_header-&gt;e_lfanew); uint32_t export_dir_size = nt_headers-&gt;OptionalHeader.DataDirectory[0].Size; IMAGE_EXPORT_DIRECTORY* export_dir = (IMAGE_EXPORT_DIRECTORY*)(image + nt_headers-&gt;OptionalHeader.DataDirectory[0].VirtualAddress); uint32_t* names = (uint32_t*)(image + export_dir-&gt;AddressOfNames); uint32_t* funcs = (uint32_t*)(image + export_dir-&gt;AddressOfFunctions); uint16_t* ords = (uint16_t*)(image + export_dir-&gt;AddressOfNameOrdinals); for (uint32_t i = 0; i &lt; export_dir-&gt;NumberOfNames; ++i) { char* name = (char*)(image + names[i]); uintptr_t func = (uintptr_t)(image + funcs[ords[i]]); // Ignore forwarded exports if (func &gt;= (uintptr_t)export_dir &amp;&amp; func &lt; (uintptr_t)export_dir + export_dir_size) continue; uint32_t hash = hash_x65599(name, true); if (hash == export_hash) { return func; } } return 0; } Now we can call MessageBoxA from RISC-V with the following code: // NOTE: We cannot use Windows.h here #include &lt;stdint.h&gt; int main() { // Resolve LoadLibraryA auto kernel32_dll = riscvm_resolve_dll(hash_x65599("kernel32.dll", false)) auto LoadLibraryA = riscvm_resolve_import(kernel32_dll, hash_x65599("LoadLibraryA", true)) // Load user32.dll uint64_t args[13]; args[0] = (uint64_t)"user32.dll"; auto user32_dll = riscvm_host_call(LoadLibraryA, args); // Resolve MessageBoxA auto MessageBoxA = riscvm_resolve_import(user32_dll, hash_x65599("MessageBoxA", true)); // Show a message to the user args[0] = 0; // hwnd args[1] = (uint64_t)"Hello from RISC-V!"; // msg args[2] = (uint64_t)"riscvm"; // title args[3] = 0; // flags riscvm_host_call(MessageBoxA, args); } With some templates/macros/constexpr tricks we can probably get this down to something more readable, but fundamentally this code will always stay annoying to write. Even if calling imports were a one-liner, we would still have to deal with the fact that we cannot use Windows.h (or any of the Microsoft headers for that matter). The reason for this is that we are cross-compiling with Clang. Even if we were to set up the include paths correctly, it would still be a major pain to get everything to compile correctly. That being said, our VM works! A major advantage of RISC-V is that, since the instruction set is simple, once the fundamentals work, we can be confident that features built on top of this will execute as expected. Whole Program LLVM Usually, when discussing LLVM, the compilation process is running on Linux/macOS. In this section, we will describe a pipeline that can actually be used on Windows, without making modifications to your toolchain. This is useful if you would like to analyze/fuzz/obfuscate Windows applications, which might only compile the an MSVC-compatible compiler: clang-cl. Link-time optimization (LTO) Without LTO, the object files produced by Clang are native COFF/ELF/Mach-O files. Every file is optimized and compiled independently. The linker loads these objects and merges them together into the final executable. When enabling LTO, the object files are instead LLVM Bitcode (.bc) files. This allows the linker to merge all the LLVM IR together and perform (more comprehensive) whole-program optimizations. After the LLVM IR has been optimized, the native code is generated and the final executable produced. The diagram below comes from the great Link-time optimisation (LTO) post by Ryan Stinnet: Compiler wrappers Unfortunately, it can be quite annoying to write an executable that can replace the compiler. It is quite simple when dealing with a few object files, but with bigger projects it gets quite tricky (especially when CMake is involved). Existing projects are WLLVM and gllvm, but they do not work nicely on Windows. When using CMake, you can use the CMAKE_&lt;LANG&gt;_COMPILER_LAUNCHER variables and intercept the compilation pipeline that way, but that is also tricky to deal with. On Windows, things are more complex than on Linux. This is because Clang uses a different program to link the final executable and correctly intercepting this process can become quite challenging. Embedding bitcode To achieve our goal of post-processing the bitcode of the whole program, we need to enable bitcode embedding. The first flag we need is -flto, which enables LTO. The second flag is -lto-embed-bitcode, which isn’t documented very well. When using clang-cl, you also need a special incantation to enable it: set(EMBED_TYPE "post-merge-pre-opt") # post-merge-pre-opt/optimized if(NOT CMAKE_CXX_COMPILER_ID MATCHES "Clang") if(WIN32) message(FATAL_ERROR "clang-cl is required, use -T ClangCL --fresh") else() message(FATAL_ERROR "clang compiler is required") endif() elseif(CMAKE_CXX_COMPILER_FRONTEND_VARIANT MATCHES "^MSVC$") # clang-cl add_compile_options(-flto) add_link_options(/mllvm:-lto-embed-bitcode=${EMBED_TYPE}) elseif(WIN32) # clang (Windows) add_compile_options(-fuse-ld=lld-link -flto) add_link_options(-Wl,/mllvm:-lto-embed-bitcode=${EMBED_TYPE}) else() # clang (Linux) add_compile_options(-fuse-ld=lld -flto) add_link_options(-Wl,-lto-embed-bitcode=${EMBED_TYPE}) endif() The -lto-embed-bitcode flag creates an additional .llvmbc section in the final executable that contains the bitcode. It offers three settings: -lto-embed-bitcode=&lt;value&gt; - Embed LLVM bitcode in object files produced by LTO =none - Do not embed =optimized - Embed after all optimization passes =post-merge-pre-opt - Embed post merge, but before optimizations Once the bitcode is embedded within the output binary, it can be extracted using llvm-objcopy and disassembled with llvm-dis. This is normally done as the follows: llvm-objcopy --dump-section=.llvmbc=program.bc program llvm-dis program.bc &gt; program.ll Unfortunately, we discovered a bug/oversight in LLD on Windows. The section is extracted without errors, but llvm-dis fails to load the bitcode. The reason for this is that Windows executables have a FileAlignment attribute, leading to additional padding with zeroes. To get valid bitcode, you need to remove some of these trailing zeroes: import argparse import sys import pefile def main(): # Parse the arguments parser = argparse.ArgumentParser() parser.add_argument("executable", help="Executable with embedded .llvmbc section") parser.add_argument("--output", "-o", help="Output file name", required=True) args = parser.parse_args() executable: str = args.executable output: str = args.output # Find the .llvmbc section pe = pefile.PE(executable) llvmbc = None for section in pe.sections: if section.Name.decode("utf-8").strip("\x00") == ".llvmbc": llvmbc = section break if llvmbc is None: print("No .llvmbc section found") sys.exit(1) # Recover the bitcode and write it to a file with open(output, "wb") as f: data = bytearray(llvmbc.get_data()) # Truncate all trailing null bytes while data[-1] == 0: data.pop() # Recover alignment to 4 while len(data) % 4 != 0: data.append(0) # Add a block end marker for _ in range(4): data.append(0) f.write(data) if __name__ == "__main__": main() In our testing, this doesn’t have any issues, but there might be cases where this heuristic does not work properly. In that case, a potential solution could be to brute force the amount of trailing zeroes, until the bitcode parses without errors. Applications Now that we have access to our program’s bitcode, several applications become feasible: Write an analyzer to identify potentially interesting locations within the program. Instrument the bitcode and then re-link the executable, which is particularly useful for code coverage while fuzzing. Obfuscate the bitcode before re-linking the executable, enhancing security. IR retargeting, where the bitcode compiled for one architecture can be used on another. Relinking the executable The bitcode itself unfortunately does not contain enough information to re-link the executable (although this is something we would like to implement upstream). We could either manually attempt to reconstruct the linker command line (with tools like Process Monitor), or use LLVM plugin support. Plugin support is not really functional on Windows (although there is some indication that Sony is using it for their PS4/PS5 toolchain), but we can still load an arbitrary DLL using the -load command line flag. Once we loaded our DLL, we can hijack the executable command line and process the flags to generate a script for re-linking the program after our modifications are done. Retargeting LLVM IR Ideally, we would want to write code like this and magically get it to run in our VM: #include &lt;Windows.h&gt; int main() { MessageBoxA(0, "Hello from RISC-V!", "riscvm", 0); } Luckily this is entirely possible, it just requires writing a (fairly) simple tool to perform transformations on the Bitcode of this program (built using clang-cl). In the coming sections, we will describe how we managed to do this using Microsoft Visual Studio’s official LLVM integration (i.e. without having to use a custom fork of clang-cl). The LLVM IR of the example above looks roughly like this (it has been cleaned up slightly for readability): source_filename = "hello.c" target datalayout = "e-m:w-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128" target triple = "x86_64-pc-windows-msvc19.38.33133" @message = dso_local global [19 x i8] c"Hello from RISC-V!\00", align 16 @title = dso_local global [7 x i8] c"riscvm\00", align 1 ; Function Attrs: noinline nounwind optnone uwtable define dso_local i32 @main() #0 { %1 = call i32 @MessageBoxA(ptr noundef null, ptr noundef @message, ptr noundef @title, i32 noundef 0) ret i32 0 } declare dllimport i32 @MessageBoxA(ptr noundef, ptr noundef, ptr noundef, i32 noundef) #1 attributes #0 = { noinline nounwind optnone uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" } attributes #1 = { "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" } !llvm.linker.options = !{!0, !0} !llvm.module.flags = !{!1, !2, !3} !llvm.ident = !{!4} !0 = !{!"/DEFAULTLIB:uuid.lib"} !1 = !{i32 1, !"wchar_size", i32 2} !2 = !{i32 8, !"PIC Level", i32 2} !3 = !{i32 7, !"uwtable", i32 2} !4 = !{!"clang version 16.0.5"} To retarget this code to RISC-V, we need to do the following: Collect all the functions with a dllimport storage class. Generate a riscvm_imports function that resolves all the function addresses of the imports. Replace the dllimport functions with stubs that use riscvm_host_call to call the import. Change the target triple to riscv64-unknown-unknown and adjust the data layout. Compile the retargeted bitcode and link it together with crt0 to create the final payload. Adjusting the metadata After loading the LLVM IR Module, the first step is to change the DataLayout and the TargetTriple to be what the RISC-V backend expects: module.setDataLayout("e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"); module.setTargetTriple("riscv64-unknown-unknown"); module.setSourceFileName("transpiled.bc"); The next step is to collect all the dllimport functions for later processing. Additionally, a bunch of x86-specific function attributes are removed from every function: std::vector&lt;Function*&gt; importedFunctions; for (Function&amp; function : module.functions()) { // Remove x86-specific function attributes function.removeFnAttr("target-cpu"); function.removeFnAttr("target-features"); function.removeFnAttr("tune-cpu"); function.removeFnAttr("stack-protector-buffer-size"); // Collect imported functions if (function.hasDLLImportStorageClass() &amp;&amp; !function.getName().startswith("riscvm_")) { importedFunctions.push_back(&amp;function); } function.setDLLStorageClass(GlobalValue::DefaultStorageClass); Finally, we have to remove the llvm.linker.options metadata to make sure we can pass the IR to llc or clang without errors. Import map The LLVM IR only has the dllimport storage class to inform us that a function is imported. Unfortunately, it does not provide us with the DLL the function comes from. Because this information is only available at link-time (in files like user32.lib), we decided to implement an extra -importmap argument. The extract-bc script that extracts the .llvmbc section now also has to extract the imported functions and what DLL they come from: with open(importmap, "wb") as f: for desc in pe.DIRECTORY_ENTRY_IMPORT: dll = desc.dll.decode("utf-8") for imp in desc.imports: name = imp.name.decode("utf-8") f.write(f"{name}:{dll}\n".encode("utf-8")) Currently, imports by ordinal and API sets are not supported, but we can easily make sure those do not occur when building our code. Creating the import stubs For every dllimport function, we need to add some IR to riscvm_imports to resolve the address. Additionally, we have to create a stub that forwards the function arguments to riscvm_host_call. This is the generated LLVM IR for the MessageBoxA stub: ; Global variable to hold the resolved import address @import_MessageBoxA = private global ptr null define i32 @MessageBoxA(ptr noundef %0, ptr noundef %1, ptr noundef %2, i32 noundef %3) local_unnamed_addr #1 { entry: %args = alloca ptr, i32 13, align 8 %arg3_zext = zext i32 %3 to i64 %arg3_cast = inttoptr i64 %arg3_zext to ptr %import_address = load ptr, ptr @import_MessageBoxA, align 8 %arg0_ptr = getelementptr ptr, ptr %args, i32 0 store ptr %0, ptr %arg0_ptr, align 8 %arg1_ptr = getelementptr ptr, ptr %args, i32 1 store ptr %1, ptr %arg1_ptr, align 8 %arg2_ptr = getelementptr ptr, ptr %args, i32 2 store ptr %2, ptr %arg2_ptr, align 8 %arg3_ptr = getelementptr ptr, ptr %args, i32 3 store ptr %arg3_cast, ptr %arg3_ptr, align 8 %return = call ptr @riscvm_host_call(ptr %import_address, ptr %args) %return_cast = ptrtoint ptr %return to i64 %return_trunc = trunc i64 %return_cast to i32 ret i32 %return_trunc } The uint64_t args[13] array is allocated on the stack using the alloca instruction and every function argument is stored in there (after being zero-extended). The GlobalVariable named import_MessageBoxA is read and finally riscvm_host_call is executed to call the import on the host side. The return value is truncated as appropriate and returned from the stub. The LLVM IR for the generated riscvm_imports function looks like this: ; Global string for LoadLibraryA @str_USER32.dll = private constant [11 x i8] c"USER32.dll\00" define void @riscvm_imports() { entry: %args = alloca ptr, i32 13, align 8 %kernel32.dll_base = call ptr @riscvm_resolve_dll(i32 1399641682) %import_LoadLibraryA = call ptr @riscvm_resolve_import(ptr %kernel32.dll_base, i32 -550781972) %arg0_ptr = getelementptr ptr, ptr %args, i32 0 store ptr @str_USER32.dll, ptr %arg0_ptr, align 8 %USER32.dll_base = call ptr @riscvm_host_call(ptr %import_LoadLibraryA, ptr %args) %import_MessageBoxA = call ptr @riscvm_resolve_import(ptr %USER32.dll_base, i32 -50902915) store ptr %import_MessageBoxA, ptr @import_MessageBoxA, align 8 ret void } The resolving itself uses the riscvm_resolve_dll and riscvm_resolve_import functions we discussed in a previous section. The final detail is that user32.dll is not loaded into every process, so we need to manually call LoadLibraryA to resolve it. Instead of resolving the DLL and import hashes at runtime, they are resolved by the transpiler at compile-time, which makes things a bit more annoying to analyze for an attacker. Trade-offs While the retargeting approach works well for simple C++ code that makes use of the Windows API, it currently does not work properly when the C/C++ standard library is used. Getting this to work properly will be difficult, but things like std::vector can be made to work with some tricks. The limitations are conceptually quite similar to driver development and we believe this is a big improvement over manually recreating types and manual wrappers with riscvm_host_call. An unexplored potential area for bugs is the unverified change to the DataLayout of the LLVM module. In our tests, we did not observe any differences in structure layouts between rv64 and x64 code, but most likely there are some nasty edge cases that would need to be properly handled. If the code written is mainly cross-platform, portable C++ with heavy use of the STL, an alternative design could be to compile most of it with a regular C++ cross-compiler and use the retargeting only for small Windows-specific parts. One of the biggest advantages of retargeting a (mostly) regular Windows C++ program is that the payload can be fully developed and tested on Windows itself. Debugging is much more difficult once the code becomes RISC-V and our approach fully decouples the development of the payload from the VM itself. CRT0 The final missing piece of the crt0 component is the _start function that glues everything together: static void exit(int exit_code); static void riscvm_relocs(); void riscvm_imports() __attribute__((weak)); static void riscvm_init_arrays(); extern int __attribute((noinline)) main(); // NOTE: This function has to be first in the file void _start() { riscvm_relocs(); riscvm_imports(); riscvm_init_arrays(); exit(main()); asm volatile("ebreak"); } void riscvm_imports() { // Left empty on purpose } The riscvm_imports function is defined as a weak symbol. This means the implementation provided in crt0.c can be overwritten by linking to a stronger symbol with the same name. If we generate a riscvm_imports function in our retargeted bitcode, that implementation will be used and we can be certain we execute before main! Example payload project Now that all the necessary tooling has been described, we can put everything together in a real project! In the repository, this is all done in the payload folder. To make things easy, this is a simple cmkr project with a template to enable the retargeting scripts: # Reference: https://build-cpp.github.io/cmkr/cmake-toml [cmake] version = "3.19" cmkr-include = "cmake/cmkr.cmake" [project] name = "payload" languages = ["CXX"] cmake-before = "set(CMAKE_CONFIGURATION_TYPES Debug Release)" include-after = ["cmake/riscvm.cmake"] msvc-runtime = "static" [fetch-content.phnt] url = "https://github.com/mrexodia/phnt-single-header/releases/download/v1.2-4d1b102f/phnt.zip" [template.riscvm] type = "executable" add-function = "add_riscvm_executable" [target.payload] type = "riscvm" sources = [ "src/main.cpp", "crt/minicrt.c", "crt/minicrt.cpp", ] include-directories = [ "include", ] link-libraries = [ "riscvm-crt0", "phnt::phnt", ] compile-features = ["cxx_std_17"] msvc.link-options = [ "/INCREMENTAL:NO", "/DEBUG", ] In this case, the add_executable function has been replaced with an equivalent add_riscvm_executable that creates an additional payload.bin file that can be consumed by the riscvm interpreter. The only thing we have to make sure of is to enable clang-cl when configuring the project: cmake -B build -T ClangCL After this, you can open build\payload.sln in Visual Studio and develop there as usual. The custom cmake/riscvm.cmake script does the following: Enable LTO Add the -lto-embed-bitcode linker flag Locale clang.exe, ld.lld.exe and llvm-objcopy.exe Compile crt0.c for the riscv64 architecture Create a Python virtual environment with the necessary dependencies The add_riscvm_executable adds a custom target that processes the regular output executable and executes the retargeter and relevant Python scripts to produce the riscvm artifacts: function(add_riscvm_executable tgt) add_executable(${tgt} ${ARGN}) if(MSVC) target_compile_definitions(${tgt} PRIVATE _NO_CRT_STDIO_INLINE) target_compile_options(${tgt} PRIVATE /GS- /Zc:threadSafeInit-) endif() set(BC_BASE "$&lt;TARGET_FILE_DIR:${tgt}&gt;/$&lt;TARGET_FILE_BASE_NAME:${tgt}&gt;") add_custom_command(TARGET ${tgt} POST_BUILD USES_TERMINAL COMMENT "Extracting and transpiling bitcode..." COMMAND "${Python3_EXECUTABLE}" "${RISCVM_DIR}/extract-bc.py" "$&lt;TARGET_FILE:${tgt}&gt;" -o "${BC_BASE}.bc" --importmap "${BC_BASE}.imports" COMMAND "${TRANSPILER}" -input "${BC_BASE}.bc" -importmap "${BC_BASE}.imports" -output "${BC_BASE}.rv64.bc" COMMAND "${CLANG_EXECUTABLE}" ${RV64_FLAGS} -c "${BC_BASE}.rv64.bc" -o "${BC_BASE}.rv64.o" COMMAND "${LLD_EXECUTABLE}" -o "${BC_BASE}.elf" --oformat=elf -emit-relocs -T "${RISCVM_DIR}/lib/linker.ld" "--Map=${BC_BASE}.map" "${CRT0_OBJ}" "${BC_BASE}.rv64.o" COMMAND "${OBJCOPY_EXECUTABLE}" -O binary "${BC_BASE}.elf" "${BC_BASE}.pre.bin" COMMAND "${Python3_EXECUTABLE}" "${RISCVM_DIR}/relocs.py" "${BC_BASE}.elf" --binary "${BC_BASE}.pre.bin" --output "${BC_BASE}.bin" COMMAND "${Python3_EXECUTABLE}" "${RISCVM_DIR}/encrypt.py" --encrypt --shuffle --map "${BC_BASE}.map" --shuffle-map "${RISCVM_DIR}/shuffled_opcodes.json" --opcodes-map "${RISCVM_DIR}/opcodes.json" --output "${BC_BASE}.enc.bin" "${BC_BASE}.bin" VERBATIM ) endfunction() While all of this is quite complex, we did our best to make it as transparent to the end-user as possible. After enabling Visual Studio’s LLVM support in the installer, you can start developing VM payloads in a few minutes. You can get a precompiled transpiler binary from the releases. Debugging in riscvm When debugging the payload, it is easiest to load payload.elf in Ghidra to see the instructions. Additionally, the debug builds of the riscvm executable have a --trace flag to enable instruction tracing. The execution of main in the MessageBoxA example looks something like this (labels added manually for clarity): main: 0x000000014000d3a4: addi sp, sp, -0x10 = 0x14002cfd0 0x000000014000d3a8: sd ra, 0x8(sp) = 0x14000d018 0x000000014000d3ac: auipc a0, 0x0 = 0x14000d4e4 0x000000014000d3b0: addi a1, a0, 0xd6 = 0x14000d482 0x000000014000d3b4: auipc a0, 0x0 = 0x14000d3ac 0x000000014000d3b8: addi a2, a0, 0xc7 = 0x14000d47b 0x000000014000d3bc: addi a0, zero, 0x0 = 0x0 0x000000014000d3c0: addi a3, zero, 0x0 = 0x0 0x000000014000d3c4: jal ra, 0x14 -&gt; 0x14000d3d8 MessageBoxA: 0x000000014000d3d8: addi sp, sp, -0x70 = 0x14002cf60 0x000000014000d3dc: sd ra, 0x68(sp) = 0x14000d3c8 0x000000014000d3e0: slli a3, a3, 0x0 = 0x0 0x000000014000d3e4: srli a4, a3, 0x0 = 0x0 0x000000014000d3e8: auipc a3, 0x0 = 0x0 0x000000014000d3ec: ld a3, 0x108(a3=&gt;0x14000d4f0) = 0x7ffb3c23a000 0x000000014000d3f0: sd a0, 0x0(sp) = 0x0 0x000000014000d3f4: sd a1, 0x8(sp) = 0x14000d482 0x000000014000d3f8: sd a2, 0x10(sp) = 0x14000d47b 0x000000014000d3fc: sd a4, 0x18(sp) = 0x0 0x000000014000d400: addi a1, sp, 0x0 = 0x14002cf60 0x000000014000d404: addi a0, a3, 0x0 = 0x7ffb3c23a000 0x000000014000d408: jal ra, -0x3cc -&gt; 0x14000d03c riscvm_host_call: 0x000000014000d03c: lui a2, 0x5 = 0x14000d47b 0x000000014000d040: addiw a7, a2, -0x1e0 = 0x4e20 0x000000014000d044: ecall 0x4e20 0x000000014000d048: ret (0x14000d40c) 0x000000014000d40c: ld ra, 0x68(sp=&gt;0x14002cfc8) = 0x14000d3c8 0x000000014000d410: addi sp, sp, 0x70 = 0x14002cfd0 0x000000014000d414: ret (0x14000d3c8) 0x000000014000d3c8: addi a0, zero, 0x0 = 0x0 0x000000014000d3cc: ld ra, 0x8(sp=&gt;0x14002cfd8) = 0x14000d018 0x000000014000d3d0: addi sp, sp, 0x10 = 0x14002cfe0 0x000000014000d3d4: ret (0x14000d018) 0x000000014000d018: jal ra, 0x14 -&gt; 0x14000d02c exit: 0x000000014000d02c: lui a1, 0x2 = 0x14002cf60 0x000000014000d030: addiw a7, a1, 0x710 = 0x2710 0x000000014000d034: ecall 0x2710 The tracing also uses the enums for the opcodes, so it works with shuffled and encrypted payloads as well. Outro Hopefully this article has been an interesting read for you. We tried to walk you through the process in the same order we developed it in, but you can always refer to the riscy-business GitHub repository and try things out for yourself if you got confused along the way. If you have any ideas for improvements, or would like to discuss, you are always welcome in our Discord server! We would like to thank the following people for proofreading and discussing the design and implementation with us (alphabetical order): Brit herrcore JustMagic Renegade veritas Additionally, we highly appreciate the open source projects that we built this project on! If you use this project, consider giving back your improvements to the community as well. Merry Christmas!]]></summary>
        <author>
            <name>secret club</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Catching OpenSSL misuse using CodeQL]]></title>
        <id>https://blog.trailofbits.com/?p=105569</id>
        <link href="https://blog.trailofbits.com/2023/12/22/catching-openssl-misuse-using-codeql/"/>
        <updated>2023-12-22T14:00:35.000Z</updated>
        <summary type="html"><![CDATA[By Damien Santiago I’ve created five CodeQL queries that catch potentially potent bugs in the OpenSSL libcrypto API, a widely adopted but often unforgiving API that can be misused to cause memory leaks, authentication bypasses, and other subtle cryptographic issues in implementations. These queries—which I developed during my internship with my mentors, Fredrik Dahlgren and […]]]></summary>
        <author>
            <name>Trail of Bits</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Install Windows Subsystem for Linux (WSL) on different Windows editions and Server Core]]></title>
        <id>https://4sysops.com/?p=1578589</id>
        <link href="https://4sysops.com/archives/install-windows-subsystem-for-windows-wsl-on-different-windows-editions-and-server-core/"/>
        <updated>2023-12-22T09:07:55.000Z</updated>
        <summary type="html"><![CDATA[For some time now, Microsoft has been offering a simplified installation of WSL via the wsl.exe utility. Hence, most guides refer to this method. However, in practice, it is not quite as straightforward because this command does not work on Server Core and is only suitable for WSL 2.
Install Windows Subsystem for Linux (WSL) on different Windows editions and Server Core first appeared on 4sysops.]]></summary>
        <author>
            <name>Wolfgang Sommergut</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Socks! Our cyber prediction for 2024]]></title>
        <id>https://www.pentestpartners.com/?p=28455</id>
        <link href="https://www.pentestpartners.com/security-blog/socks-our-cyber-prediction-for-2024/"/>
        <updated>2023-12-22T04:05:57.000Z</updated>
        <summary type="html"><![CDATA[I get pretty bored of reading pointless prediction puff pieces from vendors about what is going to happen next year in cyber. Don’t tell me, it’ll be security issues that […]
Socks! Our cyber prediction for 2024 first appeared on Pen Test Partners.]]></summary>
        <author>
            <name>Ken Munro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Install Cronicle task scheduler with Nginx proxy]]></title>
        <id>https://4sysops.com/?p=1578698</id>
        <link href="https://4sysops.com/archives/install-cronicle-task-scheduler-with-nginx-proxy/"/>
        <updated>2023-12-21T11:26:59.000Z</updated>
        <summary type="html"><![CDATA[Cronicle is a web-based, multi-server task scheduling and automation platform designed to handle complex job scheduling and workflow management across multiple servers. It offers a user-friendly interface for creating, managing, and monitoring tasks, supporting a wide range of job types, including shell scripts, commands, and custom plugins. With features like real-time logging, error notification, and resource allocation, Cronicle is tailored for both small-scale tasks and large, distributed systems, providing robust and scalable solutions for automated job execution. In this article, I will guide you through the process of installing Cronicle and configuring Nginx as a proxy to provide a seamless and secure web interface.
Install Cronicle task scheduler with Nginx proxy first appeared on 4sysops.]]></summary>
        <author>
            <name>Evi Vanoost</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Summer interns 2023 recap]]></title>
        <id>https://blog.trailofbits.com/?p=105537</id>
        <link href="https://blog.trailofbits.com/2023/12/20/summer-associates-2023-recap/"/>
        <updated>2023-12-20T14:00:13.000Z</updated>
        <summary type="html"><![CDATA[This past summer at Trail of Bits was a season of inspiration, innovation, and growth thanks to the incredible contributions of our talented interns, who took on a diverse range of technical projects under the mentorship of Trail of Bits engineers. We’d like to delve into their accomplishments, from enhancing the efficiency of fuzzing tools […]]]></summary>
        <author>
            <name>Trail of Bits</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SEGA and SIX Group: The Value of VDP and Bug Bounty]]></title>
        <id>https://hackerone.com/customer-stories/sega-six-group</id>
        <link href="https://www.hackerone.com/customer-stories/sega-six-group"/>
        <updated>2023-12-20T13:12:40.000Z</updated>
        <summary type="html"><![CDATA[SEGA Europe and SIX Group discuss the power of bug bounty and vulnerability disclosure programs (VDPs) with HackerOne.]]></summary>
        <author>
            <name>HackerOne</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OpenAI Begins Tackling ChatGPT Data Leak Vulnerability]]></title>
        <id>https://embracethered.com/blog/posts/2023/openai-data-exfiltration-first-mitigations-implemented/</id>
        <link href="https://embracethered.com/blog/posts/2023/openai-data-exfiltration-first-mitigations-implemented/"/>
        <updated>2023-12-20T10:35:07.000Z</updated>
        <summary type="html"><![CDATA[OpenAI seems to have implemented some mitigation steps for a well-known data exfiltration vulnerability in ChatGPT. Attackers can use image markdown rendering during prompt injection attacks to send data to third party servers without the users' consent.
The fix is not perfect, but a step into the right direction. In this post I share what I figured out so far about the fix after looking at it briefly this morning.]]></summary>
        <author>
            <name>Embrace The Red</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Dynamic and static Ansible inventory examples]]></title>
        <id>https://4sysops.com/?p=1578628</id>
        <link href="https://4sysops.com/archives/dynamic-and-static-ansible-inventory-examples/"/>
        <updated>2023-12-20T09:40:39.000Z</updated>
        <summary type="html"><![CDATA[The Ansible inventory is an essential element that defines the hosts and groups of hosts where Ansible operations are executed. There are two types of inventories: static and dynamic. In this post, I will provide examples to explain how you can work with both types of inventories.
Dynamic and static Ansible inventory examples first appeared on 4sysops.]]></summary>
        <author>
            <name>Hitesh Jethva</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unlocking Trust in AI: The Ethical Hacker's Approach to AI Red Teaming]]></title>
        <id>https://hackerone.com/ai/ethical-hackers-ai-red-teaming</id>
        <link href="https://www.hackerone.com/ai/ethical-hackers-ai-red-teaming"/>
        <updated>2023-12-19T17:15:41.000Z</updated>
        <summary type="html"><![CDATA[HackerOne offers robust AI Red Teaming services that help organizations bolster the security, fairness, and reliability of their AI deployments.]]></summary>
        <author>
            <name>Ilona Cohen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Retro Gaming Vulnerability Research: Warcraft 2]]></title>
        <id>https://ncc-blog.pixelpreview.net/?p=25991</id>
        <link href="https://research.nccgroup.com/2023/12/19/retro-gaming-vulnerability-research-warcraft-2/"/>
        <updated>2023-12-19T11:00:00.000Z</updated>
        <summary type="html"><![CDATA[This blog post is part one in a short series on learning some basic game hacking techniques. I’ve chosen Warcraft 2 for a variety of reasons: With those things in mind, most older RTS games work in a similar manner, and you should be able to apply these techniques to other games, though maybe not […]]]></summary>
        <author>
            <name>Caleb Watt</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Free Training: Microsoft Office Offensive Tradecraft for Red Teamers]]></title>
        <id>https://www.outflank.nl/?p=3630</id>
        <link href="https://www.outflank.nl/blog/2023/12/19/free-training-microsoft-office-offensive-tradecraft-for-red-teamers/"/>
        <updated>2023-12-19T10:00:51.000Z</updated>
        <summary type="html"><![CDATA[We are hosting a free training on Microsoft Office Offensive Tradecraft aimed at red teamers. Head over here for more details and for registration.  

Read full post
The post Free Training: Microsoft Office Offensive Tradecraft for Red Teamers appeared first on Outflank.]]></summary>
        <author>
            <name>Marc Smeets</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Windows Server 2025 Hyper-V: GPU partitioning, deduplication for VHDs, AD-less live migration]]></title>
        <id>https://4sysops.com/?p=1578711</id>
        <link href="https://4sysops.com/archives/windows-server-2025-hyper-v-gpu-partitioning-deduplication-for-vhds-ad-less-live-migration/"/>
        <updated>2023-12-19T08:46:39.000Z</updated>
        <summary type="html"><![CDATA[The upcoming LTSC release of Windows Server introduces several enhancements to Hyper-V and new storage functions, which primarily benefit the operation of virtual machines. This includes GPU virtualization, a new deduplication feature for ReFS, and live migration of VMs on clusters that are not members of an AD domain.
Windows Server 2025 Hyper-V: GPU partitioning, deduplication for VHDs, AD-less live migration first appeared on 4sysops.]]></summary>
        <author>
            <name>Wolfgang Sommergut</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Copyright banners – re-visited]]></title>
        <id>https://www.hexacorn.com/blog/?p=8953</id>
        <link href="https://www.hexacorn.com/blog/2023/12/19/copyright-banners-re-visited/"/>
        <updated>2023-12-19T00:52:09.000Z</updated>
        <summary type="html"><![CDATA[Over a decade ago I posted some random copyright banner stats from my (relatively small by today’s standards) malware repo. I really liked these stats back then and I still like them today. Why? These banners are great ‘low hanging … Continue reading →]]></summary>
        <author>
            <name>adam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[GWT: Unpatched, Unauthenticated Java Deserialization]]></title>
        <id>https://bishopfox.com/blog/gwt-unpatched-unauthenticated-java-deserialization-vulnerability</id>
        <link href="https://bishopfox.com/blog/gwt-unpatched-unauthenticated-java-deserialization-vulnerability"/>
        <updated>2023-12-18T17:00:00.000Z</updated>
        <summary type="html"><![CDATA[In this blog, learn about an eight year old unpatched and unauthenticated Java deserialization vulnerability in GWT.]]></summary>
        <author>
            <name>Ben Lincoln</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A trail of flipping bits]]></title>
        <id>https://blog.trailofbits.com/?p=105490</id>
        <link href="https://blog.trailofbits.com/2023/12/18/a-trail-of-flipping-bits/"/>
        <updated>2023-12-18T13:30:16.000Z</updated>
        <summary type="html"><![CDATA[By Joop van de Pol Trusted execution environments (TEE) such as secure enclaves are becoming more popular to secure assets in the cloud. Their promise is enticing because when enclaves are properly used, even the operator of the enclave or the cloud service should not be able to access those assets. However, this leads to […]]]></summary>
        <author>
            <name>Trail of Bits</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Notepad++: Search and replace with regex und plugins]]></title>
        <id>https://4sysops.com/?p=1578600</id>
        <link href="https://4sysops.com/archives/notepad-search-and-replace-with-regex-und-plugins/"/>
        <updated>2023-12-18T11:56:01.000Z</updated>
        <summary type="html"><![CDATA[The free and widely-used editor for Windows supports not only basic search and replace functions but also regular expressions. A helpful plugin assists in formulating regex, providing real-time expression validation. However, for many tasks you don't need regex; built-in functions and plugins often offer simpler solutions.
Notepad++: Search and replace with regex und plugins first appeared on 4sysops.]]></summary>
        <author>
            <name>Wolfgang Sommergut</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Top 3 Cybersecurity Predictions for 2024 in EMEA]]></title>
        <id>https://www.sans.org/blog/top-3-cybersecurity-predictions-for-2024-in-emea</id>
        <link href="https://www.sans.org/blog/top-3-cybersecurity-predictions-for-2024-in-emea?msc=rss"/>
        <updated>2023-12-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Get MFA, network segmentation, immutable backups, patch management on external attack surface, the principle of least privileges done NOW.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Top 3 Predictions for ICS & OT Security in 2024 in EMEA]]></title>
        <id>https://www.sans.org/blog/top-3-predictions-for-ics-ot-security-in-2024-in-emea</id>
        <link href="https://www.sans.org/blog/top-3-predictions-for-ics-ot-security-in-2024-in-emea?msc=rss"/>
        <updated>2023-12-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is what we have to start to prepare for in ICS/OT Security while there is still time.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Diego Mendoza: Completing the SANS Operational Cybersecurity Executive Triad]]></title>
        <id>https://www.sans.org/blog/diego-mendoza-completing-the-sans-operational-cybersecurity-executive-triad</id>
        <link href="https://www.sans.org/blog/diego-mendoza-completing-the-sans-operational-cybersecurity-executive-triad?msc=rss"/>
        <updated>2023-12-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Diego shares his experience with this special achievement in cybersecurity leadership.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Top 15 SANS Summit Talks of 2023]]></title>
        <id>https://www.sans.org/blog/top-sans-summits-talks-2023</id>
        <link href="https://www.sans.org/blog/top-sans-summits-talks-2023?msc=rss"/>
        <updated>2023-12-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This year, SANS hosted 16 Summits with 209 talks. Here were the top-rated talks of the year.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Install Minikube on Windows]]></title>
        <id>https://4sysops.com/?p=1578609</id>
        <link href="https://4sysops.com/archives/install-minikube-on-windows/"/>
        <updated>2023-12-15T12:37:54.000Z</updated>
        <summary type="html"><![CDATA[Minikube is an ideal solution for setting up a Kubernetes cluster for a test or development environment. It only requires a single node, optionally as a virtual machine. To install Minikube on Windows, several preparations are required, including the installation of Docker.
Install Minikube on Windows first appeared on 4sysops.]]></summary>
        <author>
            <name>Thomas Joos</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Instructor Spotlight: Ryan Nicholson, Cloud Security Author]]></title>
        <id>https://www.sans.org/blog/instructor-spotlight-ryan-nicholson-sec488-author</id>
        <link href="https://www.sans.org/blog/instructor-spotlight-ryan-nicholson-sec488-author?msc=rss"/>
        <updated>2023-12-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Ryan Nicholson is a Certified Instructor for SANS Institute and the author of the new SEC488: Cloud Security Essentials course from SANS.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The 2023 Ambassador World Cup Final: Results, Impact, and Looking Ahead]]></title>
        <id>https://hackerone.com/lhe/awc-finals-2023</id>
        <link href="https://www.hackerone.com/lhe/awc-finals-2023"/>
        <updated>2023-12-14T19:12:05.000Z</updated>
        <summary type="html"><![CDATA[The final round of the 2023 Ambassador World Cup was an immense success.]]></summary>
        <author>
            <name>Ariel Garcia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sleepy — Python Tooling for Sleep]]></title>
        <id>https://medium.com/p/7a96d9d650ee</id>
        <link href="https://posts.specterops.io/sleepy-python-tooling-for-sleep-7a96d9d650ee?source=rss----f05f8696e3cc---4"/>
        <updated>2023-12-14T16:05:56.000Z</updated>
        <summary type="html"><![CDATA[Thank you to SpecterOps for supporting this research and to Sarah, Cody, and Daniel for proofreading and editing! Crossposted on the…]]></summary>
        <author>
            <name>Evan McBroom</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mapping Virtual to Physical Adresses Using Superfetch]]></title>
        <id>https://outflank.nl/?p=3225</id>
        <link href="https://www.outflank.nl/blog/2023/12/14/mapping-virtual-to-physical-adresses-using-superfetch/"/>
        <updated>2023-12-14T15:12:46.000Z</updated>
        <summary type="html"><![CDATA[With the Bring Your Own Vulnerable Driver (BYOVD) technique popping up in Red Teaming arsenals, we have seen additional capabilities being added like the ability to kill (EDR) processes or read protected memory (LSASS), all being performed by leveraging drivers operating in kernel land.
Sooner or later during BYOVD tooling development, you will run into the issue of needing to resolve virtual to physical memory addresses. Some drivers may expose routines that allow control over physical address ranges. While this is a powerful capability, how do we make the mapping between virtual and physical addresses? Mistakes can be costly and result in BSODs. That’s what we’re exploring in this blog post. We will document a technique that relies on a Windows feature referred to as “Superfetch”.

Within our Outflank Security Tooling (OST) toolkit,

Read full post
The post Mapping Virtual to Physical Adresses Using Superfetch appeared first on Outflank.]]></summary>
        <author>
            <name>Cedric Van Bockhaven</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Public Report – Security Review of RSA Blind Signatures with Public Metadata]]></title>
        <id>https://research.nccgroup.com/?p=33789</id>
        <link href="https://research.nccgroup.com/2023/12/14/public-report-security-review-of-rsa-blind-signatures-with-public-metadata/"/>
        <updated>2023-12-14T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[During the Autumn of 2023, Google engaged NCC Group to conduct a security assessment of the white paper entitled “RSA Blind Signatures with Public Metadata”, along with the corresponding IETF draft for “Partially Blind RSA Signatures”. The work is inspired by the growing importance of anonymous tokens for the privacy of real-world applications. In particular, […]]]></summary>
        <author>
            <name>Thomas Pornin</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[DARPA’s AI Cyber Challenge: We’re In!]]></title>
        <id>https://blog.trailofbits.com/?p=105545</id>
        <link href="https://blog.trailofbits.com/2023/12/14/darpas-ai-cyber-challenge-were-in/"/>
        <updated>2023-12-14T14:00:45.000Z</updated>
        <summary type="html"><![CDATA[We’re thrilled to announce that Trail of Bits will be competing in DARPA’s upcoming AI Cyber Challenge (AIxCC)! DARPA is challenging competitors to develop novel, fully automated AI-driven systems capable of securing the critical software that underpins the modern world. We’ve formed a team of world class software security and AI/ML experts, bringing together researchers, […]]]></summary>
        <author>
            <name>Trail of Bits</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Gaza Cybergang | Unified Front Targeting Hamas Opposition]]></title>
        <id>https://www.sentinelone.com/?post_type=labs&amp;p=87124</id>
        <link href="https://www.sentinelone.com/labs/gaza-cybergang-unified-front-targeting-hamas-opposition/"/>
        <updated>2023-12-14T13:55:05.000Z</updated>
        <summary type="html"><![CDATA[Cluster of threat groups continues on trajectory to consolidate with shared victims, TTPs and evolving malware.]]></summary>
        <author>
            <name>Aleksandar Milenkoski</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The future of Bambdas]]></title>
        <id>the-future-of-bambdas</id>
        <link href="https://portswigger.net/blog/the-future-of-bambdas"/>
        <updated>2023-12-14T10:13:23.000Z</updated>
        <summary type="html"><![CDATA[Bambdas, a unique new way to customize Burp Suite on the fly with small snippets of code, were first introduced in the form of a custom filter for the Proxy HTTP history. This is just the first of man]]></summary>
        <author>
            <name>PortSwigger Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Create a free lab for Microsoft 365 and Intune]]></title>
        <id>https://4sysops.com/?p=1578576</id>
        <link href="https://4sysops.com/archives/create-a-free-lab-for-microsoft-365-and-intune/"/>
        <updated>2023-12-14T08:59:24.000Z</updated>
        <summary type="html"><![CDATA[If you're looking to delve into Microsoft 365 management, there are a few options available. Some components offer free, time-limited trial versions, and in the case of Azure AD, there's a stripped-down free edition. Alternatively, Microsoft provides a developer license with a fully-featured subscription to M365 E5.
Create a free lab for Microsoft 365 and Intune first appeared on 4sysops.]]></summary>
        <author>
            <name>Wolfgang Sommergut</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Reverse, Reveal, Recover: Windows Defender Quarantine Forensics]]></title>
        <id>https://research.nccgroup.com/?p=33535</id>
        <link href="https://research.nccgroup.com/2023/12/14/reverse-reveal-recover-windows-defender-quarantine-forensics/"/>
        <updated>2023-12-14T05:13:00.000Z</updated>
        <summary type="html"><![CDATA[Max Groot and Erik Schamper TL;DR Introduction During incident response engagements we often encounter antivirus applications that have rightfully triggered on malicious software that was deployed by threat actors. Most commonly we encounter this for Windows Defender, the antivirus solution that is shipped by default with Microsoft Windows. Windows Defender places malicious files in quarantine […]]]></summary>
        <author>
            <name>Erik Schamper</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Custom Install Path & portability issues]]></title>
        <id>https://www.hexacorn.com/blog/?p=8945</id>
        <link href="https://www.hexacorn.com/blog/2023/12/14/custom-install-path-portability-issues/"/>
        <updated>2023-12-14T00:08:10.000Z</updated>
        <summary type="html"><![CDATA[If you’ve been reading my blog for a while now you will know that I love to challenge my threat hunting game with a lot of err…. banalities. And not the banalities I can ignore, but a lot of these … Continue reading →]]></summary>
        <author>
            <name>adam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to Use Your Bug Bounty Budget Efficiently]]></title>
        <id>https://hackerone.com/vulnerability-management/bug-bounty-budget-efficiency</id>
        <link href="https://www.hackerone.com/vulnerability-management/bug-bounty-budget-efficiency"/>
        <updated>2023-12-13T17:51:56.000Z</updated>
        <summary type="html"><![CDATA[Organizations of all sizes and budgets experience some of the same challenges when managing their bug bounty budgets.]]></summary>
        <author>
            <name>Crystal Hazen</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Public Report – Aleo snarkVM Implementation Review]]></title>
        <id>https://research.nccgroup.com/?p=33754</id>
        <link href="https://research.nccgroup.com/2023/12/13/public-report-aleo-snarkvm-implementation-review/"/>
        <updated>2023-12-13T14:45:07.000Z</updated>
        <summary type="html"><![CDATA[During late summer 2023, Aleo Systems Inc. engaged NCC Group’s Cryptography Services team to conduct an implementation review of several components of snarkVM, a virtual machine for zero-knowledge proofs. The snarkVM platform allows users to write and execute smart contracts in an efficient, yet privacy-preserving manner by leveraging zero-knowledge succinct non-interactive arguments of knowledge (zk-SNARKs). […]]]></summary>
        <author>
            <name>Paul Bottinelli</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Understanding Kubernetes ReplicaSets by example]]></title>
        <id>https://4sysops.com/?p=1578519</id>
        <link href="https://4sysops.com/archives/understanding-kubernetes-replicasets-by-example/"/>
        <updated>2023-12-13T13:59:26.000Z</updated>
        <summary type="html"><![CDATA[ReplicaSet is a type of Kubernetes controller that is responsible for maintaining a specified number of Pods running at any given time. A controller in Kubernetes is a software loop that watches the shared state of the cluster through the API server and makes changes attempting to move the current state towards the desired state.
Understanding Kubernetes ReplicaSets by example first appeared on 4sysops.]]></summary>
        <author>
            <name>Amr Essam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Technical Advisory – Multiple Vulnerabilities in Nagios XI]]></title>
        <id>https://research.nccgroup.com/?p=33224</id>
        <link href="https://research.nccgroup.com/2023/12/13/technical-advisory-multiple-vulnerabilities-in-nagios-xi/"/>
        <updated>2023-12-13T13:52:11.000Z</updated>
        <summary type="html"><![CDATA[Introduction This is the second Technical Advisory post in a series wherein I audit the security of popular Remote Monitoring and Management (RMM) tools. (First: Multiple Vulnerabilities in Faronics Insight). I was joined in this security research by Colin Brum, Principal Security Consultant at NCC Group. In this post I describe the 16 vulnerabilities which […]]]></summary>
        <author>
            <name>Oliver Brooks</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scaling your threat hunting operations with CrowdStrike and PSFalcon]]></title>
        <id>https://blog.nviso.eu/?p=16798</id>
        <link href="https://blog.nviso.eu/2023/12/13/scaling-your-threat-hunting-operations-with-crowdstrike-and-psfalcon/"/>
        <updated>2023-12-13T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction Most modern day EDRs have some sort of feature which allows blue teamers to remotely connect to hosts with an EDR agent/sensor installed, to aid in their investigation of incidents. In CrowdStrike, this is called Real Time Response, and it provides a wide range of capabilities, from executing built-in commands like ipconfig and netstat … Continue reading Scaling your threat hunting operations with CrowdStrike and PSFalcon →]]></summary>
        <author>
            <name>Dimitris Binichakis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Malicious ChatGPT Agents: How GPTs Can Quietly Grab Your Data (Demo)]]></title>
        <id>https://embracethered.com/blog/posts/2023/openai-custom-malware-gpt/</id>
        <link href="https://embracethered.com/blog/posts/2023/openai-custom-malware-gpt/"/>
        <updated>2023-12-13T02:00:49.000Z</updated>
        <summary type="html"><![CDATA[When OpenAI released GPTs last month I had plans for an interesting GPT.
Malicious ChatGPT Agents The idea was to create a kind of malware GPT that forwards users' chat messages to a third party server. It also asks users for personal information like emails and passwords.
Why would this be possible end to end? ChatGPT cannot guarantee to keep your conversation private or confidential, because it loads images from any website.]]></summary>
        <author>
            <name>Embrace The Red</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Understanding the Impact of the new Apache Struts File Upload Vulnerability]]></title>
        <id>https://www.praetorian.com/?p=5479</id>
        <link href="https://www.praetorian.com/blog/cve-2023-50164-apache-struts-file-upload-vulnerability/"/>
        <updated>2023-12-12T21:08:33.000Z</updated>
        <summary type="html"><![CDATA[Introduction Recently researcher Steven Seeley discovered a way to abuse the popular Apache Struts frameworks’ file upload functionality to achieve remote code execution. This bug, known as CVE-2023-50164, has been assigned a 9.8 CVSS score. No doubt this is causing some security practitioners to have flashbacks of the “good times” that a serious Struts bug […]
The post Understanding the Impact of the new Apache Struts File Upload Vulnerability appeared first on Praetorian.]]></summary>
        <author>
            <name>Nathan Sportsman</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The December 2023 Security Update Review]]></title>
        <id>5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:65787527fd07e018bb3f0c6f</id>
        <link href="https://www.thezdi.com/blog/2023/12/12/the-december-2023-security-update-review"/>
        <updated>2023-12-12T18:27:41.000Z</updated>
        <summary type="html"><![CDATA[It’s the final patch Tuesday of 2023, and Apple, Adobe, and Microsoft have released their latest security offerings. Take a break from your holiday hustle and join us as we review the details of their latest advisories. If you’d rather watch the video recap, you can check it out here:
Apple Patches for December 2023
Apple kicked off the December release cycle with patches for iOS and iPadOS with eight CVEs. Two of these CVEs in Webkit are reported as being under active attack on iOS versions 16.7.1 and older. If you’re using an older iPhone or iPad, you should definitely update your device immediately. If you’re using a device running iOS 17 and later, you should still update when possible. 
Adobe Patches for December 2023
For December, Adobe released nine patches covering a whopping 212 C…]]></summary>
        <author>
            <name>Dustin Childs</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Career Growth: Insights from Tiffany Jones, VP of Go to Market Operations and Strategy]]></title>
        <id>https://hackerone.com/culture-and-talent/career-growth-insights-tiffany-jones-vp-go-market-operations-and-strategy</id>
        <link href="https://www.hackerone.com/culture-and-talent/career-growth-insights-tiffany-jones-vp-go-market-operations-and-strategy"/>
        <updated>2023-12-12T17:46:12.000Z</updated>
        <author>
            <name>Debbie Cotton</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Interpret the 2023 GigaOm PTaaS Radar Report with HackerOne]]></title>
        <id>https://hackerone.com/penetration-testing/hackerone-named-leader-penetration-testing-service-ptaas-gigaom-radar-report</id>
        <link href="https://www.hackerone.com/penetration-testing/hackerone-named-leader-penetration-testing-service-ptaas-gigaom-radar-report"/>
        <updated>2023-12-12T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[HackerOne has been named a "Leader" and a "Fast Mover" in the 2023 GigaOm PTaaS Radar Report.]]></summary>
        <author>
            <name>Naz Bozdemir</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Silverpeas App: Multiple CVEs leading to File Read on Server]]></title>
        <id>https://rhinosecuritylabs.com/?p=24946</id>
        <link href="https://rhinosecuritylabs.com/research/silverpeas-file-read-cves/"/>
        <updated>2023-12-12T15:20:00.000Z</updated>
        <summary type="html"><![CDATA[The post Silverpeas App: Multiple CVEs leading to File Read on Server appeared first on Rhino Security Labs.]]></summary>
        <author>
            <name>Tyler Ramsbey</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Finding that one weird endpoint, with Bambdas]]></title>
        <id>finding-that-one-weird-endpoint-with-bambdas</id>
        <link href="https://portswigger.net/research/finding-that-one-weird-endpoint-with-bambdas"/>
        <updated>2023-12-12T14:11:17.000Z</updated>
        <summary type="html"><![CDATA[Security research involves a lot of failure. It's a perpetual balancing act between taking small steps with a predictable but boring outcome, and trying out wild concepts that are so crazy they might]]></summary>
        <author>
            <name>PortSwigger Research</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introducing Swagger Jacker: Auditing OpenAPI Definition Files]]></title>
        <id>https://bishopfox.com/blog/swagger-jacker-auditing-openapi-definition-files</id>
        <link href="https://bishopfox.com/blog/swagger-jacker-auditing-openapi-definition-files"/>
        <updated>2023-12-12T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[Download Swagger Jacker, an open-source tool made for penetration testers that enables better auditing of OpenAPI definition files.]]></summary>
        <author>
            <name>Tony West</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[EventSentry 5.1: New network security monitoring and compliance features]]></title>
        <id>https://4sysops.com/?p=1578551</id>
        <link href="https://4sysops.com/archives/eventsentry-51-new-network-security-monitoring-and-compliance-features/"/>
        <updated>2023-12-12T09:42:25.000Z</updated>
        <summary type="html"><![CDATA[Explore the new features in EventSentry 5.1, including anomaly detection, NTFS permissions inventory, and new compliance dashboards.
EventSentry 5.1: New network security monitoring and compliance features first appeared on 4sysops.]]></summary>
        <author>
            <name>Brandon Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Intercepting MFA. Phishing and Adversary in The Middle attacks]]></title>
        <id>https://www.pentestpartners.com/?p=28349</id>
        <link href="https://www.pentestpartners.com/security-blog/intercepting-mfa-phishing-and-attackers-in-the-middle/"/>
        <updated>2023-12-12T06:01:44.000Z</updated>
        <summary type="html"><![CDATA[3 of my last 5 business email compromise investigations have involved an Adversary in The Middle (AiTM) attack. Even the more security-aware people with bolstered Microsoft 365 (M365) configurations are […]
Intercepting MFA. Phishing and Adversary in The Middle attacks first appeared on Pen Test Partners.]]></summary>
        <author>
            <name>Adam Harwood</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Helping CTI Analysts Approach and Report on Emerging Technology Threats and Trends]]></title>
        <id>https://www.sans.org/blog/helping-cti-analysts-approach-and-report-on-emerging-technology-threats-and-trends</id>
        <link href="https://www.sans.org/blog/helping-cti-analysts-approach-and-report-on-emerging-technology-threats-and-trends?msc=rss"/>
        <updated>2023-12-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[While there is no magic bullet solution on how to answer a question about emerging technologies and threat trends, this first blog post hopefully provided some insights and perhaps starting points on the various dimensions to consider when starting your research.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Cloud Attacks: What’s Old is New – Part 1]]></title>
        <id>https://www.sans.org/blog/cloud-attacks-what-s-old-is-new-part-1</id>
        <link href="https://www.sans.org/blog/cloud-attacks-what-s-old-is-new-part-1?msc=rss"/>
        <updated>2023-12-12T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A blog about similar cloud and on-prem attacks.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Safari, Hold Still for NaN Minutes!]]></title>
        <id>https://blog.exodusintel.com/?p=2193</id>
        <link href="https://blog.exodusintel.com/2023/12/11/safari-hold-still-for-nan-minutes/"/>
        <updated>2023-12-11T21:37:58.000Z</updated>
        <summary type="html"><![CDATA[By Vignesh Rao and Javier Jimenez Introduction In October 2023 Vignesh and Javier presented the discovery of a few bugs affecting JavaScriptCore, the JavaScript engine of Safari. The presentation revolved around the idea that browser research is a dynamic area; we presented a story of finding and exploiting three vulnerabilities that led to gaining code execution within Safari’s renderer. This ... Read more Safari, Hold Still for NaN Minutes!
The post Safari, Hold Still for NaN Minutes! appeared first on Exodus Intelligence.]]></summary>
        <author>
            <name>Exodus Intel VRT</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[NCC Group’s 2022 & 2023 Research Report]]></title>
        <id>https://research.nccgroup.com/?p=33749</id>
        <link href="https://research.nccgroup.com/2023/12/11/ncc-groups-2022-2023-research-report/"/>
        <updated>2023-12-11T20:50:03.000Z</updated>
        <summary type="html"><![CDATA[Over the past two years, our global cybersecurity research has been characterized by unparalleled depth, diversity, and dedication to safeguarding the digital realm. The highlights of our work not only signify our commitment to pushing the boundaries of cybersecurity research but also underscore the tangible impacts and positive change we bring to the technological landscape. […]]]></summary>
        <author>
            <name>Matt Lewis</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[How Do You Know Ethical Hackers Can Be Trusted?]]></title>
        <id>https://hackerone.com/vulnerability-management/clear-and-gateway</id>
        <link href="https://www.hackerone.com/vulnerability-management/clear-and-gateway"/>
        <updated>2023-12-11T17:34:59.000Z</updated>
        <summary type="html"><![CDATA[HackerOne has rolled out new updates that make our human-powered security program the most trusted in the industry.]]></summary>
        <author>
            <name>Michiel Prins</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Sandman APT | China-Based Adversaries Embrace Lua]]></title>
        <id>https://www.sentinelone.com/?post_type=labs&amp;p=87029</id>
        <link href="https://www.sentinelone.com/labs/sandman-apt-china-based-adversaries-embrace-lua/"/>
        <updated>2023-12-11T13:55:30.000Z</updated>
        <summary type="html"><![CDATA[SentinelLabs, Microsoft, and PwC threat intelligence researchers provide attribution-relevant information on the Sandman APT cluster.]]></summary>
        <author>
            <name>Aleksandar Milenkoski</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Say hello to the next chapter of the Testing Handbook!]]></title>
        <id>https://blog.trailofbits.com/?p=105486</id>
        <link href="https://blog.trailofbits.com/2023/12/11/say-hello-to-the-next-chapter-of-the-testing-handbook/"/>
        <updated>2023-12-11T13:30:16.000Z</updated>
        <summary type="html"><![CDATA[By Fredrik Dahlgren Today we are announcing the latest addition to the Trail of Bits Testing Handbook: a brand new chapter on CodeQL! CodeQL is a powerful and versatile static analysis tool, and at Trail of Bits, we regularly use CodeQL on client engagements to find common vulnerabilities and to perform variant analysis for already […]]]></summary>
        <author>
            <name>Trail of Bits</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[WSL: Start Linux apps in Windows and Windows apps in Linux, access ext4 and NTFS]]></title>
        <id>https://4sysops.com/?p=1578397</id>
        <link href="https://4sysops.com/archives/wsl-start-linux-apps-in-windows-and-windows-apps-in-linux-access-ext4-and-ntfs/"/>
        <updated>2023-12-11T11:20:36.000Z</updated>
        <summary type="html"><![CDATA[The Windows Subsystem for Linux (WSL) aims to seamlessly integrate the open-source operating system with Windows, blurring the boundaries between the two worlds for users. This integration includes the ability to access the file system of one operating system from the other and run applications from either system.
WSL: Start Linux apps in Windows and Windows apps in Linux, access ext4 and NTFS first appeared on 4sysops.]]></summary>
        <author>
            <name>Wolfgang Sommergut</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Look at the SANS Sponsorship Program]]></title>
        <id>https://www.sans.org/blog/a-look-at-the-sans-sponsorship-program</id>
        <link href="https://www.sans.org/blog/a-look-at-the-sans-sponsorship-program?msc=rss"/>
        <updated>2023-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Reach the right audience, at the right time, with the right message with the SANS Sponsorship Program.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Elevating Linux Security: Why Linux is Essential in Mitigating Critical Risks]]></title>
        <id>https://www.sans.org/blog/elevating-linux-security-why-linux-is-essential-in-mitigating-critical-risks</id>
        <link href="https://www.sans.org/blog/elevating-linux-security-why-linux-is-essential-in-mitigating-critical-risks?msc=rss"/>
        <updated>2023-12-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Most security professionals enter the field with more experience on Windows than they do on Linux.  As a result, there is a gap in their understanding of how to mitigate risks on Linux. Many individuals are self-taught in Linux security practices and only have fragmented understanding of how to secure systems effectively.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RBAC in Kubernetes]]></title>
        <id>https://4sysops.com/?p=1578357</id>
        <link href="https://4sysops.com/archives/rbac-in-kubernetes/"/>
        <updated>2023-12-08T11:05:55.000Z</updated>
        <summary type="html"><![CDATA[In a previous post in this Kubernetes guide, you learned about deploying stateful applications with Kubernetes StatefulSets. Today, we will discuss role-based access control (RBAC) in Kubernetes, which controls who can access Kubernetes cluster resources. It uses roles and role bindings to grant permissions to subjects, such as users, groups, or service accounts.
RBAC in Kubernetes first appeared on 4sysops.]]></summary>
        <author>
            <name>Surender Kumar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[RPC or Not, Here We Log: Preventing Exploitation and Abuse with RPC Firewall]]></title>
        <id>https://blog.nviso.eu/?p=15577</id>
        <link href="https://blog.nviso.eu/2023/12/08/rpc-or-not-here-we-log-preventing-exploitation-and-abuse-with-rpc-firewall/"/>
        <updated>2023-12-08T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome, readers, to the first installment of our blog series “Preventing Exploitation and Abuse with the RPC Firewall”.In this post, we’ll delve into how to create rules for the RPC firewall and how to deploy them onto our servers.In the year 2024, we’ll release the second part of this series, where we’ll explore detection possibilities … Continue reading RPC or Not, Here We Log: Preventing Exploitation and Abuse with RPC Firewall →]]></summary>
        <author>
            <name>Steffen Rogge</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[2024 Live Hacking Events]]></title>
        <id>https://hackerone.com/lhe/2024-lhe-invitations</id>
        <link href="https://www.hackerone.com/lhe/2024-lhe-invitations"/>
        <updated>2023-12-07T21:06:19.000Z</updated>
        <summary type="html"><![CDATA[2024 HackerOne Live Hacking Events are here and better than ever!]]></summary>
        <author>
            <name>HackerOne</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SonicWall WXA – Authentication Bypass and Remote Code Execution Vulnerability]]></title>
        <id>https://www.praetorian.com/?p=5439</id>
        <link href="https://www.praetorian.com/blog/sonicwall-wxa-authentication-bypass-and-rce-vulnerability/"/>
        <updated>2023-12-07T14:03:23.000Z</updated>
        <summary type="html"><![CDATA[Overview In an effort to safeguard our customers, we perform proactive vulnerability research with the goal of identifying zero-day vulnerabilities that are likely to impact the security of leading organizations. Recently, we were looking at the list of available OVA appliances from SonicWall and identified the WXA appliance image was available for download. We decided […]
The post SonicWall WXA – Authentication Bypass and Remote Code Execution Vulnerability appeared first on Praetorian.]]></summary>
        <author>
            <name>Emmaline</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Migrate Microsoft Entra Connect (Azure AD Connect) to a new server]]></title>
        <id>https://4sysops.com/?p=1578297</id>
        <link href="https://4sysops.com/archives/migrate-microsoft-entra-connect-azure-ad-connect-to-a-new-server/"/>
        <updated>2023-12-07T08:16:25.000Z</updated>
        <summary type="html"><![CDATA[Microsoft Entra Connect, formerly named Azure AD Connect, is an on-premises application used to synchronize your local Active Directory objects to Microsoft Entra ID, also known as Azure AD. This post will guide you through the process of migrating Microsoft Entra Connect to a new server.
Migrate Microsoft Entra Connect (Azure AD Connect) to a new server first appeared on 4sysops.]]></summary>
        <author>
            <name>Leos Marek</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Navigate FDA 524b to get your medical cyber device to market]]></title>
        <id>https://www.pentestpartners.com/?p=28404</id>
        <link href="https://www.pentestpartners.com/security-blog/navigate-fda-524b-to-get-your-medical-cyber-device-to-market/"/>
        <updated>2023-12-07T06:45:31.000Z</updated>
        <summary type="html"><![CDATA[With amendment 524b officially enacted, medical devices across the United States (and the globe) are living under some new rules and procedures. You’re not alone if you are finding these […]
Navigate FDA 524b to get your medical cyber device to market first appeared on Pen Test Partners.]]></summary>
        <author>
            <name>Mike Leonard</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Zero Trust Blog Series - Blog 4: Operating for Zero Trust]]></title>
        <id>https://www.sans.org/blog/zero-trust-blog-4-operating-for-zero-trust</id>
        <link href="https://www.sans.org/blog/zero-trust-blog-4-operating-for-zero-trust?msc=rss"/>
        <updated>2023-12-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is the fourth in a 4-part series of blogs covering the end-to-end aspects of zero trust.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Leveraging Artificial Intelligence (AI) to Manage Human Risk: Part 6 – Analyzing Documents, Charts, and Spreadsheets]]></title>
        <id>https://www.sans.org/blog/leveraging-artificial-intelligence-ai-to-manage-human-risk-part-6-analyzing-documents-charts-and-spreadsheets</id>
        <link href="https://www.sans.org/blog/leveraging-artificial-intelligence-ai-to-manage-human-risk-part-6-analyzing-documents-charts-and-spreadsheets?msc=rss"/>
        <updated>2023-12-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A blog about AI's ability to analyze many forms of data]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Purple Teaming: Validating Cybersecurity Investments and Enhancing Efficiency]]></title>
        <id>https://bishopfox.com/blog/purple-teaming-validating-cybersecurity-investments-enhancing-efficiency</id>
        <link href="https://bishopfox.com/blog/purple-teaming-validating-cybersecurity-investments-enhancing-efficiency"/>
        <updated>2023-12-06T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn how Purple Teaming brings together offensive and defensive strategies for a more comprehensive and impactful cybersecurity approach.]]></summary>
        <author>
            <name>Ryan Basden</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Publishing Trail of Bits’ CodeQL queries]]></title>
        <id>https://blog.trailofbits.com/?p=105418</id>
        <link href="https://blog.trailofbits.com/2023/12/06/publishing-trail-of-bits-codeql-queries/"/>
        <updated>2023-12-06T13:30:25.000Z</updated>
        <summary type="html"><![CDATA[By Paweł Płatek We are publishing a set of custom CodeQL queries for Go and C. We have used them to find critical issues that the standard CodeQL queries would have missed. This new release of a continuously updated repository of CodeQL queries joins our public Semgrep rules and Automated Testing Handbook in an effort […]]]></summary>
        <author>
            <name>Trail of Bits</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[LABScon Replay | The Cyber Arm of China’s Soft Power: Reshaping a Continent]]></title>
        <id>https://www.sentinelone.com/?post_type=labs&amp;p=87025</id>
        <link href="https://www.sentinelone.com/labs/labscon-replay-the-cyber-arm-of-chinas-soft-power-reshaping-a-continent/"/>
        <updated>2023-12-06T13:04:24.000Z</updated>
        <summary type="html"><![CDATA[Tom Hegel explores China's influence in Africa and highlights an opportunity for broader understanding of global cyber threat landscapes.]]></summary>
        <author>
            <name>LABScon</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ansible Playbook examples]]></title>
        <id>https://4sysops.com/?p=1578276</id>
        <link href="https://4sysops.com/archives/ansible-playbook-examples/"/>
        <updated>2023-12-06T09:55:56.000Z</updated>
        <summary type="html"><![CDATA[An Ansible playbook is a YAML file that contains a set of instructions and configurations for automating tasks on one or more remote machines using the Ansible automation tool. In this post in our Ansible beginner's series, I will explain how to use an Ansible Playbook by example.
Ansible Playbook examples first appeared on 4sysops.]]></summary>
        <author>
            <name>Hitesh Jethva</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Data Connector Health Monitoring on Microsoft Sentinel]]></title>
        <id>https://blog.nviso.eu/?p=15521</id>
        <link href="https://blog.nviso.eu/2023/12/06/data-connector-health-monitoring-on-microsoft-sentinel/"/>
        <updated>2023-12-06T08:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction Security information and event management (SIEM) tooling allows security teams to collect and analyse logs from a wide variety of sources. In turn this is used to detect and handle incidents. Evidently it is important to ensure that the log ingestion is complete and uninterrupted. Luckily SIEMs offer out-of-the-box solutions and/or capabilities to create … Continue reading Data Connector Health Monitoring on Microsoft Sentinel →]]></summary>
        <author>
            <name>Frederik Meutermans</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Maintaining the Intelligence Edge in Cybersecurity]]></title>
        <id>https://hackerone.com/ceo/maintaining-intelligence-edge-cybersecurity</id>
        <link href="https://www.hackerone.com/ceo/maintaining-intelligence-edge-cybersecurity"/>
        <updated>2023-12-05T18:19:42.000Z</updated>
        <summary type="html"><![CDATA[A message from HackerOne's CEO about the power of both artificial and human intelligence.]]></summary>
        <author>
            <name>Marten Mickos</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Attack Surface of the Ubiquiti Connect EV Station]]></title>
        <id>5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:656f549b970f832921366d20</id>
        <link href="https://www.thezdi.com/blog/2023/12/5/attack-surface-of-the-ubiquiti-connect-ev-station"/>
        <updated>2023-12-05T17:58:38.000Z</updated>
        <summary type="html"><![CDATA[Previously, we looked at the attack surface of the ChargePoint Home Flex EV charger – one of the targets in the upcoming Pwn2Own Automotive contest. In this post, we look at the attack surface of another EV Charger. The Ubiquiti Connect EV Station is a weatherproof Level 2 electric vehicle charging station designed for organizations. We cover the most obvious areas a threat actor would explore when attempting to compromise the device.
The Ubiquiti Connect EV Station is a Level 2 charging station for electric vehicles. The EV Station is meant to be managed by a Ubiquiti management platform running the UniFi OS Console, such as the Ubiquiti Dream Machine or Cloud Gateway. Users can also use the iOS or Android UniFi Connect mobile apps to configure the EV Station.
Attack Surface Summary
The U…]]></summary>
        <author>
            <name>Todd Manning</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blind CSS Exfiltration: exfiltrate unknown web pages]]></title>
        <id>blind-css-exfiltration</id>
        <link href="https://portswigger.net/research/blind-css-exfiltration"/>
        <updated>2023-12-05T15:37:20.000Z</updated>
        <summary type="html"><![CDATA[This is a gif of the exfiltration process (We've increased the speed so you're not waiting around for 1 minute). Read on to discover how this works... Why would we want to do blind CSS exfiltration? I]]></summary>
        <author>
            <name>PortSwigger Research</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Multiple Vulnerabilities In Extreme Networks ExtremeXOS]]></title>
        <id>https://rhinosecuritylabs.com/?p=24839</id>
        <link href="https://rhinosecuritylabs.com/research/extreme-networks-extremexos-vulnerabilities/"/>
        <updated>2023-12-05T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[The post Multiple Vulnerabilities In Extreme Networks ExtremeXOS appeared first on Rhino Security Labs.]]></summary>
        <author>
            <name>David Yesland</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Analyzing the SonicWall Custom Grub LUKS Encryption Modifications]]></title>
        <id>https://www.praetorian.com/?p=5421</id>
        <link href="https://www.praetorian.com/blog/sonicwall-custom-grub-luks-encryption/"/>
        <updated>2023-12-05T14:03:55.000Z</updated>
        <summary type="html"><![CDATA[Overview Recently, we decided to perform some reverse engineering of the SonicWall NSv appliance to identify any potential remote code execution vulnerabilities within the appliance. During our initial analysis of a virtual machine image for the application, we discovered a customized LUKS encryption mechanism meant to hinder reverse engineering of the application. We were able […]
The post Analyzing the SonicWall Custom Grub LUKS Encryption Modifications appeared first on Praetorian.]]></summary>
        <author>
            <name>Emmaline</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[SystoLOCK in review: Logging in to Active Directory with multi-factor authentication without passwords]]></title>
        <id>https://4sysops.com/?p=1577987</id>
        <link href="https://4sysops.com/archives/systolock-in-review-logging-in-to-active-directory-with-multi-factor-authentication-without-passwords/"/>
        <updated>2023-12-05T13:33:52.000Z</updated>
        <summary type="html"><![CDATA[SystoLOCK offers a robust solution for enhancing security through multi-factor authentication (MFA) without passwords in an Active Directory environment. Unlike other methods, SystoLOCK does not rely on cloud services. The solution introduces the convenience similar to smartcard-based authentication, eliminating the need for complex password management. Moreover, SystoLOCK allows users to log in securely via VPN connections and supports offline login functionality.
SystoLOCK in review: Logging in to Active Directory with multi-factor authentication without passwords first appeared on 4sysops.]]></summary>
        <author>
            <name>Wolfgang Sommergut</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OSINT. What can you find from a domain or company name]]></title>
        <id>https://www.pentestpartners.com/?p=28358</id>
        <link href="https://www.pentestpartners.com/security-blog/osint-what-can-you-find-from-a-domain-or-company-name/"/>
        <updated>2023-12-05T06:27:42.000Z</updated>
        <summary type="html"><![CDATA[We carry out lots of attack surface assessments, parts of which involve investigating information that has been unintentionally disclosed. To help OPSEC people I thought it might be useful to […]
OSINT. What can you find from a domain or company name first appeared on Pen Test Partners.]]></summary>
        <author>
            <name>Tony Gee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[ldr521-security-culture-leaders-challenge-coin]]></title>
        <id>https://www.sans.org/blog/ldr521-security-culture-leaders-challenge-coin</id>
        <link href="https://www.sans.org/blog/ldr521-security-culture-leaders-challenge-coin?msc=rss"/>
        <updated>2023-12-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Learn more about the new SANS Challenge Coin for LDR521: Security Culture for Leaders, the transformational triad, and the transformational triad coin]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hack My Career: Meet Kayla Underkoffler]]></title>
        <id>https://hackerone.com/culture-and-talent/hack-my-career-meet-kayla-underkoffler</id>
        <link href="https://www.hackerone.com/culture-and-talent/hack-my-career-meet-kayla-underkoffler"/>
        <updated>2023-12-04T17:55:00.000Z</updated>
        <summary type="html"><![CDATA[HackerOne's Kayla Underkoffler shares her career journey and how she arrived at her current role.]]></summary>
        <author>
            <name>Marina Briones</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Kubernetes CoreDNS]]></title>
        <id>https://4sysops.com/?p=1577733</id>
        <link href="https://4sysops.com/archives/kubernetes-coredns/"/>
        <updated>2023-12-04T10:53:06.000Z</updated>
        <summary type="html"><![CDATA[In a previous post in this Kubernetes guide, you learned about deploying stateful applications with Kubernetes StatefulSets. Today's post will discuss Kubernetes CoreDNS. Earlier versions of Kubernetes used kube-dns to provide service discovery and name resolution within the cluster, which was based on dnsmasq and SkyDNS. The kube-dns had many problems, such as security vulnerabilities, scalability concerns, and higher latency, so starting with Kubernetes version 1.13, CoreDNS became the default cluster DNS server.
Kubernetes CoreDNS first appeared on 4sysops.]]></summary>
        <author>
            <name>Surender Kumar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Technical Advisory: Sonos Era 100 Secure Boot Bypass Through Unchecked setenv() call]]></title>
        <id>https://research.nccgroup.com/?p=33714</id>
        <link href="https://research.nccgroup.com/2023/12/04/technical-advisory-sonos-era-100-secure-boot-bypass-through-unchecked-setenv-call/"/>
        <updated>2023-12-04T10:26:39.000Z</updated>
        <summary type="html"><![CDATA[Vendor: Sonos Vendor URL: https://www.sonos.com/ Versions affected: * Confirmed 73.0-42060 Systems Affected: Sonos Era 100 Author: Ilya Zhuravlev Advisory URL: Not provided by Sonos. Sonos state an update was released on 2023-11-15 which remediated the issue. CVE Identifier: N/A Risk: High Summary Sonos Era 100 is a smart speaker released in 2023. A vulnerability exists […]]]></summary>
        <author>
            <name>Alex Plaskett</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Shooting Yourself in the .flags – Jailbreaking the Sonos Era 100]]></title>
        <id>https://research.nccgroup.com/?p=33724</id>
        <link href="https://research.nccgroup.com/2023/12/04/shooting-yourself-in-the-flags-jailbreaking-the-sonos-era-100/"/>
        <updated>2023-12-04T10:25:38.000Z</updated>
        <summary type="html"><![CDATA[Research performed by Ilya Zhuravlev supporting the Exploit Development Group (EDG). The Era 100 is Sonos’s flagship device, released on March 28th 2023 and is a notable step up from the Sonos One. It was also one of the target devices for Pwn2Own Toronto 2023. NCC found multiple security weaknesses within the bootloader of the […]]]></summary>
        <author>
            <name>Alex Plaskett</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[MITRE’s Updated ATT&CK Framework: What Cloud Defenders Need to Know]]></title>
        <id>https://www.sans.org/blog/mitres-updated-attck-framework-what-cloud-defenders-need-to-know</id>
        <link href="https://www.sans.org/blog/mitres-updated-attck-framework-what-cloud-defenders-need-to-know?msc=rss"/>
        <updated>2023-12-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[A blog about the MITRE ATT&CK framework version 14 cloud security updates]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Overview of Content Published in November]]></title>
        <id>http://blog.didierstevens.com/?p=10224</id>
        <link href="https://blog.didierstevens.com/2023/12/02/overview-of-content-published-in-november-9/"/>
        <updated>2023-12-02T08:00:47.000Z</updated>
        <summary type="html"><![CDATA[Here is an overview of content I published in November: Blog posts: Update: 1768.py Version 0.0.20 SANS ISC Diary entries: Quick Tip For Artificially Inflated PE Files Wireshark 4.2.0 Released OVA Files]]></summary>
        <author>
            <name>Didier Stevens</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Proof of life…]]></title>
        <id>https://www.hexacorn.com/blog/?p=8897</id>
        <link href="https://www.hexacorn.com/blog/2023/12/02/proof-of-life/"/>
        <updated>2023-12-02T00:06:39.000Z</updated>
        <summary type="html"><![CDATA[‘Blade Runner’ – the cult classic movie – teaches us that the (non-)human traits/behaviors can be detected with a so-called Voight-Kampff test. This post is about discussing (not designing yet) a similar test for our threat hunting purposes… The key … Continue reading →]]></summary>
        <author>
            <name>adam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A git merge example]]></title>
        <id>https://4sysops.com/?p=1577706</id>
        <link href="https://4sysops.com/archives/a-git-merge-example/"/>
        <updated>2023-12-01T11:38:33.000Z</updated>
        <summary type="html"><![CDATA[In the last article in this series, we looked at how to  merge branches on GitHub as a way to incorporate the changes from one branch into another. This article will demonstrate how to merge branches on the command line using Git.
A git merge example first appeared on 4sysops.]]></summary>
        <author>
            <name>Edem Afenyo</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Exploiting XPath Injection Weaknesses]]></title>
        <id>https://www.netspi.com/?p=31500</id>
        <link href="https://www.netspi.com/blog/technical/web-application-penetration-testing/exploiting-xpath-injection-weaknesses/"/>
        <updated>2023-11-30T15:00:00.000Z</updated>
        <summary type="html"><![CDATA[Defend your web applications from XPath Injection: Explore the intricacies of this critical threat, understand its impact, and learn effective mitigation strategies.
The post Exploiting XPath Injection Weaknesses appeared first on NetSPI.]]></summary>
        <author>
            <name>Mayur Patil</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[What’s your ENow AppGov Score? Free Microsoft Entra ID app security assessment]]></title>
        <id>https://4sysops.com/?p=1577684</id>
        <link href="https://4sysops.com/archives/whats-your-enow-appgov-score-free-microsoft-entra-id-app-security-assessment/"/>
        <updated>2023-11-30T12:24:01.000Z</updated>
        <summary type="html"><![CDATA[Many organizations are behind the curve in understanding their SaaS applications and governance. In fact, for many IT admins, SaaS applications and SaaS app governance can be very challenging in terms of visibility and control. ENow has introduced a free assessment tool called AppGov Score that quantifies the governance state of Microsoft Entra ID apps and gives admins visibility into SaaS apps in the Microsoft cloud.
What’s your ENow AppGov Score? Free Microsoft Entra ID app security assessment first appeared on 4sysops.]]></summary>
        <author>
            <name>Brandon Lee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[OPSEC failures when threat hunting]]></title>
        <id>https://www.pentestpartners.com/?p=28323</id>
        <link href="https://www.pentestpartners.com/security-blog/opsec-failures-when-threat-hunting/"/>
        <updated>2023-11-30T06:02:02.000Z</updated>
        <summary type="html"><![CDATA[Over the last few years I’ve carried out a lot of phishing, and have some interesting observations on how organisations respond. However, the purpose of this blog is to highlight […]
OPSEC failures when threat hunting first appeared on Pen Test Partners.]]></summary>
        <author>
            <name>Tony Gee</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Detailed Look at Pwn2Own Automotive EV Charger Hardware]]></title>
        <id>5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:65666188a332be611d44ba34</id>
        <link href="https://www.thezdi.com/blog/2023/11/28/a-detailed-look-at-pwn2own-automotive-ev-charger-hardware"/>
        <updated>2023-11-29T17:29:37.000Z</updated>
        <summary type="html"><![CDATA[In a previous blog, we took a look at the ChargePoint Home Flex EV charger – one of the targets in the upcoming Pwn2Own Automotive contest. In this post, dive in with even greater detail on all of the EV Chargers targeted in the upcoming Pwn2Own Automotive competition. This isn’t meant to be a detailed exploitation guide. However, we hope these high-resolution images will inspire some of the research we hope to see on display in Tokyo.
This post provides detailed imagery of the target EV chargers we are including in the upcoming Pwn2Own Automotive contest. Our intention is to help contestants understand the component hardware included in the EV chargers for the competition. But first, a safety reminder: 
EV Chargers contain high voltages. Use extreme caution when working with them.  Never …]]></summary>
        <author>
            <name>Todd Manning</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mythic v3.2 Highlights: Interactive Tasking, Push C2, and Dynamic File Browser]]></title>
        <id>https://medium.com/p/7035065e2b3d</id>
        <link href="https://posts.specterops.io/mythic-v3-2-highlights-interactive-tasking-push-c2-and-dynamic-file-browser-7035065e2b3d?source=rss----f05f8696e3cc---4"/>
        <updated>2023-11-29T14:34:57.000Z</updated>
        <summary type="html"><![CDATA[New UI and quality of life updates!]]></summary>
        <author>
            <name>Cody Thomas</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Whitelist a domain in Microsoft 365]]></title>
        <id>https://4sysops.com/?p=1577662</id>
        <link href="https://4sysops.com/archives/whitelist-a-domain-in-microsoft-365/"/>
        <updated>2023-11-29T12:59:57.000Z</updated>
        <summary type="html"><![CDATA[Defender for Office 365 and Exchange Online Protection monitor all emails hitting your domain and block harmful messages and spam. However, emails from legitimate sources can sometimes also be blocked for various reasons. In this scenario, as an admin, you want to whitelist the sender or the domain. In this post, you will learn how to whitelist a domain in Microsoft 365 and the necessary precautions you must take while doing so.
Whitelist a domain in Microsoft 365 first appeared on 4sysops.]]></summary>
        <author>
            <name>Vignesh Mudliar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ekoparty Talk - Prompt Injections in the Wild]]></title>
        <id>https://embracethered.com/blog/posts/2023/ekoparty-prompt-injection-talk/</id>
        <link href="https://embracethered.com/blog/posts/2023/ekoparty-prompt-injection-talk/"/>
        <updated>2023-11-29T00:00:33.000Z</updated>
        <summary type="html"><![CDATA[Earlier this month I had the opportunity to present at Ekoparty 2023 about Prompt Injections in the Wild, and the video of the talk was just posted to YouTube. Check it out.
  It starts with a basic overview of LLMs and then dives deep into exploits and mitigations across various LLM applications and chatbots, including (but not limited) to demos of exploits with Bing Chat, ChatGPT, Anthropic Claude, Azure AI, GCP Vertex AI and Google Bard.]]></summary>
        <author>
            <name>Embrace The Red</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Mercado Libre’s Journey to a Public Bug Bounty Program]]></title>
        <id>https://hackerone.com/customer-stories/mercado-libre-public-bug-bounty</id>
        <link href="https://www.hackerone.com/customer-stories/mercado-libre-public-bug-bounty"/>
        <updated>2023-11-28T17:21:19.000Z</updated>
        <summary type="html"><![CDATA[HackerOne is delighted to announce the launch of Mercado Libre’s Public Bug Bounty Program.]]></summary>
        <author>
            <name>HackerOne</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Decoding the Past, Securing the Future | Enhancing Cyber Defense with Historical Threat Intelligence]]></title>
        <id>https://www.sentinelone.com/?post_type=labs&amp;p=86799</id>
        <link href="https://www.sentinelone.com/labs/decoding-the-past-securing-the-future-enhancing-cyber-defense-with-historical-threat-intelligence/"/>
        <updated>2023-11-28T14:28:21.000Z</updated>
        <summary type="html"><![CDATA[Explore how revisiting past cyber incidents can empower defenders and help to anticipate future threats more effectively.]]></summary>
        <author>
            <name>Tom Hegel</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why Azure B2C ROPC Custom Flows Are Inherently Insecure]]></title>
        <id>https://www.praetorian.com/?p=5400</id>
        <link href="https://www.praetorian.com/blog/why-azure-b2c-ropc-custom-flows-are-inherently-insecure/"/>
        <updated>2023-11-28T14:03:36.000Z</updated>
        <summary type="html"><![CDATA[Microsoft’s Azure Active Directory B2C service allows cloud administrators to define custom policies, which orchestrates trust between principals using standard authentication protocols. One such custom policy that B2C defines by default is the Resource Owner Password Credentials (ROPC) flow, which implements the OAuth standard authentication flow of the same name and allows users to simply […]
The post Why Azure B2C ROPC Custom Flows Are Inherently Insecure appeared first on Praetorian.]]></summary>
        <author>
            <name>Emmaline</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Healthcare: 2023 Insights from the Ponemon Institute]]></title>
        <id>https://bishopfox.com/blog/healthcare-2023-ponemon-institute-insights</id>
        <link href="https://bishopfox.com/blog/healthcare-2023-ponemon-institute-insights"/>
        <updated>2023-11-28T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[Get insights into offensive security trends in the healthcare sector with data from the Ponemon Institute’s 2023 State of Offensive Security Report.]]></summary>
        <author>
            <name>Beth Robinson</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Unlock Linux Unified Key Setup (LUKS) encrypted partitions with TPM 2.0]]></title>
        <id>https://4sysops.com/?p=1577641</id>
        <link href="https://4sysops.com/archives/unlock-linux-unified-key-setup-luks-encrypted-partitions-with-tpm-20/"/>
        <updated>2023-11-28T13:23:20.000Z</updated>
        <summary type="html"><![CDATA[Leveraging TPM 2.0 to unlock Linux Unified Key Setup (LUKS) encrypted partitions ensures an added layer of protection, utilizing hardware-backed security measures to safeguard critical data while automating the unlocking of encrypted drives at boot time.
Unlock Linux Unified Key Setup (LUKS) encrypted partitions with TPM 2.0 first appeared on 4sysops.]]></summary>
        <author>
            <name>Evi Vanoost</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[A Newsletter about Climate Change and Industrial Decarbonization]]></title>
        <id>https://blog.hboeck.de/archives/905-guid.html</id>
        <link href="https://blog.hboeck.de/archives/905-A-Newsletter-about-Climate-Change-and-Industrial-Decarbonization.html"/>
        <updated>2023-11-27T20:09:00.000Z</updated>
        <author>
            <name>nospam@example.com (Hanno Böck)</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Ray, Versions 2.6.3, 2.8.0]]></title>
        <id>https://bishopfox.com/blog/ray-versions-2-6-3-2-8-0</id>
        <link href="https://bishopfox.com/blog/ray-versions-2-6-3-2-8-0"/>
        <updated>2023-11-27T14:00:00.000Z</updated>
        <summary type="html"><![CDATA[This Bishop Fox advisory highlights three critical severity vulnerabilities in the RAY application versions 2.6.3 and 2.8.0.]]></summary>
        <author>
            <name>Berenice Flores Garcia</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Update container images with Copa]]></title>
        <id>https://4sysops.com/?p=1577625</id>
        <link href="https://4sysops.com/archives/update-container-images-with-copa/"/>
        <updated>2023-11-27T12:17:26.000Z</updated>
        <summary type="html"><![CDATA[Copa, an open-source container image security tool from Microsoft, addresses the need to update container images. It lets you immediately patch container image vulnerabilities without relying on developers or maintainers.
Update container images with Copa first appeared on 4sysops.]]></summary>
        <author>
            <name>Surender Kumar</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Are Vehicle to Grid spikes coming?]]></title>
        <id>https://www.pentestpartners.com/?p=28285</id>
        <link href="https://www.pentestpartners.com/security-blog/are-vehicle-to-grid-spikes-coming/"/>
        <updated>2023-11-27T06:04:54.000Z</updated>
        <summary type="html"><![CDATA[If you didn’t already know, I’m a massive fan of electric vehicles. One of the aspects that intrigues me is Vehicle to Grid (V2G), the potential for our car batteries […]
Are Vehicle to Grid spikes coming? first appeared on Pen Test Partners.]]></summary>
        <author>
            <name>Ken Munro</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[KASLR Leaks Restriction]]></title>
        <id>https://windows-internals.com/?p=520214</id>
        <link href="https://windows-internals.com/kaslr-leaks-restriction/?utm_source=rss&amp;utm_medium=rss&amp;utm_campaign=kaslr-leaks-restriction"/>
        <updated>2023-11-26T20:38:34.000Z</updated>
        <summary type="html"><![CDATA[[…]]]></summary>
        <author>
            <name>Yarden Shafir</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[File System artifacts for known security software]]></title>
        <id>https://www.hexacorn.com/blog/?p=8901</id>
        <link href="https://www.hexacorn.com/blog/2023/11/26/file-system-artifacts-for-known-security-software/"/>
        <updated>2023-11-26T10:59:37.000Z</updated>
        <summary type="html"><![CDATA[Inspired by Phill Moore’s new project called Ruler, I combed my collection of all old HijackThis logs (that I web scraped a long time ago) looking for paths that may be associated with security software. Unlike Phill’s, the resulting data … Continue reading →]]></summary>
        <author>
            <name>adam</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Linux Incident Response - A Guide to syslog-ng]]></title>
        <id>https://www.sans.org/blog/linux-incident-response-a-guide-to-syslog-ng</id>
        <link href="https://www.sans.org/blog/linux-incident-response-a-guide-to-syslog-ng?msc=rss"/>
        <updated>2023-11-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Syslog-ng stands out as an essential log management tool in Linux environments. Its advanced functionalities, coupled with extensive configurational options and robust integration capabilities with SIEM systems, make it an indispensable asset in effective log management and cybersecurity operations.]]></summary>
        <author>
            <name>SANS Blog</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Protecting Critical Infrastructure: A Tale of Two National Cybersecurity Strategies]]></title>
        <id>https://www.synack.com/?p=16110</id>
        <link href="https://www.synack.com/blog/critical-infrastructure-national-cybersecurity-strategies/"/>
        <updated>2023-04-06T15:17:37.000Z</updated>
        <summary type="html"><![CDATA[The term “special relationship,” coined by Winston Churchill, describes the close, longstanding alliance between the United States and the United Kingdom. It has been applied to cooperation during war, to trade and commerce, and even to intelligence sharing. That special relationship has clearly influenced the two nations’ recent policy papers on national cybersecurity. The U.K. […]
The post Protecting Critical Infrastructure: A Tale of Two National Cybersecurity Strategies appeared first on Synack.]]></summary>
        <author>
            <name>Luke Luckett</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Scoping Adventures: How to Get the Most Out of Your Synack Pentesting]]></title>
        <id>https://www.synack.com/?p=16093</id>
        <link href="https://www.synack.com/blog/scoping-your-pentest-with-synack/"/>
        <updated>2023-03-27T14:46:36.000Z</updated>
        <summary type="html"><![CDATA[Scoping Adventures is a series of blogs about some of the more interesting penetration tests that the Synack Customer Success teams have worked on over the last few months. Each blog outlines how we engage with the client to achieve the best results from a pentest. Pentesters love colors—red, blue, purple, black, white and grey […]
The post Scoping Adventures: How to Get the Most Out of Your Synack Pentesting appeared first on Synack.]]></summary>
        <author>
            <name>Huw Jones</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[Applying Strategic Thinking in Your Pentesting Program]]></title>
        <id>https://www.synack.com/?p=16082</id>
        <link href="https://www.synack.com/blog/applying-strategic-thinking-in-your-pentesting-program/"/>
        <updated>2023-03-15T11:00:36.000Z</updated>
        <summary type="html"><![CDATA[The Synack Platform & Five Pillars of Strategic Pentesting Why You Need to Think Strategically It’s no great revelation that tactics, techniques, and procedures utilized by nefarious hackers hacking activities are evolving on a daily basis. In 2022, 18,828 common vulnerabilities and exposures (CVEs) were published. At the same time, organization attack surfaces are expanding. […]
The post Applying Strategic Thinking in Your Pentesting Program appeared first on Synack.]]></summary>
        <author>
            <name>Synack</name>
        </author>
    </entry>
    <entry>
        <title type="html"><![CDATA[The U.S. has a new cybersecurity strategy. What’s next for CISOs?]]></title>
        <id>https://www.synack.com/?p=16074</id>
        <link href="https://www.synack.com/blog/new-cybersecurity-strategy-whats-next-for-cisos/"/>
        <updated>2023-03-13T14:37:20.000Z</updated>
        <summary type="html"><![CDATA[One week ago, the Biden administration unveiled its long-awaited U.S. National Cybersecurity Strategy, with an eye toward centralizing government cyber resources and holding IT vendors more accountable for their digital defenses. Now that the ink is dry on the 35-page document, top officials like Acting National Cyber Director Kemba Walden are busy putting it into […]
The post The U.S. has a new cybersecurity strategy. What’s next for CISOs? appeared first on Synack.]]></summary>
        <author>
            <name>Mark Kuhr</name>
        </author>
    </entry>
</feed>