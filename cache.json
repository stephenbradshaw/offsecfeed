{
  "sources": [
    {
      "title": "Posts By SpecterOps Team Members - Medium",
      "feedUrl": "https://posts.specterops.io/feed",
      "siteUrl": "https://posts.specterops.io?source=rss----f05f8696e3cc---4",
      "articles": [
        {
          "id": "https://medium.com/p/9ed71d38d546",
          "author": "Chris Thompson",
          "description": "Abusing Intune for Lateral Movement Over C2",
          "link": "https://posts.specterops.io/maestro-9ed71d38d546?source=rss----f05f8696e3cc---4",
          "publishedOn": "2024-10-31T21:24:54.000Z",
          "wordCount": 5170,
          "title": "Maestro",
          "imageUrl": "https://miro.medium.com/v2/resize:fit:340/1*Q0HvFPk-PaFefT-lIZpQVw.png"
        },
        {
          "id": "https://medium.com/p/91b706bc7958",
          "author": "Matt Creel",
          "description": "TL;DR: BOFHound can now parse Active Directory Certificate Services (AD CS) objects, manually queried from LDAP, for review and attack path…",
          "link": "https://posts.specterops.io/bofhound-ad-cs-integration-91b706bc7958?source=rss----f05f8696e3cc---4",
          "publishedOn": "2024-10-30T14:16:12.000Z",
          "wordCount": 5560,
          "title": "BOFHound: AD CS Integration",
          "imageUrl": "https://miro.medium.com/v2/da:true/resize:fit:1200/0*dDQKQkvp-Ib2iukJ"
        }
      ]
    },
    {
      "title": "Sevro Security",
      "feedUrl": "https://sevrosecurity.com/feed/",
      "siteUrl": "https://sevrosecurity.com/",
      "articles": []
    },
    {
      "title": "PortSwigger Blog",
      "feedUrl": "https://portswigger.net/blog/rss",
      "siteUrl": "https://portswigger.net/blog",
      "articles": [
        {
          "id": "take-control-of-your-security-posture-the-burp-suite-enterprise-edition-winter-update",
          "author": null,
          "description": "Manage your security, your way. Managing a complex, enterprise-level web estate requires robust compliance, streamlined management of audits, and visibility of your security coverage. In other words -",
          "link": "https://portswigger.net/blog/take-control-of-your-security-posture-the-burp-suite-enterprise-edition-winter-update",
          "publishedOn": "2024-10-30T09:12:02.000Z",
          "wordCount": 1713,
          "title": "Take control of your security posture: The Burp Suite Enterprise Edition winter update",
          "imageUrl": "https://portswigger.net/content/images/logos/portswigger-twittercardlogo.png"
        }
      ]
    },
    {
      "title": "PortSwigger Research",
      "feedUrl": "https://portswigger.net/research/rss",
      "siteUrl": "https://portswigger.net/research",
      "articles": [
        {
          "id": "new-crazy-payloads-in-the-url-validation-bypass-cheat-sheet",
          "author": null,
          "description": "The strength of our URL Validation Bypass Cheat Sheet lies in the contributions from the web security community, and today’s update is no exception. We are excited to introduce a new and improved IP a",
          "link": "https://portswigger.net/research/new-crazy-payloads-in-the-url-validation-bypass-cheat-sheet",
          "publishedOn": "2024-10-29T13:59:13.000Z",
          "wordCount": 1111,
          "title": "New crazy payloads in the URL Validation Bypass Cheat Sheet",
          "imageUrl": "https://portswigger.net/cms/images/64/c6/9fed-twittercard-81a7457a-352e-4be5-a489-adfa890fc960.png"
        },
        {
          "id": "concealing-payloads-in-url-credentials",
          "author": null,
          "description": "Last year Johan Carlsson discovered you could conceal payloads inside the credentials part of the URL . This was fascinating to me especially because the payload is not actually visible in the URL in",
          "link": "https://portswigger.net/research/concealing-payloads-in-url-credentials",
          "publishedOn": "2024-10-23T12:59:05.000Z",
          "wordCount": 1009,
          "title": "Concealing payloads in URL credentials",
          "imageUrl": "https://portswigger.net/cms/images/a1/af/aea1-twittercard-twitter.png"
        }
      ]
    },
    {
      "title": "Project Zero",
      "feedUrl": "https://googleprojectzero.blogspot.com/feeds/posts/default",
      "siteUrl": "https://googleprojectzero.blogspot.com/",
      "articles": [
        {
          "id": "https://googleprojectzero.blogspot.com/2024/10/from-naptime-to-big-sleep.html",
          "author": null,
          "description": "@import url(https://themes.googleusercontent.com/fonts/css?kit=DFQxm4rd7fRHgM9OTejWVT5Vho6BE7M80rHXEVKqXWegg2XYR88pwOsaJkfiF7cJqK1eFp2GJsVhlMR5BXOPGt79p-q8FYbnKzBwv5-1qoNCoVS-3WOVZC1FrhfZb5Vp);ol{margin:0;padding:0}table td,table th{padding:0}.UmcNyNBsWB-c12{color:#000000;font-weight:700;text-decoration:none;vertical-align:baseline;font-size:12pt;font-family:\"Google Sans\";font-style:normal}.UmcNyNBsWB-c8{padding-top:0pt;padding-bottom:0pt;line-height:1.5;orphans:2;widows:2;text-align:left}.UmcNyNBsWB-c18{color:#000000;text-decoration:none;vertical-align:baseline;font-size:12pt;font-style:normal}.UmcNyNBsWB-c13{color:#000000;text-decoration:none;vertical-align:baseline;font-size:11pt;font-style:normal}.UmcNyNBsWB-c0{margin-left:36pt;padding-top:0pt;padding-bottom:0pt;line-height:1.5;text-al…",
          "link": "https://googleprojectzero.blogspot.com/2024/10/from-naptime-to-big-sleep.html",
          "publishedOn": "2024-11-01T15:12:00.003Z",
          "wordCount": 5377,
          "title": "From Naptime to Big Sleep: Using Large Language Models To Catch Vulnerabilities In Real-World Code",
          "imageUrl": null
        },
        {
          "id": "https://googleprojectzero.blogspot.com/2024/10/the-windows-registry-adventure-4-hives.html",
          "author": null,
          "description": "@import url(https://themes.googleusercontent.com/fonts/css?kit=XGMkxXUZTA64h2imyzu79g);.lst-kix_xrbpc8tfqvva-7>li:before{content:\"\" counter(lst-ctn-kix_xrbpc8tfqvva-7,lower-latin) \". \"}.lst-kix_xrbpc8tfqvva-6>li:before{content:\"\" counter(lst-ctn-kix_xrbpc8tfqvva-6,decimal) \". \"}.lst-kix_phgwltrvdlzg-8>li{counter-increment:lst-ctn-kix_phgwltrvdlzg-8}.lst-kix_xrbpc8tfqvva-0>li:before{content:\"\" counter(lst-ctn-kix_xrbpc8tfqvva-0,decimal) \". \"}.lst-kix_xrbpc8tfqvva-8>li:before{content:\"\" counter(lst-ctn-kix_xrbpc8tfqvva-8,lower-roman) \". \"}.lst-kix_tidwaau4ppsg-2>li:before{content:\"\\0025a0   \"}.lst-kix_xrbpc8tfqvva-1>li:before{content:\"\" counter(lst-ctn-kix_xrbpc8tfqvva-1,lower-latin) \". \"}.lst-kix_tidwaau4ppsg-1>li:before{content:\"\\0025cb   \"}.lst-kix_xrbpc8tfqvva-2>li:before{content:\"\" coun…",
          "link": "https://googleprojectzero.blogspot.com/2024/10/the-windows-registry-adventure-4-hives.html",
          "publishedOn": "2024-10-25T17:30:00.000Z",
          "wordCount": 12265,
          "title": "The Windows Registry Adventure #4: Hives and the registry layout",
          "imageUrl": "https://blogger.googleusercontent.com/img/b/R29vZ2xl/AVvXsEg3DcA4NRlJwRBwZj_EfcUNKjvc_9LuRBEDgidTVSPDGLOqKyspZ1Xl3QNx3n9eXGTHLnRctQ49HyrBmXcRTc-_g2S_vBbm0Uo67bScEqCV15lcRWWb_eNVGb7K7bc9caSF0lKuRDH5GXlJsyMzZ6DqYVkR_JVP8wIYWuqAgUSuXM1x6BXcaJeAZWHADu8/w1200-h630-p-k-no-nu/image3.png"
        }
      ]
    },
    {
      "title": "Carnal0wnage Blog",
      "feedUrl": "https://blog.carnal0wnage.com/feeds/posts/default",
      "siteUrl": "https://blog.carnal0wnage.com/",
      "articles": []
    },
    {
      "title": "SkullSecurity Blog",
      "feedUrl": "https://blog.skullsecurity.org/feed",
      "siteUrl": "https://www.skullsecurity.org/",
      "articles": []
    },
    {
      "title": "Silent Signal Techblog",
      "feedUrl": "https://blog.silentsignal.eu/feed/",
      "siteUrl": "https://blog.silentsignal.eu/",
      "articles": [
        {
          "id": "https://blog.silentsignal.eu/2024/10/28/wcf-net.tcp-pentest/",
          "author": null,
          "description": "There aren’t too many professions in IT that makes professionals learn so many different technologies as pentesting does: one week you are neck-deep in Windows AD, the other you are trying to make sense of some custom thick client protocol in Wireshark, while you are running some webapp scans in the background. On the flipside, time is usually short, resulting in most tools never getting past proof-of-concept quality, causing much headache to practitioners.",
          "link": "https://blog.silentsignal.eu/2024/10/28/wcf-net.tcp-pentest/",
          "publishedOn": "2024-10-27T06:00:00.000Z",
          "wordCount": 2839,
          "title": "Engineering WCF Hacks",
          "imageUrl": "https://blog.silentsignal.eu/assets/img//img/Phidippides.jpg"
        }
      ]
    },
    {
      "title": "Technical Blog Archives - NetSPI",
      "feedUrl": "https://www.netspi.com/blog/technical-blog/feed/",
      "siteUrl": null,
      "articles": [
        {
          "id": "https://www.netspi.com/?p=25760",
          "author": "Michelle Eggers",
          "description": "Explore how modern penetration testing tools uncover vulnerabilities in mainframe applications, highlighting the need for methodical techniques and regular testing to protect these critical systems from threats.\nThe post Hacking CICS: 7 Ways to Defeat Mainframe Applications appeared first on NetSPI.",
          "link": "https://www.netspi.com/blog/technical-blog/mainframe-penetration-testing/hacking-cics-applications/",
          "publishedOn": "2024-10-24T14:22:00.000Z",
          "wordCount": 3506,
          "title": "Hacking CICS: 7 Ways to Defeat Mainframe Applications",
          "imageUrl": "https://www.netspi.com/wp-content/uploads/2024/10/10.24.24_TECH_Hacking-CICS-Applications_Social.webp"
        }
      ]
    },
    {
      "title": "All Posts - Malicious Link - Blog by mubix - Rob Fuller",
      "feedUrl": "https://malicious.link/post/index.xml",
      "siteUrl": "https://malicious.link/posts/",
      "articles": []
    },
    {
      "title": "Corelan Cybersecurity Research",
      "feedUrl": "https://www.corelan.be/index.php/feed/",
      "siteUrl": "https://www.corelan.be",
      "articles": []
    },
    {
      "title": "IMQ Minded Security Blog",
      "feedUrl": "https://blog.mindedsecurity.com/feeds/posts/default",
      "siteUrl": "https://blog.mindedsecurity.com/",
      "articles": []
    },
    {
      "title": "Didier Stevens",
      "feedUrl": "https://blog.didierstevens.com/feed/",
      "siteUrl": "https://blog.didierstevens.com",
      "articles": [
        {
          "id": "http://blog.didierstevens.com/?p=10580",
          "author": "Didier Stevens",
          "description": "I have a classic wired doorbell at home: the 230V powered transformer produces 12V on its secondary winding. The circuit on that secondary winding powers an electromechanical doorbell via a pushbutton. The bell rings (“ding-dong”) when the button is pushed (closing the circuit). Since losses occur in all transformers, I wanted to know how much […]",
          "link": "https://blog.didierstevens.com/2024/11/03/quickpost-the-electric-energy-consumption-of-a-wired-doorbell/",
          "publishedOn": "2024-11-03T00:00:00.000Z",
          "wordCount": 3717,
          "title": "Quickpost: The Electric Energy Consumption Of A Wired Doorbell",
          "imageUrl": "https://blog.didierstevens.com/wp-content/uploads/2024/11/image.png"
        },
        {
          "id": "http://blog.didierstevens.com/?p=10604",
          "author": "Didier Stevens",
          "description": "This small update brings support for ZIP 2.0 via the pyzipper module. strings_V0_0_10.zip (http)MD5: F98C9D646A83322BC9226673D79FFE2DSHA256: 7C062616C95DE5DDF0792A8CE9CA0CCA14FF43A8786DCED043193B729361BB59",
          "link": "https://blog.didierstevens.com/2024/11/02/update-strings-py-version-0-0-10/",
          "publishedOn": "2024-11-02T08:28:43.000Z",
          "wordCount": 3295,
          "title": "Update: strings.py Version 0.0.10",
          "imageUrl": "https://s0.wp.com/i/blank.jpg"
        },
        {
          "id": "http://blog.didierstevens.com/?p=10536",
          "author": "Didier Stevens",
          "description": "This is a post for version updates 0.0.8 and 0.0.9. Added command officeprotection and option -j for pretty. xmldump_V0_0_9.zip (http)MD5: 6EC24845F61FE3F9AC111BFEC69B53C7SHA256: B1F3F6B153367AEF83C42B8002E7EA8A650B7E7092D97ACA288F2B62A93D4B9D",
          "link": "https://blog.didierstevens.com/2024/11/02/update-xmldump-py-version-0-0-9/",
          "publishedOn": "2024-11-02T07:45:28.000Z",
          "wordCount": 3303,
          "title": "Update: xmldump.py Version 0.0.9",
          "imageUrl": "https://s0.wp.com/i/blank.jpg"
        },
        {
          "id": "http://blog.didierstevens.com/?p=10597",
          "author": "Didier Stevens",
          "description": "This small update brings support for ZIP 2.0 via the pyzipper module and fixes a /ObjStm parsing bug. pdf-parser_V0_7_10.zip (http)MD5: 2EB627850B215F3B9D1532880DA4E8DBSHA256: 17F9EA0B4CADF0143AA52E1406EEC7769DA1B860375440D8492ADC113300CDFD",
          "link": "https://blog.didierstevens.com/2024/11/02/update-pdf-parser-py-version-0-7-10/",
          "publishedOn": "2024-11-02T07:21:15.000Z",
          "wordCount": 3303,
          "title": "Update: pdf-parser.py Version 0.7.10",
          "imageUrl": "https://s0.wp.com/i/blank.jpg"
        },
        {
          "id": "http://blog.didierstevens.com/?p=10593",
          "author": "Didier Stevens",
          "description": "This small update brings support for ZIP 2.0 via the pyzipper module. pdfid_v0_2_9.zip (http)MD5: 57C5AE391116B79E1F90FFF7BBB36331SHA256: 1FC540C9EB9722C1E430262DFF64F39606A7B4838DDE9F70EE3C56526EDEF5FF",
          "link": "https://blog.didierstevens.com/2024/11/02/update-pdfid-py-version-0-2-9/",
          "publishedOn": "2024-11-02T07:19:36.000Z",
          "wordCount": 3297,
          "title": "Update: pdfid.py Version 0.2.9",
          "imageUrl": "https://s0.wp.com/i/blank.jpg"
        },
        {
          "id": "http://blog.didierstevens.com/?p=10576",
          "author": "Didier Stevens",
          "description": "Here is an overview of content I published in October: Blog posts: Quickpost: The Electric Energy Consumption Of LLMs Quickpost: The Electric Energy Consumption Of LLMs ? No GPU SANS ISC Diary entries: Wireshark 4.4.1 Released",
          "link": "https://blog.didierstevens.com/2024/11/01/overview-of-content-published-in-october-10/",
          "publishedOn": "2024-11-01T14:42:48.000Z",
          "wordCount": 3320,
          "title": "Overview of Content Published in October",
          "imageUrl": "https://s0.wp.com/i/blank.jpg"
        },
        {
          "id": "http://blog.didierstevens.com/?p=10565",
          "author": "Didier Stevens",
          "description": "A friend asked me if I had used a GPU for my tests described in blog post “Quickpost: The Electric Energy Consumption Of LLMs”. Because he had tried running an LLM on a machine without GPU, and it was too slow. I did a quick test, just redoing previous test but without GPU (by setting […]",
          "link": "https://blog.didierstevens.com/2024/10/08/quickpost-the-electric-energy-consumption-of-llms-no-gpu/",
          "publishedOn": "2024-10-08T00:00:00.000Z",
          "wordCount": 3440,
          "title": "Quickpost: The Electric Energy Consumption Of LLMs – No GPU",
          "imageUrl": "https://blog.didierstevens.com/wp-content/uploads/2024/10/screen10.bmp"
        },
        {
          "id": "http://blog.didierstevens.com/?p=10545",
          "author": "Didier Stevens",
          "description": "I’ve read claims that AI queries require a lot of energy. Today I heard another claim on the Nerdland Podcast (a popular science podcast here in Belgium): “letting ChatGPT write an email of 100 words requires 70 Wh” (if you’re interested, that’s said at 00:28:05 in this episode). I though to myself: that’s a lot […]",
          "link": "https://blog.didierstevens.com/2024/10/06/quickpost-the-electric-energy-consumption-of-llms/",
          "publishedOn": "2024-10-06T19:17:24.000Z",
          "wordCount": 3718,
          "title": "Quickpost: The Electric Energy Consumption Of LLMs",
          "imageUrl": "https://blog.didierstevens.com/wp-content/uploads/2024/10/screen09.bmp"
        }
      ]
    },
    {
      "title": "HackerOne",
      "feedUrl": "https://www.hackerone.com/blog.rss",
      "siteUrl": "https://www.hackerone.com/",
      "articles": [
        {
          "id": "https://hackerone.com/ai/who-owns-ai-risk",
          "author": "Blake Entrekin",
          "description": "Explore who is and should be accountable for AI risk within organizations and how to empower them to take this significant responsibility.",
          "link": "https://www.hackerone.com/ai/who-owns-ai-risk",
          "publishedOn": "2024-10-30T22:35:49.000Z",
          "wordCount": 1572,
          "title": "Who Should Own AI Risk at Your Organization?",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/who%20owns%20ai%20risk%20header%402x.png"
        },
        {
          "id": "https://hackerone.com/public-policy/securing-elections-through-vulnerability-testing",
          "author": "Michael Woolslayer",
          "description": "Learn how security researchers are securing election technology though vulnerability testing and disclosure.",
          "link": "https://www.hackerone.com/public-policy/securing-elections-through-vulnerability-testing",
          "publishedOn": "2024-10-28T22:55:07.000Z",
          "wordCount": 1464,
          "title": "Securing Our Elections Through Vulnerability Testing and Disclosure",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/BlogImages_763x462_BlogImage_Policy-2.png"
        },
        {
          "id": "https://hackerone.com/vulnerability-management/hackerone-benchmarks",
          "author": "Naz Bozdemir",
          "description": "Learn about HackerOne Benchmarks, a set of features designed to provide insights for optimizing your security program’s performance.",
          "link": "https://www.hackerone.com/vulnerability-management/hackerone-benchmarks",
          "publishedOn": "2024-10-24T21:29:54.000Z",
          "wordCount": 1799,
          "title": "Measure, Compare, and Enhance Security Programs with HackerOne Benchmarks",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/benchmarks%20blog%20header%402x.png"
        },
        {
          "id": "https://hackerone.com/penetration-testing/aws-security-configuration",
          "author": "Jaimin Gohel",
          "description": "Learn the ins and outs of AWS security configuration testing and why community-driven PTaaS is the best method.",
          "link": "https://www.hackerone.com/penetration-testing/aws-security-configuration",
          "publishedOn": "2024-10-23T20:53:26.000Z",
          "wordCount": 2697,
          "title": "AWS Security Configuration Review and Best Practices",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/aws%20security%20config%20review%20blog%20header%402x.png"
        },
        {
          "id": "https://hackerone.com/vulnerability-management/cryptographic-failures",
          "author": "Andrew Pratt",
          "description": "Cryptographic failures: what are they and why are they considered so concerning by the OWASP Top 10?",
          "link": "https://www.hackerone.com/vulnerability-management/cryptographic-failures",
          "publishedOn": "2024-10-21T21:01:41.000Z",
          "wordCount": 3367,
          "title": "OWASP Top 10: The Risk of Cryptographic Failures",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/cryptographic%20failures%20blog%20header%402x.png"
        },
        {
          "id": "https://hackerone.com/vulnerability-management/gaining-rce-through-imagemagick",
          "author": "Andrew Pratt",
          "description": "",
          "link": "https://www.hackerone.com/vulnerability-management/gaining-rce-through-imagemagick",
          "publishedOn": "2024-10-17T20:36:25.000Z",
          "wordCount": 2628,
          "title": "Vulnerability Deep Dive: Gaining RCE Through ImageMagick With Frans Rosen",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/RCE%20imagemagick%20blog%20header%402x.png"
        },
        {
          "id": "https://hackerone.com/public-policy/global-vulnerability-policy-map",
          "author": "Michael Woolslayer",
          "description": "Use HackerOne's Global Vulnerability Policy Map to keep up with evolving VDP mandates and recommendations.",
          "link": "https://www.hackerone.com/public-policy/global-vulnerability-policy-map",
          "publishedOn": "2024-10-14T22:33:34.000Z",
          "wordCount": 1257,
          "title": "How To Use HackerOne’s Global Vulnerability Policy Map",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/HAC_Blog_Photo-2_Header_763x462%402x.png"
        },
        {
          "id": "https://hackerone.com/public-policy/eu-council-cyber-resilience-act",
          "author": "Ilona Cohen",
          "description": "Learn about the EU Council's Cyber Resilience Act, where we're headed, and what we believe should happen next.",
          "link": "https://www.hackerone.com/public-policy/eu-council-cyber-resilience-act",
          "publishedOn": "2024-10-11T21:36:57.000Z",
          "wordCount": 1143,
          "title": "European Council Adopts Cyber Resilience Act",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/BlogImages_763x462_BlogImage_Policy-5.png"
        },
        {
          "id": "https://hackerone.com/ai/ai-security-readiness-quiz",
          "author": "Naz Bozdemir",
          "description": "Learn how HackerOne's AI Risk Readiness Self-Assessment Tool helps measure your AI security and compliance preparedness.",
          "link": "https://www.hackerone.com/ai/ai-security-readiness-quiz",
          "publishedOn": "2024-10-10T21:23:29.000Z",
          "wordCount": 1635,
          "title": "Measure Your AI Risk Preparedness with This Interactive Self-Assessment Tool",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/AI%20Quiz%20Post_%20Blog%20Header%20%28763%20x%20462%20px%29.png"
        },
        {
          "id": "https://hackerone.com/culture-and-talent/recruitment-process-what-expect-when-you-apply-hackerone",
          "author": "Marina Briones",
          "description": "",
          "link": "https://www.hackerone.com/culture-and-talent/recruitment-process-what-expect-when-you-apply-hackerone",
          "publishedOn": "2024-10-09T22:58:10.000Z",
          "wordCount": 1524,
          "title": "The Recruitment Process: What to Expect When You Apply at HackerOne",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/H1-303_Brent_Andeck_Photo-292.jpg"
        },
        {
          "id": "https://hackerone.com/penetration-testing/internal-network-pentests",
          "author": "Paul De Baldo V",
          "description": "Learn how to optimize internal network pentesting through community-driven pentesting as a service (PTaaS).",
          "link": "https://www.hackerone.com/penetration-testing/internal-network-pentests",
          "publishedOn": "2024-10-09T17:29:56.000Z",
          "wordCount": 3110,
          "title": "Pentesting for Internal Networks",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/PTaaS_BlogImage10.jpg"
        },
        {
          "id": "https://hackerone.com/vulnerability-management/idor-vulnerability-deep-dive",
          "author": "Andrew Pratt",
          "description": "Learn the ins and outs of IDOR vulnerabilities and how one exploitation led to malicious user profile modification.",
          "link": "https://www.hackerone.com/vulnerability-management/idor-vulnerability-deep-dive",
          "publishedOn": "2024-10-08T20:53:50.000Z",
          "wordCount": 2173,
          "title": "How an IDOR Vulnerability Led to User Profile Modification",
          "imageUrl": "https://www.hackerone.com/sites/default/files/2024-10/idor%20blog%20header%402x.png"
        }
      ]
    },
    {
      "title": "Penetration Testing Lab",
      "feedUrl": "https://pentestlab.blog/feed/",
      "siteUrl": "https://pentestlab.blog",
      "articles": []
    },
    {
      "title": "Active Directory Security",
      "feedUrl": "https://adsecurity.org/?feed=rss2",
      "siteUrl": "https://adsecurity.org",
      "articles": []
    },
    {
      "title": "Tyranid's Lair",
      "feedUrl": "https://www.tiraniddo.dev/feeds/posts/default",
      "siteUrl": "https://www.tiraniddo.dev/",
      "articles": []
    },
    {
      "title": "Zero Day Initiative - Blog",
      "feedUrl": "https://www.zerodayinitiative.com/blog?format=rss",
      "siteUrl": "https://www.thezdi.com/blog/",
      "articles": [
        {
          "id": "5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:671b4e7ec6edd2692dc4b79b",
          "author": "Dustin Childs",
          "description": "It’s the final day of our first ever Pwn2Own Ireland. After three days of exploitation, we have awarded $993,625, so it seem likely we will pass the $1,000,000 mark. Still, there are no guarantees in Pwn2Own, so stay tuned for all the results.\nAnd we are done! Over the four days of the contest, we awarded $1,066,625 for over 70 0-day vulnerabilities. That makes four contests in a row that exceeded the million-dollar mark. Congratulations to the Viettel Cyber Security team for winning Master of Pwn with 33 points and $205,000. Our next event will be January 22-24, 2025 in Tokyo as we return for the second Pwn2Own Automotive. We hope to see you there.\nCOLLISION - A bug collision sends us over one million dollars for the contest. Team Smoking Barrels used two bugs to exploit the True NAS X, but they had been seen before in the contest. It still counts, as they earn $20,000 & 2 Master of Pwn points. \nSUCCESS/COLLISION - Chris Anastasio (@mufinnnnnnn) and Fabius Watson (@FabiusArtrel) of Team Cluck used 6 bugs to go from the QNAP QHora-322 to the Lexmark CX331adwe, but 1 had already been seen in the contest. They still earn $23,000 and 9.25 Master of Pwn points. \nCOLLISION - The Viettel Cyber Security (@vcslab) team ends their run with a collision. They use 2 bugs to exploit the TrueNAS Mini X. They still earn $20,000 and 2 Master of Pwn points. \nSUCCESS - Our final attempt of Pwn2Own Ireland is confirmed! PHP Hooligans / Midnight Blue (@midnightbluelab) used an integer overflow to exploit the Lexmark printer and play us a tune. They earn $10,000 and 2 Master of Pwn points.",
          "link": "https://www.thezdi.com/blog/2024/10/25/pwn2own-ireland-2024-day-four-and-master-of-pwn",
          "publishedOn": "2024-10-25T07:56:05.000Z",
          "wordCount": null,
          "title": "Pwn2Own Ireland 2024: Day Four and Master of Pwn",
          "itunes": {},
          "imageUrl": null
        },
        {
          "id": "5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:6719f167624abf60aabfd6f5",
          "author": "Dustin Childs",
          "description": "Welcome to Day Three of our first ever Pwn2Own Ireland competition! We’ve already awarded $874,875, and we have 15 attempts left to go. Will we hit the $1,000,000 mark or will all remaining attempts end up in bug collisions? Stay tuned to find out. All times are Irish Standard Time (GMT +1:00).\nSUCCESS - Ha The Long with Ha Anh Hoang of Viettel Cyber Security (@vcslab) used a single command injection bug to exploit the QNAP TS-464 NAS. Their fourth-round win nets them $10,000 and 4 Master of Pwn points.\nFAILURE - Unfortunately, Sina Kheirkhah (@SinSinology) and Enrique Castillo (@hyprdude) of Summoning Team (@SummoningTeam) could not get their exploit of the Ubiquiti AI Bullet working within the time allotted.\nSUCCESS - Pumpkin Chang (@u1f383) and Orange Tsai (@orange_8361) from the DEVCOR…",
          "link": "https://www.thezdi.com/blog/2024/10/24/pwn2own-ireland-2024-day-three-results",
          "publishedOn": "2024-10-24T07:07:07.000Z",
          "wordCount": null,
          "title": "Pwn2Own Ireland 2024: Day Three Results",
          "itunes": {},
          "imageUrl": null
        },
        {
          "id": "5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:6718b57736f942652a7cbbb0",
          "author": "Dustin Childs",
          "description": "Welcome back to Pwn2Own Ireland 2024! Yesterday, we awarded $516,250 for over 50 unique 0-day bugs. Today looks to be just as exciting with attempts on phones, cameras, printers, and smart speakers. We’ll be updating this blog in real time as results become available. We have a full schedule of attempts today, so stay tuned! All times are Irish Standard Time (GMT +1:00).\nThat's a wrap on Day 2 of Pwn2Own Ireland! Today, we awarded $358,625 - which brings the event total to $847,875. The Viettel Cyber Security team has a commanding lead for Master of Pwn, but with two days left, there still could be changes.\nSUCCESS - Pham Tuan Son (@Little_timmy) and ExLuck (@ExLuck99) from ANHTUD used a single stack-based overflow to exploit the Canon imageCLASS MF656Cdw printer. Their second-round win ea…",
          "link": "https://www.thezdi.com/blog/2024/10/23/pwn2own-ireland-2024-day-two-results",
          "publishedOn": "2024-10-23T08:39:30.000Z",
          "wordCount": null,
          "title": "Pwn2Own Ireland 2024: Day Two Results",
          "itunes": {},
          "imageUrl": null
        },
        {
          "id": "5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:671752dcdbd53841450f5e95",
          "author": "Dustin Childs",
          "description": "Welcome to the first day of Pwn2Own Ireland 2024! We have four tremendous days of research planned, including multiple SOHO attempts. We’ll be updating this blog in real time as results become available. We have a full schedule of attempts today, so stay tuned! All times are Irish Standard Time (GMT +1:00).\nThat's a wrap on Day 1 of #Pwn2Own Ireland! We awarded $486,250 for 52 unique 0-days. Viettel Cyber Security (@vcslab) has an early lead for Master of Pwn with 13 points, but there's a lot of contest left to go. Stay tuned for all of the latest results as Pwn2Own Ireland continues.\nSUCCESS - phudq and namnp from Viettel Cyber Security (@vcslab) used a stack-based buffer overflow and an untrusted pointer deref to exploit the Lorex 2K WiFi camera. They earn $30,000 and 3 Master of Pwn poi…",
          "link": "https://www.thezdi.com/blog/2024/10/22/pwn2own-ireland-day-one-the-results",
          "publishedOn": "2024-10-22T07:25:08.000Z",
          "wordCount": null,
          "title": "Pwn2Own Ireland Day One - The Results",
          "itunes": {},
          "imageUrl": null
        },
        {
          "id": "5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:6711356985ff0d737465d6d6",
          "author": "Dustin Childs",
          "description": "Welcome to Pwn2Own Ireland 2024 - our first event ever from the emerald isle! This year’s contest is set to be one of our largest ever - both in terms of entries and potential prizes. If everything hits, we will end up paying out over $1,000,000 in cash and prizes. We’ve got four days of exciting competition ahead. As always, we began our contest with a random drawing to determine the order of attempts. If you missed it, you can watch the replay here.\nThe complete schedule for the contest is below (all times Irish Standard Time [UTC +1:00]). \nNote: All times subject to change\n\n          - Day One \n          - Day Two \n          - Day Three \n          - Day Four \n\nDay One\nTuesday, October 22 – 0900\nJack Dates of RET2 Systems (@ret2systems) targeting Sonos Era 300 in the Smart Speakers categ…",
          "link": "https://www.thezdi.com/blog/2024/10/22/pwn2own-ireland-the-full-schedule",
          "publishedOn": "2024-10-21T17:02:59.000Z",
          "wordCount": null,
          "title": "Pwn2Own Ireland - The Full Schedule",
          "itunes": {},
          "imageUrl": null
        },
        {
          "id": "5894c269e4fcb5e65a1ed623:58a5b38cb3db2bd67b608658:670568dfdef3e375888ba8fa",
          "author": "Dustin Childs",
          "description": "It’s the spooky season, and there’s nothing spookier than security patches – at least in my world. Microsoft and Adobe have released their latest patches, and no bones about it, there are some skeletons in those closets. Take a break from your regular activities and join us as we review the details of their latest security alerts. If you’d rather watch the full video recap covering the entire release, you can check it out here:\nAdobe Patches for October 2024\nFor October, Adobe released nine patches addressing 52 CVEs in Adobe Substance 3D Painter, Commerce, Dimension, Animate, Lightroom, InCopy, InDesign, Substance 3D Stager, and Adobe FrameMaker. Two of these bugs were submitted through the ZDI program. The largest and most urgent of these patches covers 22 CVEs in Adobe Commerce, which i…",
          "link": "https://www.thezdi.com/blog/2024/10/8/the-october-2024-security-update-review",
          "publishedOn": "2024-10-08T17:54:47.000Z",
          "wordCount": null,
          "title": "The October 2024 Security Update Review",
          "itunes": {},
          "imageUrl": null
        }
      ]
    },
    {
      "title": "research.securitum.com",
      "feedUrl": "https://research.securitum.com/feed/",
      "siteUrl": "https://research.securitum.com/",
      "articles": []
    },
    {
      "title": "Winsider Seminars & Solutions Inc.",
      "feedUrl": "https://windows-internals.com/feed/",
      "siteUrl": "https://windows-internals.com",
      "articles": []
    },
    {
      "title": "Alexander Popov",
      "feedUrl": "https://a13xp0p0v.github.io/feed.xml",
      "siteUrl": "https://a13xp0p0v.github.io/",
      "articles": []
    },
    {
      "title": "Grsecurity Blog RSS Feed",
      "feedUrl": "https://grsecurity.net/blog.rss",
      "siteUrl": "https://www.grsecurity.net/blog.rss",
      "articles": [
        {
          "id": "https://www.grsecurity.net/cross_process_spectre_exploitation.php",
          "author": null,
          "description": "In this blog, researcher Johannes Wikner details the first end-to-end cross-process Spectre exploit against a real userland target.",
          "link": "https://www.grsecurity.net/cross_process_spectre_exploitation.php",
          "publishedOn": "2024-10-18T04:00:00.000Z",
          "wordCount": 5324,
          "title": "Cross-Process Spectre Exploitation",
          "imageUrl": null
        },
        {
          "id": "https://www.grsecurity.net/cross_process_spectre_exploitation.php",
          "author": null,
          "description": "In this blog, researcher Johannes Wikner details the first end-to-end cross-process Spectre exploit against a real userland target.",
          "link": "https://www.grsecurity.net/cross_process_spectre_exploitation.php",
          "publishedOn": "2024-10-18T04:00:00.000Z",
          "wordCount": 5324,
          "title": "Cross-Process Spectre Exploitation",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Zeta-Two.com",
      "feedUrl": "https://zeta-two.com/feed.xml",
      "siteUrl": "https://zeta-two.com/",
      "articles": []
    },
    {
      "title": "NCC Group Research Blog",
      "feedUrl": "https://research.nccgroup.com/feed/",
      "siteUrl": "https://research.nccgroup.com",
      "articles": [
        {
          "id": "https://research.nccgroup.com/?p=34806",
          "author": "R.Rivera",
          "description": "We’re excited to announce that all of NCC Group’s latest research findings and articles are now hosted on our website at the following link: NCC Group Research Blog. (https://www.nccgroup.com/us/research-blog/) To stay up-to-date with our latest research, you can also subscribe to our RSS feed here: NCC Group Research Blog RSS Feed. (https://www.nccgroup.com/us/research-blog/feed/) Be sure to […]",
          "link": "https://research.nccgroup.com/2024/08/13/new-website-address-and-rss-feed/",
          "publishedOn": "2024-08-13T15:39:47.000Z",
          "wordCount": 18867,
          "title": "New website address and RSS Feed",
          "imageUrl": "https://i0.wp.com/research.nccgroup.com/wp-content/uploads/2023/03/cropped-NCC-Group-Favicon.png?fit=512%2C512&ssl=1"
        }
      ]
    },
    {
      "title": "Security Blog | Praetorian",
      "feedUrl": "https://www.praetorian.com/blog/feed/",
      "siteUrl": "https://www.praetorian.com/blog/",
      "articles": [
        {
          "id": "https://www.praetorian.com/?p=3223",
          "author": "Justin Copeland",
          "description": "For years, cybersecurity teams have fought a persistent battle: overwhelming noise generated by vulnerability tools. It’s a familiar scenario – overtaxed security teams drowning in alerts, many leading to false positives or low-priority issues. Fatigued and lacking priorities, they risk missing critical vulnerabilities. While scanners aren’t intentionally built to generate needless noise, it’s an inevitable […]\nThe post Cutting Through the Noise: Chariot’s Zero False Positive Guarantee appeared first on Praetorian.",
          "link": "https://www.praetorian.com/blog/cutting-through-the-noise-chariots-zero-false-positive-guarantee/",
          "publishedOn": "2024-11-01T14:23:07.000Z",
          "wordCount": 4441,
          "title": "Cutting Through the Noise: Chariot’s Zero False Positive Guarantee",
          "imageUrl": "https://www.praetorian.com/wp-content/uploads/2024/10/CTEM-Waterfall.png"
        },
        {
          "id": "https://www.praetorian.com/?p=3206",
          "author": "Kenneth King",
          "description": "Overview Many vulnerabilities in modern web applications occur due to the improper handling of user-supplied input. Command injection, cross-site scripting, XML External Entity (XXE) injections, and SQL injections all emerge from the downstream effects of unsanitized user input. SQL injection has held a high-ranking spot on the OWASP top 10 list since its inception. Despite […]\nThe post Identifying SQL Injections in a GraphQL API appeared first on Praetorian.",
          "link": "https://www.praetorian.com/blog/identifying-sql-injections-in-a-graphql-api/",
          "publishedOn": "2024-10-15T19:17:46.000Z",
          "wordCount": 4495,
          "title": "Identifying SQL Injections in a GraphQL API",
          "imageUrl": "https://www.praetorian.com/wp-content/uploads/2024/10/sql-master-hero.png"
        }
      ]
    },
    {
      "title": "Rhino Security Labs",
      "feedUrl": "https://rhinosecuritylabs.com/feed/",
      "siteUrl": "https://rhinosecuritylabs.com",
      "articles": [
        {
          "id": "https://rhinosecuritylabs.com/?p=25394",
          "author": "Tyler Ramsbey",
          "description": "The post CloudGoat: New Scenario and Walkthrough (sns_secrets) appeared first on Rhino Security Labs.",
          "link": "https://rhinosecuritylabs.com/research/cloudgoat-sns_secrets/",
          "publishedOn": "2024-10-15T13:00:00.000Z",
          "wordCount": 1692,
          "title": "CloudGoat: New Scenario and Walkthrough (sns_secrets)",
          "imageUrl": "https://rhinosecuritylabs.com/wp-content/uploads/2024/10/Screenshot-2024-10-10-at-3.05.54 PM.png"
        }
      ]
    },
    {
      "title": "phoenhex team",
      "feedUrl": "https://phoenhex.re/feed.xml",
      "siteUrl": "https://phoenhex.re/",
      "articles": []
    },
    {
      "title": "secret club",
      "feedUrl": "https://secret.club/feed.xml",
      "siteUrl": "https://secret.club/",
      "articles": [
        {
          "id": "https://secret.club/2024/10/21/unnecessarily-exhaustice-rca.html",
          "author": null,
          "description": "Compilers are complicated. You just won’t believe how vastly, hugely, mind-bogglingly complicated they are. I mean, you may think C build systems are painful, but they’re just peanuts to compilers. - Douglas Adams, probably This blog post assumes you have some knowledge of LLVM internals - I’ll try to fill in some of the lesser-known gaps but there are likely some other, better resources out there for learning about that. I have only one other post on this blog at the time of writing. It describes a somewhat boring, easily-explained missed optimization in one of the core components of LLVM with some actual, real-world implications. This blog post, although it follows roughly the same format, is the exact opposite: An exhaustive analysis of a miscompilation that impacted basically no-one Introduction &amp; disclaimer Is all the complexity in modern-day optimizing compilers warranted? Probably not. Take LLVM, for example - once you get to the backends it might as well be 200 compilers in a trench coat. Picture this: it’s two in the morning and you’ve figured out exactly what went wrong after several weeks of debugging. You’re on your fifth coffee and have an idea for a target-independent patch. There’s just one small problem - you’d have to reach out to other overworked people from other companies, convince them that giving you some of their extremely limited time is worthwhile, wait for a bit, address any and all potential concerns, wait a bit more, and Lord help you if something breaks on a piece of hardware you don’t have access to. Alternatively, you could just add another if statement, ping a coworker to fast-track code review since the change is restricted to your little llvm/lib/Target sandbox, and be on your merry way. Repeat a few times a day and now your Modular™ framework ends up with a bunch of duplicated, convoluted, unnecessarily target-dependent code generation logic. Yes, quite a bit of the complexity is the result of Conway’s Law and the inevitable bitrot of a decades-old codebase. That being said, there is still an incredible amount of inherent messiness when targeting dozens of architectures in a (mostly) correct and performant way. Nobody is ever going to have a full, deep view of the entire system at once, and even if they did it would be out of date by the next Revert \"[NFC] ...\" commit. Every computer on the planet is a compiler fuzzer We tame the combinatorial explosion of potentially-buggy interactions through the kind of extraordinarily exhaustive testing only possible in the information age. Even a simple “Hello, world!” is a reliability test of the compiler, the linker, the runtime, the operating system, the terminal, any rendering middleware (which might also be running LLVM to compile shaders!), display drivers, the underlying hardware itself, and all software used in the process of building any of that. As such, you can be reasonably confident that release versions of production compilers, when using the flags and target architectures everyone else does, will probably not break anything. That’s not to say stuff doesn’t get through the cracks - yarpgen, alive2, Csmith, and similar tools would not have a long list of trophies otherwise - but those tools are also now just a part of this testing process too. A direct corollary of this is that bugs are regularly introduced in mainline branches, even by seasoned developers, and fixed whenever this exhaustive testing happens and people actually care about fixing them. Anyway, take a look at this commit: https://github.com/llvm/llvm-project/commit/c6e01627acf8591830ee1d211cff4d5388095f3d It is extremely important to emphasize: This committer knows what they’re doing! They’re good at their job! It’s just the nature of compilers and llvm-project/main; shit happens. The miscompile was found and fixed in roughly a week, and if this is all there was to it then we wouldn’t be here. The funniest compiler bug Here’s a bug. https://issues.chromium.org/issues/336399264 Credits to @dougall. As a summary, here’s what happened. Compile clang with the commit right before the fix above - This is generally called a “stage 1” build Bootstrap clang with the newly-compiled clang - This is a “stage 2” build Build the repro script attached with ASAN and fuzzing harnesses on when targeting AArch64 Get a miscompile in the output. Due to the Clang version being known-buggy and swapped out pretty much immediately, the stage 2 miscompile was noticed by pretty much nobody except people employed at companies that pay them to look at this stuff. This is the system working as intended! Unfortunately, I am a complete sucker for bugs like this but do not get paid to look at them. I wanted to figure out what went wrong here because it’s such a great example of the emergent complexity that comes with modern-day compilers. hear that? it’s the sound of my free time going down the drain for the next week. fwsssssssshhhhhhhhhhhhhhhhhhhhhhhh There’s some good news: this is a bug in the loop vectorizer, meaning our stage2 compiler is probably not going to be broken in the impossible-to-debug some-target-specific-register-allocation-thing-is-cooked-somehow way. That may not always be the case (especially if undef/poison are involved) but it seems like we’re going to get a nice, deterministic problem in the mostly-sorta-target-independent part of the pipeline. undef and poison are, roughly, LLVM’s way of modelling the set of all possible values and a deferred form of undefined behavior. I will not be explaining how this is formalized or what the implications for compiler transforms are. It gets weird. Please do not ask. Unfortunately, there is also some bad news: this is a bug in the loop vectorizer. The vectorizer is probably the single most per-target-tuned pass in the entirety of the generic optimization pipeline. That means we’re probably going to have some trouble convincing the compiler to deliberately emit the wrong instruction sequence on platforms without cross-compiling. Cross-compiling is not fun. I do not want to cross-compile, so I would like to try to coax the compiler into emitting the right (wrong?) code on X86 if possible. Foreshadowing is a narrative device in which- Reproducing the bug with somewhat-helpful debugging information For now, it’s important to just reproduce the original bug with the aforementioned stage1/stage2 executables in exact the same build environment. While we’re at it, let’s tack on some useful debugging options that will hopefully help us down the line: -print-after=loop-vectorize lets us print out a textual dump of the IR whenever the loop vectorizer pass has finished -ir-dump-directory lets us redirect this output to a folder somewhere This is going to generate a lot of text files. That’s okay, though, because computers are really fast and it doesn’t impact the build times in any meaningful way if we use an SSD. Simply run this easy-to-remember set of CMake incantations for the stage1 and stage2 builds: LLVM_DIR=$(pwd) cmake -S llvm -B build/stage1 -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=clang -DLLVM_TARGETS_TO_BUILD=AArch64 cmake --build build/stage1 cmake -S llvm -B build/stage2 -G Ninja -DCMAKE_BUILD_TYPE=Release -DLLVM_ENABLE_PROJECTS=clang -DLLVM_TARGETS_TO_BUILD=AArch64 -DCMAKE_C_COMPILER=\"$(realpath build/stage1/bin)/clang\" -DCMAKE_CXX_COMPILER=\"$(realpath build/stage1/bin)/clang++\" -DCMAKE_C_FLAGS=\"-mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$LLVM_DIR/build/stage2/ir_dump\" -DCMAKE_CXX_FLAGS=\"-mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$LLVM_DIR/build/stage2/ir_dump\" cmake --build build/stage2 Unfortunately, I do not have an Apple device – as such, I would like to thank an anonymous friend with an M3 laptop for taking the time to help me with this. Time to test. $ ./build/stage1/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - $ ./build/stage2/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum cf9f89efb0549051409d2559441404b1e627c73f11e763c975be20fcd7fcda34 - Okay, we’ve successfully reproduced the bug! We’re not really interested in why this code specifically breaks at runtime - it’s just a minimized reproducer - we just wanted to make sure we could catch it at all. With a repro in hand, we immediately notice some funky changes: Output difference &lt; .section __TEXT,__literal16,16byte_literals &lt; .p2align 4, 0x0 ; -- Begin function _ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i &lt; lCPI1_0: &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; .byte 8 ; 0x8 &lt; .byte 9 ; 0x9 &lt; .byte 10 ; 0xa &lt; .byte 11 ; 0xb &lt; .byte 12 ; 0xc &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; .byte 255 ; 0xff &lt; lCPI1_1: &lt; .byte 16 ; 0x10 &lt; .byte 17 ; 0x11 &lt; .byte 18 ; 0x12 &lt; .byte 19 ; 0x13 &lt; .byte 20 ; 0x14 &lt; .byte 21 ; 0x15 &lt; .byte 22 ; 0x16 &lt; .byte 23 ; 0x17 &lt; .byte 8 ; 0x8 &lt; .byte 9 ; 0x9 &lt; .byte 10 ; 0xa &lt; .byte 11 ; 0xb &lt; .byte 12 ; 0xc &lt; .byte 29 ; 0x1d &lt; .byte 30 ; 0x1e &lt; .byte 31 ; 0x1f &lt; .section __TEXT,__text,regular,pure_instructions &lt; .globl __ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i --- &gt; .globl __ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i ; -- Begin function _ZN3re28Compiler9PostVisitEPNS_6RegexpENS_4FragES3_PS3_i 63,71c26,34 &lt; sub sp, sp, #192 [...] &lt; ldr q0, [x8, lCPI1_1@PAGEOFF] &lt; str q0, [sp] ; 16-byte Folded Spill &lt; adrp x28, l___sancov_gen_.2@PAGE+5 &lt; add x8, sp, #48 &lt; ld1.2d { v1, v2 }, [x8] ; 32-byte Folded Reload --- &gt; mov w22, #4 ; =0x4 &gt; mov w27, #2 ; =0x2 &gt; movi.2d v0, #0000000000000000 &gt; mov.d x8, v0[1] &gt; str x8, [sp] [...] Something quite fishy has happened here: we’ve lost a whole bunch of data that looks a lot like some sort of vector mask. Good to know! Since we’re diagnosing a miscompile in the stage2 build of Clang, we should also grab a known-good version of the textual IR of the compiler in the meantime. This just involves running the same set of commands with the fixed (Revert \"...\") commit. In the end, we have two sets of folders full of IR files, most of which are the same: $ du -sh * 2.5G ir_dump_bad 2.5G ir_dump_good All of this will be useful later; let’s table it for now and try to avoid using someone else’s computer, since nagging someone else to recompile LLVM constantly is painful for both parties. It gets better Okay, now that we’ve successfully captured at least some debugging info, let’s try this the easy way first despite knowing full-well God is laughing his ass off. This would mean compiling on X86 Windows to X86 windows and testing. Ideally, I wouldn’t need to do anything weird to get it to work. Ha, Nope. Same output in both cases. Alright, let’s try WSL2. System-V is a bit closer to AAPCS and maybe there’s some weird ABI stuff going on. # (on X86-64 via WSL) $ ./build/stage1/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - $ ./build/stage2/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - Nope. Maybe the STL is involved - some change between libstdc++ and libc++. $ ./build/stage2_lcxx/bin/clang++ --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - | sha256sum b8dd73117741b08fddb6065fb9289f861f9375b63ebab3ee67edf547ecb0c17a - Great. No taking the easy way out. Fuck it, just cross-compile the thing Alternate title: We live in a /usr/include/hell-gnueabihfelmnop of our own creation C build systems are not fun. One might go so far as to say they’re really, really, really not fun. This is true for a variety of reasons, but one painfully obvious example is cross-compilation. Here’s how you compile Clang to target AArch64 on Linux with the useful IR debug information, assuming you have an AArch64 sysroot installed and an appropriate CMake toolchain file: cmake -S llvm -B build/stage2 -DCMAKE_TOOLCHAIN_FILE=/home/user/aarch64.cmake -DLLVM_ENABLE_THREADS=OFF -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_LINKER=lld -DLLVM_HOST_TRIPLE=aarch64-linux-gnu -DLLVM_ENABLE_PROJECTS=clang -DLLVM_TARGETS_TO_BUILD=AArch64 -DCMAKE_C_COMPILER=\"$(realpath build/stage1/bin)/clang\" -DCMAKE_CXX_COMPILER=\"$(realpath build/stage1/bin)/clang++\" -DCMAKE_C_FLAGS=\"-fPIC -fuse-ld=lld --target=aarch64-linux-gnu -mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$(realpath build/stage2/ir_dump)\" -DCMAKE_CXX_FLAGS=\"-fPIC -fuse-ld=lld --target=aarch64-linux-gnu -mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$(realpath build/stage2/ir_dump)\" -DCMAKE_ASM_FLAGS=\"-fPIC --target=aarch64-linux-gnu\" -G Ninja Yes, the --target options are necessary despite the AArch64 toolchain. Yes, -fuse-ld=lld is necessary despite -DLLVM_USE_LINKER=lld. There is no reason that this should be as complicated as it is today. None. Zero. No other language pulls shit like this and gets away with it. Too much time later: $ qemu-aarch64 ./build/stage2/bin/clang --target=arm64-apple-macos -O2 repro.cc -S -o - | sha256sum 672470cec97d4630200f2631fb37afb23922afb21a97f2ac90ee58ecbec3a6fb - Success! I think I would’ve started to question my life choices if the stage2 compiler target had to be Apple-specific. To summarize: Compile clang with the commit right before the fix above Bootstrap clang with the newly-compiled clang &lt;– AND TARGET AARCH64 Build the repro script attached with ASAN and fuzzing harnesses on when targeting AArch64 There may be some contrived way to convince the vectorizer to miscompile this on X86 by tweaking profitability heuristics but this is good enough for now. Back to bug hunting! In which approximately 29,000 lines of textual IR diffs are checked by hand and we get extremely lucky $ diff ir_dump_bad ir_dump_good &gt; yeouch.diff $ ls -lh yeouch.diff -rw-r--r-- 1 user user 1.6M Sep 25 21:43 yeouch.diff There’s a lot going on in there. I’m going to optimistically assume that there’s nothing fishy going on in the Clang frontend, which slashes a significant portion off. After this we manually go through anything remaining, find any suspicious differences, and then check the IR dumps by hand for the function names since those aren’t in the diff itself. It would’ve also been pretty easy to check if the problem was actually in clang by using -emit-llvm and checking whether the two stages emit something different. I can retroactively say here that they don’t. Eventually, close to the bottom, we find that SelectionDAG::getVectorShuffle has been messed with in some way: ; *** IR Dump After LoopVectorizePass on *ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE *** ; Function Attrs: mustprogress nounwind ssp uwtable(sync) define [2 x i64] @_ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE [...] &lt; %306 = phi i64 [ 0, %300 ], [ %323, %305 ] &lt; %307 = phi &lt;16 x i64&gt; [ &lt;i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15&gt;, %300 ], [ %324, %305 ] &lt; %308 = phi &lt;16 x i1&gt; [ zeroinitializer, %300 ], [ %319, %305 ] &lt; %309 = phi &lt;16 x i1&gt; [ zeroinitializer, %300 ], [ %322, %305 ] --- &gt; %306 = phi i64 [ 0, %300 ], [ %321, %305 ] &gt; %307 = phi &lt;16 x i64&gt; [ &lt;i64 0, i64 1, i64 2, i64 3, i64 4, i64 5, i64 6, i64 7, i64 8, i64 9, i64 10, i64 11, i64 12, i64 13, i64 14, i64 15&gt;, %300 ], [ %322, %305 ] &gt; %308 = phi &lt;16 x i1&gt; [ &lt;i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true&gt;, %300 ], [ %318, %305 ] &gt; %309 = phi &lt;16 x i1&gt; [ &lt;i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true, i1 true&gt;, %300 ], [ %320, %305 ] [...] … Okay, but what is the SelectionDAG? On the subject of the SelectionDAG You can skip the section explaining the SelectionDAG if you know what the SelectionDAG is. LLVM IR, at this point, has been very well-documented elsewhere. The same is not true for the SelectionDAG. When lowering instructions to machine code, LLVM will by default use an intermediate representation known internally as the SelectionDAG. As the name suggests, it’s an acyclic graph-based intermediate representation designed to be useful for instruction selection. Each basic block has gets own SelectionDAG. This is not very helpful without a concrete visualization. Luckily, LLVM provides some visualization tools for us. There are a lot of different passes that the SelectionDAG goes through before being passed through the instruction selection system, but we’re going to completely ignore most of them for the sake of this explanation. Take the following code and compile it: // ./build/stage1_debug/bin/clang -mllvm -view-isel-dags -mllvm -view-dag-combine1-dags -O2 -m32 test2.c void test(int *b, long long *c) { *c = *b * 2345; } You’ll notice we’re compiling for x86_32 - this is important. Note that LLVM will try to start graphviz or some other dotfile viewer. The reader may find this useful but WSL doesn’t seem to play nicely with them. Solution: apt uninstall graphviz There are three distinct DAGs that are important to demonstrate roughly what the SelectionDAG does and how. They are quite large, but hopefully don’t mess the flow of this blog post up too much. The first one we’re going to look at is what LLVM IR initially gets translated to: dotfile There are multiple things you’ll notice about the SelectionDAG, but the most important takeaway is that the SelectionDAG is a dataflow graph that represents all dependencies of any given node as edges in an acyclic graph. To read the graph, consider GraphRoot the end of the block and go up. This makes intuitive sense, as we are essentially saying that the terminator instruction (a return in our case) depends on the results of the previous computations, including memory state. This is very helpful for instruction selection, as you get all valid orderings of instructions right off the bat. Memory dependencies are normally implicit in LLVM IR. There is an analysis framework that bolts on explicit memory dependency information on top of LLVM IR. It’s very useful but notably not a core part of the intermediate representation. In order for this to work, an explicit “state” edge must be added to all nodes that in some way manipulate memory. The way the SelectionDAG represents that is through the Chain operand, labeled ch in the graphs. Dependencies between blocks are modeled as stores to virtual registers with appropriate Chain operands. Note that the chain is marked in dotted blue lines. You’ll also notice that the chain is not fully sequential, meaning we can also represent non-volatile loads and stores that do not alias each other. There is another “special” form of node called Glue. We are not going to be talking about Glue. You’ll also notice that there’s already a target specific (X86ISD::) node in here. This is useful since it lets backends handle intrinsics or other wonky target-specific nonsense. One other notable difference compared to LLVM IR is that SelectionDAG nodes can have multiple returns. This is used, for example, so that load instructions can return both the loaded value and the new Chain. It’s also used in cases like X86’s div instruction, as div simultaneously computes the quotient and the remainder. With that being said, there’s a problem here: We’re doing 64-bit stores on a 32-bit platform! That’s not going to work. This is where the next phase of the SelectionDAG comes in: legalization. We need to turn the graph above into something that can map down to actual instructions on the hardware. Backends specify a list of legal operations, and all illegal operations are removed by the DAG “legalizer.” Once that’s done, we get output like this: dotfile A lot more stuff is happening in this graph, but it’s stuff that actually maps down to something in the hardware. Notably, the 64-bit store has been completely removed and replaced with two (reorderable!) 32-bit stores. TokenFactor nodes just merge separate state edges together, which is important if we have something like a store that potentially depends on two independent loads. In between these two graphs, we’ve also run the DAGCombiner. This is essentially just a patently absurd amount of pattern matching, both target-independent and not. After we’ve legalized the DAG and done some other transforms, we’re ready to do the initial instruction selection. This involves a bunch more stuff, including a TableGen-generated bytecode machine which I haven’t seen documented anywhere but is ridiculously cool to me, but we don’t have the space for that. Once that’s done, we get a graph that looks like this: dotfile Once that’s done, instruction selection (what instructions) stops and instruction scheduling (where do they go) begins. That pretty much sums it up! Much of the target-dependent optimization, legalization, and other logic is queried through the inherited TargetLowering classes, which are generally implemented in the *ILselLowering.cpp files. Fun fact: X86IselLowering.cpp is big enough that GitHub refuses to render it. There is a very low-level explanation of the SelectionDAG on the LLVM website if you’re curious about more implementation specifics. GlobalIsel eta 2045 every day I’m shufflin’ After some cranial percussive maintenance analysis of the LLVM IR, we find that one specific location has changed: SelectionDAG::getVectorShuffle SDValue SelectionDAG::getVectorShuffle(EVT VT, const SDLoc &amp;dl, SDValue N1, SDValue N2, ArrayRef&lt;int&gt; Mask) { // [...] // !!! THIS CODE CHANGED SOMEHOW !!! bool Identity = true, AllSame = true; for (int i = 0; i != NElts; ++i) { if (MaskVec[i] &gt;= 0 &amp;&amp; MaskVec[i] != i) Identity = false; if (MaskVec[i] != MaskVec[0]) AllSame = false; } if (Identity &amp;&amp; NElts) return N1; // [...] } Note that at this point we’re not quite sure what the behavioral differences are here; I am not quite ready to read through dozens of lines of vectorized IR to figure out exactly what went wrong here. That doesn’t really matter, though; alarm bells are already going off in my head since the check in the resulting condition (Identity) is short-circuiting emission of a vector shuffle, which would generate data blobs like those removed completely in the miscompiled assembly. In addition, the code that was changed looks suspiciously like the reproducer in the GitHub issue, which also erroneously returns true. This is a neat coincidence – the original bug is in the loop vectorizer and seems to manifest itself as an entirely separate issue in vectorized code generated in a constructor for vector shuffles. yo dawg Let’s make sure we’re not jumping to conclusions first, though. Actually Doing the Thing Remember that cross-compilation nightmare? We’re not done yet! After building Clang once and testing some minor changes to SelectionDAG.cpp I realized that, to my horror, CMake marked the entire cross-compile build as stale and started the whole thing from scratch. This happened with both the default and Ninja generators. Turns out there’s a bug.. somewhere, that causes includes to constantly be marked as dirty under certain scenarios when using clang. Cool. tl;dr - sudo ln -s /usr/include /include Now that we’re not rebuilding the entirety of clang every time, it’s pretty easy to test whether our earlier hypothesis was correct. We can get rid of vectorization for this loop see whether anything changes: - for (int i = 0; i != NElts; ++i) + for (volatile int i = 0; i != NElts; ++i) $ qemu-aarch64 ./build/stage2/bin/clang --target=arm64-apple-macos -O2 repro.cc -S -o - | sha256sum f50f06132b7a49efb699a2ae85d92fa1119ec086446417b80fef53b945bc7bd4 - Great! Bug gone, which confirms exactly what’s being miscompiled in the compiler. Less debug info We’re generating way too much textual IR every time we compile. Let’s use -filter-print-funcs, another useful debugging flag, to fix that: -mllvm -filter-print-funcs=_ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE Definitely a mouthful, but helpful nonetheless. While we’re at it, we should enable lld as well for full end-to-end testing. For those keeping track, our CMake configure script now looks roughly like this: cmake -S llvm -B build/stage2 -DCMAKE_TOOLCHAIN_FILE=/home/user/aarch64.cmake -DLLVM_ENABLE_THREADS=OFF -DCMAKE_BUILD_TYPE=Release -DLLVM_USE_LINKER=lld -DLLVM_HOST_TRIPLE=aarch64-linux-gnu -DLLVM_ENABLE_PROJECTS=\"clang;lld\" -DLLVM_TARGETS_TO_BUILD=AArch64 -DCMAKE_C_COMPILER=\"$(realpath build/stage1/bin)/clang\" -DCMAKE_CXX_COMPILER=\"$(realpath build/stage1/bin)/clang++\" -DCMAKE_C_FLAGS=\"-fPIC -fuse-ld=lld --target=aarch64-linux-gnu -mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$(realpath build/stage2/ir_dump) -mllvm -filter-print-funcs=_ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE\" -DCMAKE_CXX_FLAGS=\"-fPIC -fuse-ld=lld --target=aarch64-linux-gnu -mllvm -print-after=loop-vectorize -mllvm -ir-dump-directory=$(realpath build/stage2/ir_dump) -mllvm -filter-print-funcs=_ZN4llvm12SelectionDAG16getVectorShuffleENS_3EVTERKNS_5SDLocENS_7SDValueES5_NS_8ArrayRefIiEE\" -DCMAKE_ASM_FLAGS=\"-fPIC --target=aarch64-linux-gnu\" -G Ninja Side-note: brute-force testing only works for code, not command-line options I’d like to take a moment to point out that -filter-print-funcs did not actually work when combined with -ir-dump-directory until I was diagnosing this miscompile and submitted the only useful contribution of this [TOO LONG] word blog post. When I say that you will be fine if you use the flags that everyone else does, this is what I mean. These options work fine on their own, when com bined they caused an extremely trivial crash, and that’s a normal Tuesday afternoon because nobody had ever bothered to try and do that. More debug info Let’s use the world’s best form of debugging to get some useful info about what’s going on here. + printf(\"identity: %d, nelts: %d\\n\", (int)Identity, NElts); # Bad run: identity: 1, nelts: 20 identity: 0, nelts: 16 identity: 1, nelts: 16 identity: 1, nelts: 20 identity: 0, nelts: 16 identity: 1, nelts: 16 identity: 0, nelts: 16 # Good run: identity: 0, nelts: 20 identity: 0, nelts: 16 identity: 0, nelts: 16 identity: 0, nelts: 16 identity: 1, nelts: 16 identity: 0, nelts: 20 identity: 0, nelts: 16 identity: 0, nelts: 16 identity: 0, nelts: 16 identity: 1, nelts: 16 identity: 0, nelts: 16 All we’ve done here is add volatile and we’re even getting changes in how often the function is being called. The good news is that this confirms our hypothesis that Identity is erroneously being set to true in certain cases. The fact that these cases involve the number of vector elements being 20 is also important for later, but we’ll get to that. Let’s go ahead and also print out all the elements of the vector: + for (int i = 0; i != NElts; ++i) + printf(\"[%08X] \", MaskVec[i]); As a reminder, the Identity boolean is set to true if all elements of the vector are either less than zero or equal to their indices in the vector itself. For example, [0, 1, -1, 3] would return true and [0, 0, 0, 0] would return false. $ qemu-aarch64 ./build/stage2/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -o - [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [00000000] [00000001] [00000002] [00000003] [00000004] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] [FFFFFFFF] -&gt; identity: 1, nelts: 20 [...] Now, I’m not exactly a mathematician… Reproducing the vectorizer oopsie We require a reasonably-representative reliable reproducer to avoid regular recompilation of clang. After a bit of tinkering with the runtime data we have, here’s a small piece of code that demonstrates the issue: Reproducer #include &lt;cstdio&gt; int testarr[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16 // index 16 (17th element!) }; void do*the_thing(int *mask_vec, int n_elts) { asm volatile(\"\":\"+r\"(mask_vec),\"+r\"(n_elts)); // optimization barrier for good luck bool identity = true; for (int i = 0; i != n_elts; ++i) { if (mask_vec[i] != i) identity = false; } printf(\"identity: %d, nelts: %d\\n\", (int)identity, n_elts); } int main() { do_the_thing(testarr, sizeof(testarr) / sizeof(testarr[0])); } $ ./build/stage1/bin/clang --target=aarch64-linux-gnu -O2 test.cpp -fuse-ld=lld -o test.out $ qemu-aarch64 test.out identity: 1, nelts: 17 Nifty. What’s going on internally, though? We can view the CFG of the output LLVM IR using the opt tool to take a look at what’s actually happening. You can see the original dotfile here. Rembember how I said I was not ready to read through dozens of lines of vectorized IR? Well, so, uh, $ ./build/stage1/bin/clang --target=aarch64-linux-gnu -O2 test.cpp -fuse-ld=lld -emit-llvm -S -o test.ll ./build/stage1/bin/opt -passes=-view-cfg test.ll If you’re following along and squint hard enough, you’ll notice a 16-wide vector loop, an 8-wide vector loop, and a scalar loop. Really quickly, let’s take a look at some of the trickery that’s happened already. Here’s an annotated and shortened version of the 16-wide vector loop: s/”shortened version of”/”deliberate lie about what’s in”/ loop_block: %bool_phi = phi &lt;16 x i1&gt; [ zeroinitializer, %entry ], [ %bool_vec, %loop_block ] %idx_list = phi &lt;16 x i32&gt; [ ... ] %current_block_ptr = getelementptr inbounds ... %current_block = load &lt;16 x i32&gt;, ptr %current_block_ptr %cmp_result = icmp ne &lt;16 x i32&gt; %idx_list, %loaded_values %bool_vec = or &lt;16 x i1&gt; %bool_phi, %cmp_result If you’re paying really close attention, you’ll notice that the meaning of cmp_result has actually been inverted compared to identity! Now any element of bool_vec being true would mean that identity is false, rather than requiring all elements of bool_vec to be true in order for identity to be true. I hope that made sense. This inversion means it’s possible to use a simple comparison against zero to check whether our condition was satisfied, rather than needing to load -1 in various places afterwards. Neat, huh? The phi node results of the 16-wide vector loop are, depending on whether we want to execute the 8-wide vector loop or not, are– Wait a minute. COMPUTER, ENHANCE! 27: ; preds = %14 %28 = bitcast &lt;16 x i1&gt; %23 to i16 %29 = icmp eq i16 %28, 0 %30 = icmp eq i64 %13, %8 br i1 %30, label %64, label %31 31: ; preds = %27 %32 = and i64 %8, 8 %33 = icmp eq i64 %32, 0 br i1 %33, label %61, label %34 61: ; preds = %7, %31, %57 %62 = phi i64 [ 0, %7 ], [ %13, %31 ], [ %38, %57 ] %63 = phi i1 [ true, %7 ], [ true, %31 ], [ %59, %57 ] br label %70 Let’s annotate this a bit. Block %27 is executed immediately after %14 (the 16-wide loop) is done, %57 is executed immediately after the 8-wide loop, %13 is the current loop iteration index (i.e. how many iterations of the original operation the 16-wide loop has completed), and %8 is the required total iteration count. ; Executed immediately after 16-wide vector loop 27: ; preds = %14 ; %29 is set to whether 0 if all vector elements are false; i.e. the check in the vector loop always fails. Not shown: the vectorizer has inverted our condition from equality to inequality. %28 = bitcast &lt;16 x i1&gt; %23 to i16 %29 = icmp eq i16 %28, 0 ; Check whether we've iterated through the entire loop %30 = icmp eq i64 %big_loop_trip_count, %req_trip_count br i1 %30, label %64, label %31 ; We have not, check whether we should execute 8-wide vector loop 31: ; preds = %27 %32 = and i64 %req_trip_count, 8 %33 = icmp eq i64 %32, 0 br i1 %33, label %61, label %34 ; Do not want to execute 8-wide loop 61: ; preds = %7, %31, %57 ; Iteration count after vectorized loops %62 = phi i64 [ 0, %7 ], [ %big_loop_trip_count, %31 ], [ %38, %57 ] ; PHI node representing current status of `identity`. Always `true` after the entry block, `true` after block `%31`, dependent on `%59` after block `%57` (8-wide loop). %63 = phi i1 [ true, %7 ], [ true, %31 ], [ %59, %57 ] br label %70 true after block %31? That’s not good. It seems like, if the second vector loop is not executed and we go to the scalar loop, the results of the first vector loop are just.. ignored! We can test this out pretty easily: int testarr[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, - 16 + 16, 17, 18, 19, 20, 21, 22, 23 }; $ qemu-aarch64 test.out identity: 0, nelts: 24 Then let’s try deliberately executing the scalar loop and the second vector loop: int testarr[] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, - 16 + 16, 17, 18, 19, 20, 21, 22, 23, 24 }; $ qemu-aarch64 test.out identity: 0, nelts: 25 Great! Or, well, not great, but we’ve successfully narrowed down the root cause of the stage2 bug. To be clear, to trigger this bug the vectorizer has to generate a very specific type of operation at compile time and at runtime we have to have somewhere between 17 and 23 total iterations done. Fun. … How are these vectors generated, anyway? What would generate a twenty-element vector? Let’s take a look at the original reproducer and try to find anything useful in the LLVM IR: $ qemu-aarch64 ./build/stage2/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address repro.cc -S -emit-llvm -o - | grep \"20 x \" $ Okay, so this has to be something done after all of the IR passes then. Fantastic. Let’s just print out everything with -debug and- $ ./build/stage1/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address -S repro.cc -mllvm -debug clang (LLVM option parsing): Unknown command line argument '-debug'. Try: 'clang (LLVM option parsing) --help' Oh. Right. We didn’t compile Clang in debug mode. Time to kick off yet another from-scratch LLVM build. sigh [more than one minute later] $ ./build/stage1_debug/bin/clang --target=arm64-apple-macos -O2 -fsanitize=fuzzer-no-link -fsanitize=address -S repro.cc -mllvm -debug [...] Creating new node: t76: v20i8 = concat_vectors t74, undef:v5i8, undef:v5i8, undef:v5i8 I’m not even going to question why or how a vector with five elements is being generated for now. What’s important is that the 20-element vector is being created during instruction selection and before any optimizations. These &lt;5 x i8&gt; vectors do exist before instruction selection in the form of operands to vector shuffles, which is good: ;./build/stage1/bin/clang --target=aarch64-linux-gnu -O2 repro.cc -fsanitize=fuzzer-no-link -fsanitize=address -emit-llvm -S -o - ; ... %133 = bitcast i40 %ref.tmp.sroa.4.0.extract.trunc to &lt;5 x i8&gt; %retval.sroa.0.8.vec.expand62 = shufflevector &lt;5 x i8&gt; %133, &lt;5 x i8&gt; poison, ... ; ... The fact that it’s these vectors are in IR means we can assume it’ll be passed directly to the initial DAG builder. well, not always :( Passes after -emit-llvm but before instruction selection can absolutely trash your code if you’re not careful. Here’s something absolutely diabolical - the summary is that the WinEHPrepare pass will detect blocks with specific types of malformed call instructions AND COMPLETELY NUKE THE BASIC BLOCK. No less than three people (the author of that issue, a friend of mine, and I) have run into this to-date. If you develop for LLVM and there is ONE thing you take away from this post, it should be to be careful about inserting calls when funclet pads are involved!!! Under complex macroarchitectural conditions… Let’s take a look at SelectionDAGBuilder::visitVectorShuffle: SelectionDAGBuilder::visitVectorShuffle void SelectionDAGBuilder::visitShuffleVector(const User &amp;I) { // ... // Normalize the shuffle vector since mask and vector length don't match. if (SrcNumElts &lt; MaskNumElts) { // ... unsigned PaddedMaskNumElts = alignTo(MaskNumElts, SrcNumElts); unsigned NumConcat = PaddedMaskNumElts / SrcNumElts; // Pad both vectors with undefs to make them the same length as the mask. SDValue UndefVal = DAG.getUNDEF(SrcVT); SmallVector&lt;SDValue, 8&gt; MOps1(NumConcat, UndefVal); SmallVector&lt;SDValue, 8&gt; MOps2(NumConcat, UndefVal); MOps1[0] = Src1; MOps2[0] = Src2; Src1 = DAG.getNode(ISD::CONCAT_VECTORS, DL, PaddedVT, MOps1); Src2 = DAG.getNode(ISD::CONCAT_VECTORS, DL, PaddedVT, MOps2); // Readjust mask for new input vector length. SmallVector&lt;int, 8&gt; MappedOps(PaddedMaskNumElts, -1); // ... SDValue Result = DAG.getVectorShuffle(PaddedVT, DL, Src1, Src2, MappedOps); // ... } As a reminder, our source vector size is 5 and our mask vector size is 16. The SelectionDAG builder wants to normalize the source and mask vectors, such that: The resulting output mask is a multiple of the number of elements in the source vector. Not quite sure why. All vectors passed to getVectorShuffle are the same size as the mask. This means that we get undef-padded 20-element vectors and multiple -1s at the end of the mask. Those -1s then get passed to getVectorShuffle, which then causes the miscompile as mentioned before. Neat. Time to look a little at how that 5-element vector was generated. Looking for &lt;5 x i8&gt; in the debug logs tell us a bit more about what’s going on here: rewriting [8,13) slice #8 Begin:(8, 13) NewBegin:(8, 13) NewAllocaBegin:(0, 16) original: store i40 %f1.sroa.5.0.extract.trunc.peel, ptr %9, align 8 shuffle: %retval.sroa.0.8.vec.expand = shufflevector &lt;5 x i8&gt; %10, ... blend: %retval.sroa.0.8.vecblend = select &lt;16 x i1&gt; ... SROA is a pass designed to optimize away (“promote”) alloca instructions and turn the values they reference directly into SSA registers. We can see SROA turning a store of a 40-bit integer(????) into a mess of shuffles. I’m not going to go through this bit line-by-line as, frankly, there isn’t anything particularly unique about how this part of the bug manifests itself. There are plenty of other ways in which weird-length vectors are generated - &lt;20 x i8&gt; and &lt;5 x i8&gt; show up a bunch of times in the test-cases. Here’s a great overview of some of the passes in the LLVM mid-end optimization pipeline. As an expedited summary, SROA runs, then a bunch of passes run, then SROA runs again and turns some stores into those i40 stores, then some other passes run, then SROA runs again and turns those stores into 5-element vector shuffles as seen above. Going through exactly why this happens would involve sifting through a bunch of implementation details with nothing much to say other than “this is what it does.” I don’t find that particularly engaging when nothing else is involved, and this post is long enough as-is. The code works as intended. The fact of the matter is that all modern-day compiler bugs have root cause chains this deep - one pass happens to generate some code which happens to cause another pass to generate some other code, and so on and so forth. If you’d like, you can see the full diff here. Conclusion It’s entirely unnecessary for compiler engineers to go into this amount of detail about why something went wrong from start to finish. All that’s needed is what was given at the very start: Correct IR, buggy IR. Fix bug, add test-case, done. The underlying root cause of this bug was fixed a while ago – it’s very unlikely that anyone was ever concretely impacted by it outside of a few hours of type 2 fun. With that being said, this silly bug will probably hold a special place in my heart for a while. The potential for a buggy bootstrapped compiler has always existed. In practice, however, it’s incredibly rare, and I didn’t think I’d ever actually see a real-world example. I hope whoever read to the end learned something. It’s a fantastic example of how things can go wrong in ridiculous, unexpected ways when so many moving parts are involved. I love shit like this.",
          "link": "https://secret.club/2024/10/21/unnecessarily-exhaustice-rca.html",
          "publishedOn": "2024-10-21T00:00:00.000Z",
          "wordCount": 13433,
          "title": "‘Reflections on Trusting Trust’, but completely by accident this time",
          "imageUrl": "/assets/twitter.png"
        }
      ]
    },
    {
      "title": "Doyensec's Blog",
      "feedUrl": "https://blog.doyensec.com/atom.xml",
      "siteUrl": "https://blog.doyensec.com/atom.xml",
      "articles": []
    },
    {
      "title": "Attack & Defense",
      "feedUrl": "https://blog.mozilla.org/attack-and-defense/feed/",
      "siteUrl": "https://blog.mozilla.org/attack-and-defense",
      "articles": []
    },
    {
      "title": "pi3 blog",
      "feedUrl": "http://blog.pi3.com.pl/?feed=rss2",
      "siteUrl": "http://blog.pi3.com.pl",
      "articles": []
    },
    {
      "title": "MKSB(en)",
      "feedUrl": "https://mksben.l0.cm/feeds/posts/default?alt=rss",
      "siteUrl": "https://mksben.l0.cm/",
      "articles": []
    },
    {
      "title": "Alex Chapman's Blog",
      "feedUrl": "https://ajxchapman.github.io/feed.xml",
      "siteUrl": "https://blog.ajxchapman.com/",
      "articles": []
    },
    {
      "title": "Trail of Bits Blog",
      "feedUrl": "https://blog.trailofbits.com/feed/",
      "siteUrl": "https://blog.trailofbits.com",
      "articles": [
        {
          "id": "https://blog.trailofbits.com/?p=108489",
          "author": "Trail of Bits",
          "description": "By Artur Cygan Fuzzing—one of the most successful techniques for finding security bugs, consistently featured in articles and industry conferences—has become so popular that you may think most important software has already been extensively fuzzed. But that’s not always the case. In this blog post, we show how we fuzzed the ZBar barcode scanning library […]",
          "link": "https://blog.trailofbits.com/2024/10/31/fuzzing-between-the-lines-in-popular-barcode-software/",
          "publishedOn": "2024-10-31T13:00:18.000Z",
          "wordCount": 3844,
          "title": "Fuzzing between the lines in popular barcode software",
          "imageUrl": "https://blog.trailofbits.com/wp-content/uploads/2020/07/cropped-android-chrome-512x512-1.png"
        },
        {
          "id": "https://blog.trailofbits.com/?p=108435",
          "author": "Trail of Bits",
          "description": "By Alan Cao If you love exploit mitigations, you may have heard of a new system call named mseal landing into the Linux kernel’s 6.10 release, providing a protection called “memory sealing.” Beyond notes from the authors, very little information about this mitigation exists. In this blog post, we’ll explain what this syscall is, including […]",
          "link": "https://blog.trailofbits.com/2024/10/25/a-deep-dive-into-linuxs-new-mseal-syscall/",
          "publishedOn": "2024-10-25T13:00:18.000Z",
          "wordCount": 5078,
          "title": "A deep dive into Linux’s new mseal syscall",
          "imageUrl": "https://blog.trailofbits.com/wp-content/uploads/2024/10/figure_3-2.png"
        },
        {
          "id": "https://blog.trailofbits.com/?p=108392",
          "author": "Trail of Bits",
          "description": "This is a joint post with the Hugging Face Gradio team; read their announcement here! You can find the full report with all of the detailed findings from our security audit of Gradio 5 here. Hugging Face hired Trail of Bits to audit Gradio 5, a popular open-source library that provides a web interface that […]",
          "link": "https://blog.trailofbits.com/2024/10/10/auditing-gradio-5-hugging-faces-ml-gui-framework/",
          "publishedOn": "2024-10-10T16:00:29.000Z",
          "wordCount": 3920,
          "title": "Auditing Gradio 5, Hugging Face’s ML GUI framework",
          "imageUrl": "https://blog.trailofbits.com/wp-content/uploads/2024/10/figure_1-1650x298.png"
        }
      ]
    },
    {
      "title": "Sean Heelan's Blog",
      "feedUrl": "https://sean.heelan.io/feed/",
      "siteUrl": "https://sean.heelan.io",
      "articles": []
    },
    {
      "title": "Exodus Intelligence",
      "feedUrl": "https://blog.exodusintel.com/feed/",
      "siteUrl": "https://blog.exodusintel.com/",
      "articles": []
    },
    {
      "title": "markitzeroday.com",
      "feedUrl": "https://markitzeroday.com/feed.xml",
      "siteUrl": "https://markitzeroday.com/",
      "articles": []
    },
    {
      "title": "The Human Machine Interface",
      "feedUrl": "https://h0mbre.github.io/feed.xml",
      "siteUrl": "https://h0mbre.github.io/",
      "articles": []
    },
    {
      "title": "The Exploit Laboratory",
      "feedUrl": "https://blog.exploitlab.net/feeds/posts/default",
      "siteUrl": "https://blog.exploitlab.net/",
      "articles": []
    },
    {
      "title": "🔐Blog of Osanda",
      "feedUrl": "https://osandamalith.com/feed/",
      "siteUrl": "https://osandamalith.com",
      "articles": []
    },
    {
      "title": "Max Justicz",
      "feedUrl": "https://justi.cz/feed.xml",
      "siteUrl": "/",
      "articles": []
    },
    {
      "title": "ZephrSec - Adventures In Information Security",
      "feedUrl": "https://blog.zsec.uk/rss/",
      "siteUrl": "https://blog.zsec.uk/",
      "articles": [
        {
          "id": "65f5ceb78792421d3c2272e4",
          "author": "Andy Gill",
          "description": "This post explores Windows Side-by-Side (WinSxS) and DLL hijacking, deep-diving some tooling I've written and some of the fun along the way.",
          "link": "https://blog.zsec.uk/hellojackhunter-exploring-winsxs/",
          "publishedOn": "2024-05-12T09:01:42.000Z",
          "wordCount": 2947,
          "title": "Side-by-Side with HelloJackHunter: Unveiling the Mysteries of WinSxS",
          "imageUrl": "https://blog.zsec.uk/content/images/2024/05/signal-2024-05-05-125514_002.jpeg"
        }
      ]
    },
    {
      "title": "Security Research",
      "feedUrl": "https://mrd0x.com/rss.xml",
      "siteUrl": "https://mrd0x.com",
      "articles": []
    },
    {
      "title": "Hanno's blog",
      "feedUrl": "https://blog.hboeck.de/feeds/index.rss2",
      "siteUrl": "https://blog.hboeck.de/",
      "articles": []
    },
    {
      "title": "enigma0x3",
      "feedUrl": "https://enigma0x3.net/feed/",
      "siteUrl": "https://enigma0x3.net",
      "articles": []
    },
    {
      "title": "Realmode Labs - Medium",
      "feedUrl": "https://medium.com/feed/realmodelabs",
      "siteUrl": "https://medium.com/realmodelabs?source=rss----a97a5137a6a4---4",
      "articles": []
    },
    {
      "title": "Jump ESP, jump!",
      "feedUrl": "https://jumpespjump.blogspot.com/feeds/posts/default",
      "siteUrl": "https://jumpespjump.blogspot.com/",
      "articles": []
    },
    {
      "title": "4sysops",
      "feedUrl": "https://4sysops.com/feed/",
      "siteUrl": "https://4sysops.com",
      "articles": [
        {
          "id": "https://4sysops.com/?p=1588526",
          "author": "Michael Pietroforte",
          "description": "Windows Server 2025 is now generally available, and you can download the ISO and VHD files for Intel-based systems. Since Microsoft hasn't yet provided an ARM ISO for Windows Server 2025, you can download it from uupdump.net. To test the GA release, avoid downloading it from the Windows Insider Program page.",
          "link": "https://4sysops.com/archives/download-the-windows-server-2025-iso-for-intel-x64-and-arm-arm64/",
          "publishedOn": "2024-11-04T10:52:18.000Z",
          "wordCount": null,
          "title": "Download the Windows Server 2025 ISO for Intel (x64) and ARM (ARM64)",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1588303",
          "author": "Surender Kumar",
          "description": "Amazon Bedrock is a fully managed service that allows developers to build, integrate, and scale generative AI applications. You can access pre-trained foundational models (FMs) from leading AI companies such as Anthropic and Meta. In this introductory post, I will demonstrate how to get access to Bedrock models and interact with them in the Playground and via AWS CLI.",
          "link": "https://4sysops.com/archives/getting-started-with-amazon-bedrock-access-ai-models-via-playground-and-aws-cli/",
          "publishedOn": "2024-11-01T15:03:22.000Z",
          "wordCount": null,
          "title": "Getting started with Amazon Bedrock: Access AI models via Playground and AWS CLI",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1588290",
          "author": "Robert Pearman",
          "description": "While API-based SMS platforms are not new, the rise of low or no-code platforms like Power Automate or Logic Apps means you no longer need to be an API expert to use them. Integrating SMS messaging into a Power Automate flow can significantly enhance its functionality and unlock new possibilities. In this post's example, I will use the content of an email message to trigger a Power Automate flow and send an SMS based on the message body.",
          "link": "https://4sysops.com/archives/sending-sms-messages-with-power-automate/",
          "publishedOn": "2024-10-31T15:31:56.000Z",
          "wordCount": null,
          "title": "Sending SMS messages with Power Automate",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587946",
          "author": "Wolfgang Miedl",
          "description": "OneDrive for Business serves is a popular cloud storage solution in Microsoft 365. From the user’s perspective, this personal storage space is convenient. However, from an IT perspective, security or compliance requirements often call for at least partially disabling it. Here are some considerations about the challenges of turning off OneDrive.",
          "link": "https://4sysops.com/archives/disable-onedrive-for-business-is-that-even-possible/",
          "publishedOn": "2024-10-30T15:52:24.000Z",
          "wordCount": null,
          "title": "Disable OneDrive for Business – is that even possible?",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1588338",
          "author": "Wolfgang Sommergut",
          "description": "Installing a NAT router with Windows Server Routing and Remote Access Service (RRAS) provides secure internet access for internal networks by routing traffic while protecting against external threats. With RRAS, Windows Server can function as a NAT router, VPN server, or gateway for internal and VPN-connected networks. This guide covers step-by-step instructions for configuring NAT and enabling features like DHCP and DNS proxy for seamless network management.",
          "link": "https://4sysops.com/archives/install-a-nat-router-with-windows-server-routing-and-remote-access-service-rras/",
          "publishedOn": "2024-10-29T13:34:42.000Z",
          "wordCount": null,
          "title": "Install a NAT router with Windows Server Routing and Remote Access Service (RRAS)",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1588086",
          "author": "Vignesh Mudliar",
          "description": "QR coding phishing is a risk that is being actively exploited globally. This attack hides URLs within QR codes and redirects users to malicious sites. This post will explore how Microsoft Defender for Office 365 (MDO) tackles QR code phishing and how you can combine email security methods to safeguard your Microsoft 365 tenant.",
          "link": "https://4sysops.com/archives/how-to-detect-and-block-qr-code-phishing-using-microsoft-defender-for-office-365/",
          "publishedOn": "2024-10-28T12:47:55.000Z",
          "wordCount": 4666,
          "title": "How to detect and block QR code phishing using Microsoft Defender for Office 365",
          "imageUrl": "https://4sysops.com/wp-content/uploads/2024/10/QR-code-phishing-email-prompts-the-user-to-scan-the-QR-code-to-enter-credentials-on-a-phishing-site.-600x452.png"
        },
        {
          "id": "https://4sysops.com/?p=1588068",
          "author": "Amr Essam",
          "description": "AWS has recently launched the general availability of Console-to-Code. This feature allows you to convert actions performed in the AWS console into reusable Infrastructure-as-Code (IaC), such as AWS CLI commands or CloudFormation templates. In this article, I will demonstrate AWS Console-to-Code with a straightforward example to generate CloudFormation code.",
          "link": "https://4sysops.com/archives/aws-console-to-code-convert-ui-actions-into-infrastructure-as-code-iac/",
          "publishedOn": "2024-10-25T13:14:38.000Z",
          "wordCount": null,
          "title": "AWS Console-to-Code: Convert UI actions into Infrastructure-as-Code (IaC)",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1588035",
          "author": "Markus Elsberger",
          "description": "Active Directory services communicate over specific ports needed for authentication, replication, and other directory services. Knowing these ports is crucial for configuring firewalls, ensuring secure communication, and troubleshooting network issues related to Active Directory services. This post will teach you how to get the Active Directory ports with PowerShell.",
          "link": "https://4sysops.com/archives/get-active-directory-ports-with-powershell/",
          "publishedOn": "2024-10-24T19:37:21.000Z",
          "wordCount": 3820,
          "title": "Get Active Directory ports with PowerShell",
          "imageUrl": "https://4sysops.com/wp-content/uploads/2024/10/View-Active-Directory-Ports-with-PowerShell-600x328.png"
        },
        {
          "id": "https://4sysops.com/?p=1587961",
          "author": "Nicki Borell",
          "description": "Data quality is a critical factor in the success of AI solutions. If you’ve consistently worked with metadata in document management, you’re well-prepared for Copilot. However, metadata management often falls short in practice, making alternative solutions necessary. This article explores how Copilot works with metadata and how you can alternatively use the semantic index.",
          "link": "https://4sysops.com/archives/prepare-for-copilot-deployment-supplying-ai-with-metadata-or-leveraging-the-semantic-index/",
          "publishedOn": "2024-10-23T21:48:45.000Z",
          "wordCount": null,
          "title": "Prepare for Copilot deployment: Supplying AI with metadata or leveraging the semantic index",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1588046",
          "author": "Wolfgang Sommergut",
          "description": "Microsoft continuously updates the administrative templates for its Office apps, most recently shortly after the release of the 2024 LTSC version. However, it is difficult to track which settings have been added and which versions they support. A comparison with older versions of the ADMX files can provide some clarity.",
          "link": "https://4sysops.com/archives/group-policy-for-office-2024-new-settings-since-2021-ltsc/",
          "publishedOn": "2024-10-22T15:59:54.000Z",
          "wordCount": null,
          "title": "Group Policy for Office 2024: New settings since 2021 LTSC",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587938",
          "author": "Wolfgang Miedl",
          "description": "Microsoft has unveiled a significantly revamped version of its Copilot chatbot. The updated prompt interface is complemented by a range of assistants and additional services, which Microsoft calls an \"AI companion for everyday life.\"",
          "link": "https://4sysops.com/archives/microsoft-introduces-new-copilot-from-chatbot-to-real-time-ai-companion-for-everyday-life/",
          "publishedOn": "2024-10-21T17:29:58.000Z",
          "wordCount": null,
          "title": "Microsoft introduces new Copilot: From chatbot to real-time AI companion for everyday life",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587734",
          "author": "Amr Essam",
          "description": "AWS has recently added the ability to change EC2 CPU options after launch. This feature lets you modify the number of vCPUs and thread configuration of an EC2 instance post-launch. Previously, altering the vCPU count was only feasible when starting a new instance.",
          "link": "https://4sysops.com/archives/change-aws-ec2-cpu-options-post-launch/",
          "publishedOn": "2024-10-18T08:09:28.000Z",
          "wordCount": null,
          "title": "Change AWS EC2 CPU options post launch",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587768",
          "author": "Edem Afenyo",
          "description": "Ubuntu 24.10 has arrived, offering a range of new features, updates, and enhancements. As a non-LTS (Long Term Support) release, it provides only nine months of support for updates and fixes, unlike the extended support period available for LTS versions. However, despite its shorter support duration, Ubuntu 24.10 delivers a host of impressive features, making it a standout release for users seeking the latest in cutting-edge technology. Additionally, this release celebrates 20 years since Ubuntu's debut and includes special anniversary-themed Easter eggs.",
          "link": "https://4sysops.com/archives/ubuntu-2410-gnome-47-kernel-611-apt-30-and-more/",
          "publishedOn": "2024-10-17T19:17:54.000Z",
          "wordCount": null,
          "title": "Ubuntu 24.10: Gnome 47, Kernel 6.11, APT 3.0 and more",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587683",
          "author": "Baki Onur Okutucu",
          "description": "Azure Premium SSD v2 disks, currently in public preview, provide enhanced throughput and IOPS at a lower cost than earlier versions. You can convert existing disks to Premium SSD v2 using PowerShell. However, it's crucial to understand the specific limitations and requirements beforehand.",
          "link": "https://4sysops.com/archives/convert-to-azure-premium-ssd-v2-disks-with-powershell/",
          "publishedOn": "2024-10-16T16:12:30.000Z",
          "wordCount": null,
          "title": "Convert to Azure Premium SSD v2 Disks with PowerShell",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587754",
          "author": "Wolfgang Sommergut",
          "description": "When connecting to a public Wi-Fi, such as in a hotel or airport, Windows automatically tests the connection by accessing msftconnecttest.com. If the network provider requires your registration, you may encounter an error when accessing msftconnecttest.com instead of being redirected to the intended captive portal.",
          "link": "https://4sysops.com/archives/fix-public-wi-fi-error-msftconnecttestcom-this-site-cant-be-reached/",
          "publishedOn": "2024-10-15T15:04:26.000Z",
          "wordCount": null,
          "title": "Fix public Wi-Fi error “msftconnecttest.com  – This site can’t be reached”",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587655",
          "author": "Brandon Lee",
          "description": "For organizations utilizing Active Directory infrastructure, having a tool to identify commonly used or compromised passwords is important both for securing your environment and complying with the newest guidelines from NIST, HITRUST, NYDFS, and others. Enzoic for Active Directory 3.5 introduces new features that assist organizations in detecting weak or compromised passwords and implementing enhanced complexity requirements for users.",
          "link": "https://4sysops.com/archives/protecting-active-directory-from-compromised-passwords-with-enzoic-35/",
          "publishedOn": "2024-10-14T15:56:03.000Z",
          "wordCount": null,
          "title": "Protecting Active Directory from compromised passwords with Enzoic 3.5",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587526",
          "author": "Edem Afenyo",
          "description": "Historically, Linux daemons such as SSSD (System Security Services Daemon) have facilitated access to remote identity and authentication services like LDAP, Kerberos, FreeIPA, and Active Directory. Authd, recently announced for general availability, takes this approach further by harnessing the cloud. Authd, with initial integration for Microsoft’s Entra ID (previously known as Azure AD), introduces capabilities such as multi-factor authentication (MFA) and conditional access to your local setup. Currently, it is available exclusively for Ubuntu desktops and servers.",
          "link": "https://4sysops.com/archives/authd-cloud-based-oidc-authentication-for-ubuntu-linux/",
          "publishedOn": "2024-10-11T18:36:40.000Z",
          "wordCount": null,
          "title": "Authd: Cloud-Based OIDC authentication for Ubuntu Linux",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587352",
          "author": "Wolfgang Sommergut",
          "description": "To explore Storage Spaces Direct (S2D) in Windows Server 2025, you can set up a lab environment using virtual machines with Hyper-V and PowerShell.",
          "link": "https://4sysops.com/archives/build-a-windows-server-2025-s2d-cluster-lab-with-hyper-v-and-powershell/",
          "publishedOn": "2024-10-10T16:20:52.000Z",
          "wordCount": null,
          "title": "Build a Windows Server 2025 S2D cluster lab with Hyper-V and PowerShell",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587313",
          "author": "Baki Onur Okutucu",
          "description": "Currently, in Preview, the Customer Managed Planned Failover feature allows you to manage and execute a planned failover of your Azure Storage account. This guide demonstrates how to perform this using PowerShell.",
          "link": "https://4sysops.com/archives/customer-managed-planned-failover-for-azure-storage-using-powershell/",
          "publishedOn": "2024-10-09T19:04:58.000Z",
          "wordCount": null,
          "title": "Customer Managed Planned Failover for Azure Storage using PowerShell",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587383",
          "author": "Wolfgang Sommergut",
          "description": "Windows 11 24H2 introduces several Group Policy settings to manage its new features centrally. Windows Defender receives 26 new settings, and many focus on enhancing SMB security. The new settings also control reboots after updates and the transition to Windows Protected Print.",
          "link": "https://4sysops.com/archives/windows-11-24h2-group-policy-81-new-settings-for-smb-updates-printing-defender-and-more/",
          "publishedOn": "2024-10-08T15:17:13.000Z",
          "wordCount": null,
          "title": "Windows 11 24H2 Group Policy: 81 new settings for SMB, updates, printing, Defender, and more",
          "imageUrl": null
        },
        {
          "id": "https://4sysops.com/?p=1587298",
          "author": "Amr Essam",
          "description": "AWS has recently introduced support for conditional writes in S3 storage. This feature enables S3 to verify whether an object exists before creating it, which helps prevent accidental overwriting of existing objects during data uploads. This capability is particularly useful for distributed applications that simultaneously access and write data to S3. In this article, I will showcase how to use the newly introduced --if-none-match parameter.",
          "link": "https://4sysops.com/archives/aws-s3-conditional-writes-the-if-none-match-parameter/",
          "publishedOn": "2024-10-07T16:42:55.000Z",
          "wordCount": null,
          "title": "AWS S3 Conditional Writes: The –if-none-match parameter",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "modexp",
      "feedUrl": "https://modexp.wordpress.com/feed/",
      "siteUrl": "https://modexp.wordpress.com",
      "articles": [
        {
          "id": "http://modexp.wordpress.com/?p=5702",
          "author": "odzhan",
          "description": "Table Of Contents Introduction Affine Transformation Linear Congruential Generator (LCG) Inversive Congruential Generator (ICG) Modular Multiplication Affine Permutation References Appendix Affine Cipher Affine Hash Modular Involutions 1. Introduction In a previous post on masking, shuffling data was suggested as an … Continue reading →",
          "link": "https://modexp.wordpress.com/2024/10/18/shellcode-obfuscation-with-permutations/",
          "publishedOn": "2024-10-18T17:15:04.000Z",
          "wordCount": 5055,
          "title": "Shellcode: Obfuscation with Permutations",
          "imageUrl": "https://modexp.wordpress.com/wp-content/uploads/2024/10/tree-nature-forest-branch-plant-leaf-fall-flower-green-red-paradise-color-insect-autumn-botany-colorful-flora-season-life-fear-fantastic-mysterious-shrub-knight-deciduous-horror-woodland.jpg?w=1200"
        }
      ]
    },
    {
      "title": "Hexacorn",
      "feedUrl": "http://www.hexacorn.com/blog/feed/",
      "siteUrl": "https://www.hexacorn.com/blog",
      "articles": [
        {
          "id": "https://www.hexacorn.com/blog/?p=9580",
          "author": "adam",
          "description": "The new win11 version of Notepad accepts a few command line options that i have not seen documented anywhere (or only documented partially). so analyzing this key and its children may have some DFIR value, potentially. The first value is … Continue reading →",
          "link": "https://www.hexacorn.com/blog/2024/10/26/some-notes-on-windows-11-notepad/",
          "publishedOn": "2024-10-26T23:53:59.000Z",
          "wordCount": 920,
          "title": "Some notes on Windows 11 Notepad",
          "imageUrl": null
        },
        {
          "id": "https://www.hexacorn.com/blog/?p=9536",
          "author": "adam",
          "description": "One of the oldest and most popular reversing tools is IDA Pro (usually bundled with its multiple decompilers&plug-ins). Over the years, the creators of this tool introduced a lot of substantial changes to this software, and in parallel, a lot … Continue reading →",
          "link": "https://www.hexacorn.com/blog/2024/10/25/going-reverse-on-reversing-tools/",
          "publishedOn": "2024-10-25T22:38:24.000Z",
          "wordCount": 1421,
          "title": "Going reverse on reversing tools…",
          "imageUrl": null
        },
        {
          "id": "https://www.hexacorn.com/blog/?p=9560",
          "author": "adam",
          "description": "Today I wanted to upgrade my Ghidra setup so I downloaded its latest version. Now, I really don’t like running installers in general, because they clutter the system and the Registry, so I was nicely surprised when I learned that … Continue reading →",
          "link": "https://www.hexacorn.com/blog/2024/10/25/installing-latest-ghidra-w-o-installing-it/",
          "publishedOn": "2024-10-25T22:18:32.000Z",
          "wordCount": 616,
          "title": "Installing latest Ghidra w/o installing it",
          "imageUrl": null
        },
        {
          "id": "https://www.hexacorn.com/blog/?p=9551",
          "author": "adam",
          "description": "This entry is a bit convoluted, but it’s still quite interesting. I have discovered it today only to google around and find out someone posted the info about it back in 2013. So, I will describe what they did in … Continue reading →",
          "link": "https://www.hexacorn.com/blog/2024/10/19/beyond-good-ol-run-key-part-143/",
          "publishedOn": "2024-10-19T22:17:28.000Z",
          "wordCount": 765,
          "title": "Beyond good ol’ Run key, Part 143",
          "imageUrl": null
        },
        {
          "id": "https://www.hexacorn.com/blog/?p=9547",
          "author": "adam",
          "description": "There is a very old hack out there that enables logging for the advpack.dll and IEAdvpack.dll DLLs. Many of their functions include the logging, so enabling this may help to pick up some old-school forensic logs. Of course, the value … Continue reading →",
          "link": "https://www.hexacorn.com/blog/2024/10/19/advpack-dll-and-ieadvpack-dll-logging-capability/",
          "publishedOn": "2024-10-19T21:09:47.000Z",
          "wordCount": 573,
          "title": "advpack.dll and IEAdvpack.dll logging capability",
          "imageUrl": null
        },
        {
          "id": "https://www.hexacorn.com/blog/?p=9516",
          "author": "adam",
          "description": "I don’t even know how to start. I wrote about old InstallShield setup before, and today’s topic is very similar – the old, yet still present setup file residing (on Win10, 11) in the following location: c:\\windows\\SysWOW64\\setup16.exe Running it gives … Continue reading →",
          "link": "https://www.hexacorn.com/blog/2024/10/12/the-sweet16-the-oldbin-lolbin-called-setup16-exe/",
          "publishedOn": "2024-10-12T21:17:10.000Z",
          "wordCount": 1096,
          "title": "The Sweet16 – the oldbin lolbin called setup16.exe",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Penetration testing Archives - MDSec",
      "feedUrl": "https://www.mdsec.co.uk/category/penetration-testing/feed/",
      "siteUrl": "https://www.mdsec.co.uk/category/penetration-testing/",
      "articles": []
    },
    {
      "title": "Pen Test Partners",
      "feedUrl": "https://www.pentestpartners.com/feed/",
      "siteUrl": "https://www.pentestpartners.com",
      "articles": [
        {
          "id": "https://www.pentestpartners.com/?p=29947",
          "author": "Luke Davis",
          "description": "Mounting memory? This changes everything! TL;DR Memory forensics is crucial for investigations, providing access to volatile data, like running processes and network connections. MemProcFS is a game-changer tool in memory […]\nMounting memory with MemProcFS for advanced memory forensics first appeared on Pen Test Partners.",
          "link": "https://www.pentestpartners.com/security-blog/mounting-memory-with-memprocfs-for-advanced-memory-forensics/",
          "publishedOn": "2024-10-31T06:15:15.000Z",
          "wordCount": 3666,
          "title": "Mounting memory with MemProcFS for advanced memory forensics",
          "imageUrl": null
        },
        {
          "id": "https://www.pentestpartners.com/?p=29996",
          "author": "Ken Munro",
          "description": "TL;DR CCTV is often overlooked; ‘shadow tech’ whose security isn’t as carefully reviewed as core IT assets It is often a responsibility for facilities managers who may have little experience […]\nTesting the security of CCTV systems first appeared on Pen Test Partners.",
          "link": "https://www.pentestpartners.com/security-blog/testing-the-security-of-cctv-systems/",
          "publishedOn": "2024-10-30T06:59:30.000Z",
          "wordCount": 1954,
          "title": "Testing the security of CCTV systems",
          "imageUrl": null
        },
        {
          "id": "https://www.pentestpartners.com/?p=29931",
          "author": "Luke Davis",
          "description": "TL;DR Memory forensics enhances investigations by analysing volatile data (in RAM) unavailable in disk forensics. Key insights from memory include running processes, network connections, encryption keys, and user activity, vital […]\nUsing Volatility for advanced memory forensics first appeared on Pen Test Partners.",
          "link": "https://www.pentestpartners.com/security-blog/using-volatility-for-advanced-memory-forensics/",
          "publishedOn": "2024-10-24T05:14:11.000Z",
          "wordCount": 4046,
          "title": "Using Volatility for advanced memory forensics",
          "imageUrl": null
        },
        {
          "id": "https://www.pentestpartners.com/?p=29931",
          "author": "Luke Davis",
          "description": "TL;DR Memory forensics enhances investigations by analysing volatile data (in RAM) unavailable in disk forensics. Key insights from memory include running processes, network connections, encryption keys, and user activity, vital […]\nInvestigating volatile data with advanced memory forensics tools – part 1 first appeared on Pen Test Partners.",
          "link": "https://www.pentestpartners.com/security-blog/investigating-volatile-data-with-advanced-memory-forensics-tools-part-1/",
          "publishedOn": "2024-10-24T05:14:11.000Z",
          "wordCount": 4084,
          "title": "Investigating volatile data with advanced memory forensics tools – part 1",
          "imageUrl": null
        },
        {
          "id": "https://www.pentestpartners.com/?p=29874",
          "author": "Rachel Rabin",
          "description": "TL;DR Review the key artefacts to ensure the best possible telemetry is available in the case of a Business Email Compromise (BEC). Keep an eye on data retention, where necessary […]\nBEC-ware the phish (part 1). Investigating incidents in M365 first appeared on Pen Test Partners.",
          "link": "https://www.pentestpartners.com/security-blog/bec-ware-the-phish-part-1-investigating-incidents-in-m365/",
          "publishedOn": "2024-10-15T05:28:55.000Z",
          "wordCount": 4042,
          "title": "BEC-ware the phish (part 1). Investigating incidents in M365",
          "imageUrl": null
        },
        {
          "id": "https://www.pentestpartners.com/?p=29836",
          "author": "Sam Macdonald",
          "description": "TL;DR Imposter syndrome is the belief that you are undeserving of your achievements Anyone can be affected by it There are ways to cope What is imposter syndrome? Imposter syndrome […]\nImposter syndrome in cyber security first appeared on Pen Test Partners.",
          "link": "https://www.pentestpartners.com/security-blog/imposter-syndrome-in-cyber-security/",
          "publishedOn": "2024-10-10T05:56:27.000Z",
          "wordCount": 2440,
          "title": "Imposter syndrome in cyber security",
          "imageUrl": null
        },
        {
          "id": "https://www.pentestpartners.com/?p=29855",
          "author": "PTP Aviation Team",
          "description": "TL;DR Always thank researchers for reporting vulnerabilities. Acknowledging their efforts can set the right tone. Lead all communications with researchers. Don’t let legal or PR teams take over. Provide regular […]\nHow to handle vulnerability reports in aviation first appeared on Pen Test Partners.",
          "link": "https://www.pentestpartners.com/security-blog/how-to-handle-vulnerability-reports-in-aviation/",
          "publishedOn": "2024-10-09T05:04:45.000Z",
          "wordCount": 1920,
          "title": "How to handle vulnerability reports in aviation",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "SANS Blog",
      "feedUrl": "https://www.sans.org/blog/feed.xml",
      "siteUrl": "https://www.sans.org/blog",
      "articles": [
        {
          "id": "https://www.sans.org/blog/michael-j-assante-ics-security-lifetime-achievement-award",
          "author": null,
          "description": "The SANS ICS Lifetime Achievement Award recognizes individuals who have contributed exceptional efforts to enhance the security of ICS on an international scale, and who actively strive to bridge the gap between IT and OT.",
          "link": "https://www.sans.org/blog/michael-j-assante-ics-security-lifetime-achievement-award?msc=rss",
          "publishedOn": "2024-10-31T00:00:00.000Z",
          "wordCount": 7203,
          "title": "Michael J. Assante ICS Security Lifetime Achievement Award",
          "imageUrl": null
        },
        {
          "id": "https://www.sans.org/blog/a-visual-summary-of-sans-hackfest-summit-2024",
          "author": null,
          "description": "SANS Offensive Blog pertaining to a summary of the SANS HackFest Hollywood Summit",
          "link": "https://www.sans.org/blog/a-visual-summary-of-sans-hackfest-summit-2024?msc=rss",
          "publishedOn": "2024-10-28T00:00:00.000Z",
          "wordCount": 3008,
          "title": "A Visual Summary of SANS HackFest Hollywood Summit 2024",
          "imageUrl": null
        },
        {
          "id": "https://www.sans.org/blog/the-abcs-of-cybersecurity",
          "author": null,
          "description": "A glossary of cybersecurity terminology that will help you quickly get up to speed on the industry’s terms and meanings.",
          "link": "https://www.sans.org/blog/the-abcs-of-cybersecurity?msc=rss",
          "publishedOn": "2024-10-24T00:00:00.000Z",
          "wordCount": 3380,
          "title": "The ABCs of Cybersecurity",
          "imageUrl": null
        },
        {
          "id": "https://www.sans.org/blog/aviata-solo-flight-challenge-cloud-security-workshops/",
          "author": null,
          "description": "Master cloud security by tackling this free series of workshops.",
          "link": "https://www.sans.org/blog/aviata-solo-flight-challenge-cloud-security-workshops/?msc=rss",
          "publishedOn": "2024-10-22T00:00:00.000Z",
          "wordCount": 10982,
          "title": "Aviata Cloud Solo Flight Challenge",
          "imageUrl": null
        },
        {
          "id": "https://www.sans.org/blog/the-2024-state-of-ics-ot-cybersecurity-our-past-and-our-future",
          "author": null,
          "description": "The 2024 State of ICS/OT report shows our industry’s growth since 2019 and offers insight into how we may improve going into 2029.",
          "link": "https://www.sans.org/blog/the-2024-state-of-ics-ot-cybersecurity-our-past-and-our-future?msc=rss",
          "publishedOn": "2024-10-16T00:00:00.000Z",
          "wordCount": 5622,
          "title": "The 2024 State of ICS/OT Cybersecurity: Our Past and Our Future",
          "imageUrl": null
        },
        {
          "id": "https://www.sans.org/blog/ics-ot-cybersecurity-ai-considerations-for-now-and-the-future-part-ii",
          "author": null,
          "description": "Integrating AI into ICS/OT cybersecurity and engineering processes presents opportunities for enhanced efficiency, resiliency, and safety.",
          "link": "https://www.sans.org/blog/ics-ot-cybersecurity-ai-considerations-for-now-and-the-future-part-ii?msc=rss",
          "publishedOn": "2024-10-16T00:00:00.000Z",
          "wordCount": 6508,
          "title": "ICS/OT Cybersecurity & AI: Considerations for Now and the Future (Part II)",
          "imageUrl": null
        },
        {
          "id": "https://www.sans.org/blog/key-insights-from-steve-sims-keynote-on-the-current-threat-landscape-and-ai-in-cybersecurity",
          "author": null,
          "description": "Organizations must stay vigilant and continuously adapt their security strategies to address both the opportunities and challenges presented by AI.",
          "link": "https://www.sans.org/blog/key-insights-from-steve-sims-keynote-on-the-current-threat-landscape-and-ai-in-cybersecurity?msc=rss",
          "publishedOn": "2024-10-09T00:00:00.000Z",
          "wordCount": 3712,
          "title": "Key Insights from Steve Sims' Keynote on the Current Threat Landscape and AI in Cybersecurity",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Embrace The Red",
      "feedUrl": "https://embracethered.com/blog/index.xml",
      "siteUrl": "https://embracethered.com/blog/",
      "articles": [
        {
          "id": "https://embracethered.com/blog/posts/2024/claude-computer-use-c2-the-zombais-are-coming/",
          "author": null,
          "description": "A few days ago, Anthropic released Claude Computer Use, which is a model + code that allows Claude to control a computer. It takes screenshots to make decisions, can run bash commands and so forth.\nIt’s cool, but obviously very dangerous because of prompt injection. Claude Computer Use enables AI to run commands on machines autonomously, posing severe risks if exploited via prompt injection.\n\nDisclaimer So, first a disclaimer: Claude Computer Use is a Beta Feature and what you are going to see is a fundamental design problem in state-of-the-art LLM-powered Applications and Agents.",
          "link": "https://embracethered.com/blog/posts/2024/claude-computer-use-c2-the-zombais-are-coming/",
          "publishedOn": "2024-10-25T00:00:57.000Z",
          "wordCount": 936,
          "title": "ZombAIs: From Prompt Injection to C2 with Claude Computer Use",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "Pentest Blog",
      "feedUrl": "https://pentest.blog/feed/",
      "siteUrl": "https://pentest.blog",
      "articles": []
    },
    {
      "title": "XPN InfoSec Blog",
      "feedUrl": "https://blog.xpnsec.com/rss/",
      "siteUrl": "https://blog.xpnsec.com/",
      "articles": []
    },
    {
      "title": "Stories by Cedric Owens on Medium",
      "feedUrl": "https://medium.com/feed/@cedowens",
      "siteUrl": "https://medium.com/@cedowens?source=rss-fd791048dac0------2",
      "articles": []
    },
    {
      "title": "harmj0y",
      "feedUrl": "https://blog.harmj0y.net/feed/",
      "siteUrl": "https://blog.harmj0y.net",
      "articles": []
    },
    {
      "title": "Vincent Van Mieghem",
      "feedUrl": "https://vanmieghem.io/feed.xml",
      "siteUrl": "https://vanmieghem.io/",
      "articles": []
    },
    {
      "title": "ForrestOrr",
      "feedUrl": "https://www.forrest-orr.net/blog/blog-feed.xml",
      "siteUrl": "https://www.forrest-orr.net/blog",
      "articles": []
    },
    {
      "title": "Arash's Blog",
      "feedUrl": "https://www.arashparsa.com/rss/",
      "siteUrl": "https://www.arashparsa.com/",
      "articles": []
    },
    {
      "title": "Stories by assume-breach on Medium",
      "feedUrl": "https://medium.com/feed/@assume-breach",
      "siteUrl": "https://medium.com/@assume-breach?source=rss-fe83402397b0------2",
      "articles": []
    },
    {
      "title": "SecureAuth Blogs - Identity and Access Management Solution",
      "feedUrl": "https://www.secureauth.com/blog/feed/",
      "siteUrl": "https://www.secureauth.com/blog/",
      "articles": []
    },
    {
      "title": "SentinelLabs - We are hunters, reversers, exploit developers, and tinkerers shedding light on the world of malware, exploits, APTs, and cybercrime across all platforms.",
      "feedUrl": "https://www.sentinelone.com/labs/feed/",
      "siteUrl": "https://www.sentinelone.com/labs/",
      "articles": [
        {
          "id": "https://www.sentinelone.com/?post_type=labs&p=107667",
          "author": "Alex Delamotte",
          "description": "Learn about cloud threats, how to hunt for them and how to analyze them in this post based on Alex Delamotte's recent LABScon workshop.",
          "link": "https://www.sentinelone.com/labs/cloud-malware-a-threat-hunters-guide-to-analysis-techniques-and-delivery/",
          "publishedOn": "2024-10-24T15:17:35.000Z",
          "wordCount": 8371,
          "title": "Cloud Malware | A Threat Hunter’s Guide to Analysis, Techniques and Delivery",
          "enclosure": {
            "url": "https://www.sentinelone.com/wp-content/uploads/2024/10/Cloud-Workshop-blue-ftr.jpg",
            "length": "391115",
            "type": "image/jpeg"
          },
          "imageUrl": "https://www.sentinelone.com/wp-content/uploads/2024/10/Cloud-Workshop-blue-ftr.jpg"
        },
        {
          "id": "https://www.sentinelone.com/?post_type=labs&p=107173",
          "author": "Dakota Cary",
          "description": "China's CVERC attempts to attribute Volt Typhoon activities to the U.S., but the fact-free claims reveal much about the PRC's real agenda.",
          "link": "https://www.sentinelone.com/labs/chinas-influence-ops-twisting-tales-of-volt-typhoon-at-home-and-abroad/",
          "publishedOn": "2024-10-16T14:23:52.000Z",
          "wordCount": 6975,
          "title": "China’s Influence Ops | Twisting Tales of Volt Typhoon at Home and Abroad",
          "enclosure": {
            "url": "https://www.sentinelone.com/wp-content/uploads/2024/10/china-influence-feature.jpg",
            "length": "326838",
            "type": "image/jpeg"
          },
          "imageUrl": "https://www.sentinelone.com/wp-content/uploads/2024/10/china-influence-feature.jpg"
        }
      ]
    },
    {
      "title": "NVISO Labs",
      "feedUrl": "https://blog.nviso.eu/feed/",
      "siteUrl": "https://blog.nviso.eu",
      "articles": [
        {
          "id": "https://blog.nviso.eu/?p=18812",
          "author": "Maxou Van Lauwe",
          "description": "Introduction In the first part of this mini-series, we explored briefly what kind of impacts AI may have on the CIA Triad and whether we should adjust this fundamental framework. The goal of this and subsequent blogposts is assessing the pillars of the proposed Information Security Hexagon, starting with Confidentiality. Maintaining confidentiality in Artificial Intelligence … Continue reading How AI forces us to expand our thinking about basic cybersecurity concepts: Part 2 – Confidentiality →",
          "link": "https://blog.nviso.eu/2024/10/31/how-ai-forces-us-to-expand-our-thinking-about-basic-cybersecurity-concepts-part-2-confidentiality/",
          "publishedOn": "2024-10-31T08:48:22.000Z",
          "wordCount": 3078,
          "title": "How AI forces us to expand our thinking about basic cybersecurity concepts: Part 2 – Confidentiality",
          "imageUrl": "https://blog.nviso.eu/wp-content/uploads/2024/10/How-AI-forces-us-to-expand-our-thinking_CONFIDENTIALITY.jpg"
        },
        {
          "id": "https://blog.nviso.eu/?p=18782",
          "author": "Maxou Van Lauwe",
          "description": "The traditional CIA Triad (Confidentiality, Integrity, and Availability) has long been a cornerstone of information security, providing a solid framework to protect data and systems. However, the rising presence of AI in our lives introduces new challenges that extend beyond the current scope of the CIA Triad. In this AI mini-series, we will analyse the … Continue reading How AI forces us to expand our thinking about basic cybersecurity concepts: Part 1 – Introduction →",
          "link": "https://blog.nviso.eu/2024/10/30/how-ai-forces-us-to-expand-our-thinking-about-basic-cybersecurity-concepts-part-1-introduction/",
          "publishedOn": "2024-10-30T17:24:04.000Z",
          "wordCount": 2506,
          "title": "How AI forces us to expand our thinking about basic cybersecurity concepts: Part 1 – Introduction",
          "imageUrl": "https://blog.nviso.eu/wp-content/uploads/2024/10/How-AI-forces-us-to-expand-our-thinking_INTRO.jpg"
        },
        {
          "id": "https://blog.nviso.eu/?p=18670",
          "author": "Stef Collart",
          "description": "In our previous blog post about RMM (Remote Management and Monitoring) tools, we highlighted the prevalence of such tooling in nearly every organization’s environment. In today’s world, where many organizations support remote work, RMM tools are frequently utilized to help provide assistance to end users and to allow IT administrators to perform their tasks from … Continue reading Hunting for Remote Management Tools: Detecting RMMs →",
          "link": "https://blog.nviso.eu/2024/10/21/hunting-for-remote-management-tools-detecting-rmms/",
          "publishedOn": "2024-10-21T07:00:00.000Z",
          "wordCount": 3288,
          "title": "Hunting for Remote Management Tools: Detecting RMMs",
          "imageUrl": "https://blog.nviso.eu/wp-content/uploads/2024/10/Hunting-for-Remote-Management-Tool-Detecting-RMMs.png"
        }
      ]
    },
    {
      "title": "bishopfox.com",
      "feedUrl": "https://bishopfox.com/feeds/blog.rss",
      "siteUrl": "https://bishopfox.com/",
      "articles": [
        {
          "id": "https://bishopfox.com/blog/a-look-at-fortijump-cve-2024-47575",
          "author": "Bishop Fox",
          "description": "The recent discovery of FortiJump (CVE-2024-47575) highlights a critical vulnerability exploited in the wild, prompting an urgent need to understand its impact on centralized management devices. Take a deeper look with Bishop Fox experts.",
          "link": "https://bishopfox.com/blog/a-look-at-fortijump-cve-2024-47575",
          "publishedOn": "2024-11-01T16:15:00.000Z",
          "wordCount": 3250,
          "title": "A Brief Look at FortiJump (FortiManager CVE-2024-47575)",
          "imageUrl": "https://assets.bishopfox.com/prod-1437/Images/channels/blog/tiles/_1200x630_crop_center-center_82_none/Bishop-Fox-Blog-Fortijump.jpg?mtime=1730487462"
        },
        {
          "id": "https://bishopfox.com/blog/2024-security-tech-books",
          "author": "Bishop Fox",
          "description": "We've polled our team and are back with our 2024 cybersecurity book recommendations to help you level up your cybersecurity skills.",
          "link": "https://bishopfox.com/blog/2024-security-tech-books",
          "publishedOn": "2024-10-15T07:00:00.000Z",
          "wordCount": 2439,
          "title": "Off the Fox Den Bookshelf: Security and Tech Books We Love",
          "imageUrl": "https://assets.bishopfox.com/prod-1437/Images/channels/blog/Open-Graph/_1200x630_crop_center-center_82_none/BishopFox-Blog-2024-Security-Book-Recommendations-OG.jpg?mtime=1727368474"
        }
      ]
    },
    {
      "title": "Synack Blog | Synack",
      "feedUrl": "https://www.synack.com/blog/feed/",
      "siteUrl": "https://www.synack.com/blog/",
      "articles": [
        {
          "id": "https://www.synack.com/?p=16110",
          "author": "Luke Luckett",
          "description": "The term “special relationship,” coined by Winston Churchill, describes the close, longstanding alliance between the United States and the United Kingdom. It has been applied to cooperation during war, to trade and commerce, and even to intelligence sharing. That special relationship has clearly influenced the two nations’ recent policy papers on national cybersecurity. The U.K. […]\nThe post Protecting Critical Infrastructure: A Tale of Two National Cybersecurity Strategies appeared first on Synack.",
          "link": "https://www.synack.com/blog/critical-infrastructure-national-cybersecurity-strategies/",
          "publishedOn": "2023-04-06T15:17:37.000Z",
          "wordCount": 2153,
          "title": "Protecting Critical Infrastructure: A Tale of Two National Cybersecurity Strategies",
          "imageUrl": "https://www.synack.com/wp-content/uploads/2023/04/synack-US-UK-Critical-Infrastructure-Blog-blog.jpg"
        },
        {
          "id": "https://www.synack.com/?p=16093",
          "author": "Huw Jones",
          "description": "Scoping Adventures is a series of blogs about some of the more interesting penetration tests that the Synack Customer Success teams have worked on over the last few months. Each blog outlines how we engage with the client to achieve the best results from a pentest. Pentesters love colors—red, blue, purple, black, white and grey […]\nThe post Scoping Adventures: How to Get the Most Out of Your Synack Pentesting appeared first on Synack.",
          "link": "https://www.synack.com/blog/scoping-your-pentest-with-synack/",
          "publishedOn": "2023-03-27T14:46:36.000Z",
          "wordCount": 3160,
          "title": "Scoping Adventures: How to Get the Most Out of Your Synack Pentesting",
          "imageUrl": "https://www.synack.com/wp-content/uploads/2023/03/442-synack-TestScopingBlog-blog-1.jpg"
        },
        {
          "id": "https://www.synack.com/?p=16082",
          "author": "Synack",
          "description": "The Synack Platform & Five Pillars of Strategic Pentesting Why You Need to Think Strategically It’s no great revelation that tactics, techniques, and procedures utilized by nefarious hackers hacking activities are evolving on a daily basis. In 2022, 18,828 common vulnerabilities and exposures (CVEs) were published. At the same time, organization attack surfaces are expanding. […]\nThe post Applying Strategic Thinking in Your Pentesting Program appeared first on Synack.",
          "link": "https://www.synack.com/blog/applying-strategic-thinking-in-your-pentesting-program/",
          "publishedOn": "2023-03-15T11:00:36.000Z",
          "wordCount": 2015,
          "title": "Applying Strategic Thinking in Your Pentesting Program",
          "imageUrl": "https://www.synack.com/wp-content/uploads/2023/03/synack-strategic-pentesting-guide-blog.jpg"
        },
        {
          "id": "https://www.synack.com/?p=16074",
          "author": "Mark Kuhr",
          "description": "One week ago, the Biden administration unveiled its long-awaited U.S. National Cybersecurity Strategy, with an eye toward centralizing government cyber resources and holding IT vendors more accountable for their digital defenses. Now that the ink is dry on the 35-page document, top officials like Acting National Cyber Director Kemba Walden are busy putting it into […]\nThe post The U.S. has a new cybersecurity strategy. What’s next for CISOs? appeared first on Synack.",
          "link": "https://www.synack.com/blog/new-cybersecurity-strategy-whats-next-for-cisos/",
          "publishedOn": "2023-03-13T14:37:20.000Z",
          "wordCount": 2067,
          "title": "The U.S. has a new cybersecurity strategy. What’s next for CISOs?",
          "imageUrl": "https://www.synack.com/wp-content/uploads/2023/03/CapitolBuilding-no-copy.jpg"
        }
      ]
    },
    {
      "title": "mgeeky's lair",
      "feedUrl": "https://mgeeky.tech/feed/",
      "siteUrl": "https://mgeeky.tech",
      "articles": []
    },
    {
      "title": "Publications | Outflank",
      "feedUrl": "https://outflank.nl/blog/feed/",
      "siteUrl": "https://www.outflank.nl/blog/",
      "articles": [
        {
          "id": "https://www.outflank.nl/?p=4697",
          "author": "Dima van de Wouw",
          "description": "By Guido Miggelenbrink at Outflank\nIntroduction\nIn this blog post we introduce a novel process injection technique named Early Cascade Injection, explore Windows process creation, and identify how several Endpoint Detection and Response systems (EDRs) initialize their in-process detection capabilities. This new Early Cascade Injection technique targets the user-mode part of process creation and combines elements of the well-known Early Bird APC Injection technique with the recently published EDR-Preloading technique by Marcus Hutchins [1]. Unlike Early Bird APC Injection, this new technique avoids queuing cross-process Asynchronous Procedure Calls (APCs), while having minimal remote process interaction. This makes Early Cascade Injection a stealthy process injection technique that is effective against top tier EDRs while avoiding detection.\n\nTo provide insights into Early Cascade Injection’s internals,\nTags: Early Cascade injection, EarlyCascade, EDR Evasion, EDR userland initialisation, EDR-Preloading, Injection, Windows process ceation\nRead full post\nThe post Introducing Early Cascade Injection: From Windows Process Creation to Stealthy Injection appeared first on Outflank.",
          "link": "https://www.outflank.nl/blog/2024/10/15/introducing-early-cascade-injection-from-windows-process-creation-to-stealthy-injection/",
          "publishedOn": "2024-10-15T12:03:43.000Z",
          "wordCount": 7354,
          "title": "Introducing Early Cascade Injection: From Windows Process Creation to Stealthy Injection",
          "imageUrl": "https://www.outflank.nl/wp-content/uploads/2024/10/AbstractedCallGraphV4.png"
        }
      ]
    },
    {
      "title": "IFCR - Medium",
      "feedUrl": "https://research.ifcr.dk/feed",
      "siteUrl": "https://research.ifcr.dk?source=rss----9372536d3084---4",
      "articles": []
    },
    {
      "title": "S3cur3Th1sSh1t",
      "feedUrl": "https://s3cur3th1ssh1t.github.io/feed.xml",
      "siteUrl": "https://s3cur3th1ssh1t.github.io/",
      "articles": []
    }
  ],
  "cliVersion": "1.15.1"
}